[{"title":"组件库文档v1.0","url":"http://yoursite.com/2021/08/30/组件库文档v1.0/","content":"<blockquote>\n<p>上篇我们具体介绍了一些组件库的搭建，这篇我们将介绍一下组件库文档 1.0 的构建生成过程。</p>\n</blockquote>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>首先来看一下组件库文档最基本的一些需求：</p>\n<ul>\n<li>提供组件的介绍说明</li>\n<li>提供组件的属性列表 Props</li>\n<li>提供组件调用的示例源码 Usage</li>\n<li>提供组件调用的演示 demo</li>\n</ul>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><p>我们前期规范好了 markdown 说明文件以及 demo 文件，我们就可以直接通过 node 的读写文件再配合 react 菜单路由的方式进行生成：</p>\n<ul>\n<li>node 读写文件</li>\n<li>react 路由</li>\n</ul>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><p>在上篇我们讲到对于一个组件，需要在开发组件时编写好组件的说明文档 markdown 文件以及 demo，文档规范如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## Input</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">#### 输入框组件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## Input Props：</span></span><br><span class=\"line\"></span><br><span class=\"line\">| 参数       | 说明                     | 类型                                         | 默认值  |</span><br><span class=\"line\">| ---------- | ------------------------ | -------------------------------------------- | ------- |</span><br><span class=\"line\">| disabled   | 是否禁用                 | boolean                                      | -       |</span><br><span class=\"line\">| icon       | input 图标               | React.ReactElement                           | -       |</span><br><span class=\"line\">| iconPlace  | input 图标渲染位置       | 'left' \\| 'right'                            | 'right' |</span><br><span class=\"line\">| allowClear | 是否可清除，渲染清除图标 | boolean                                      | false   |</span><br><span class=\"line\">| showNumber | 是否渲染字数计算         | boolean                                      | false   |</span><br><span class=\"line\">| maxLength  | 最大输入长度             | number                                       | 70      |</span><br><span class=\"line\">| onChange   | input 输入框改变的回调   | (e: ChangeEvent\\&lt;HTMLInputElement\\&gt;) =&gt; void | -       |</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; Tip：Input 的 props 不止上面列举的项，可传入原生 input 的所有属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### Usage</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"code\">```js</span></span><br><span class=\"line\"><span class=\"code\">import &#123; Input &#125; from \"@hzzly/components\";</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">const onChange = (e) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"code\">  console.log(\"Value: \", e.target.value);</span></span><br><span class=\"line\"><span class=\"code\">&#125;;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">ReactDOM.render(&lt;Input icon=&#123;&lt;Icon /&gt;&#125; onChange=&#123;onChange&#125; /&gt;, mountNode);</span></span><br><span class=\"line\"><span class=\"code\">```</span></span><br></pre></td></tr></table></figure>\n<p>这也是我们目前定义的组件 markdown 规范，这样书写一个 markdown 文件就能满足前三点的需求，最后一点我们单独定义了一个 demo 文件来进行组件的演示和调试。</p>\n<h2 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h2><h3 id=\"node-读写-markdown-和-demo\"><a href=\"#node-读写-markdown-和-demo\" class=\"headerlink\" title=\"node 读写 markdown 和 demo\"></a>node 读写 markdown 和 demo</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 读取组件库</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readComponents</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> markdowns = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> demos = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> components = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dir = path.join(__dirname, <span class=\"string\">\"../src\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dirs = fs</span><br><span class=\"line\">    .readdirSync(dir)</span><br><span class=\"line\">    .filter(</span><br><span class=\"line\">      (f) =&gt; f.indexOf(<span class=\"string\">\".\"</span>) &lt; <span class=\"number\">0</span> &amp;&amp; f.toLowerCase().indexOf(<span class=\"string\">\"components\"</span>) &gt; <span class=\"number\">-1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  dirs.forEach(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> absolutePath = path.join(dir, d);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isDir(absolutePath)) &#123;</span><br><span class=\"line\">      fs.readdirSync(absolutePath).forEach(<span class=\"function\">(<span class=\"params\">f</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        components.push(f);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> mdPath = path.join(dir, <span class=\"string\">`./<span class=\"subst\">$&#123;d&#125;</span>/<span class=\"subst\">$&#123;f&#125;</span>/index.md`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> demoPath = path.join(dir, <span class=\"string\">`./<span class=\"subst\">$&#123;d&#125;</span>/<span class=\"subst\">$&#123;f&#125;</span>/demo.tsx`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs.existsSync(mdPath)) &#123;</span><br><span class=\"line\">          markdowns[f] = fs.readFileSync(mdPath).toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs.existsSync(demoPath)) &#123;</span><br><span class=\"line\">          demos[f] = <span class=\"string\">`../src/<span class=\"subst\">$&#123;d&#125;</span>/<span class=\"subst\">$&#123;f&#125;</span>/demo`</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    components,</span><br><span class=\"line\">    markdowns,</span><br><span class=\"line\">    demos,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 写入markdown字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeMd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; markdowns &#125; = readComponents();</span><br><span class=\"line\">  markdowns = &#123;</span><br><span class=\"line\">    ...markdowns,</span><br><span class=\"line\">    Welcome: fs</span><br><span class=\"line\">      .readFileSync(path.join(__dirname, <span class=\"string\">`../src/welcome.md`</span>))</span><br><span class=\"line\">      .toString(),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"built_in\">JSON</span>.stringify(markdowns, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">  fs.writeFile(</span><br><span class=\"line\">    path.join(__dirname, <span class=\"string\">\"../src/md.ts\"</span>),</span><br><span class=\"line\">    <span class=\"string\">`export default <span class=\"subst\">$&#123;str&#125;</span>`</span>,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入配置成功!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自动生成组件及路由\"><a href=\"#自动生成组件及路由\" class=\"headerlink\" title=\"自动生成组件及路由\"></a>自动生成组件及路由</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建组件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComponents</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; components, demos &#125; = readComponents();</span><br><span class=\"line\">  components.forEach(<span class=\"function\">(<span class=\"params\">component</span>) =&gt;</span> <span class=\"keyword\">this</span>.createComponent(component, demos));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComponent</span>(<span class=\"params\">name, demos</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> to = path.resolve(__dirname, <span class=\"string\">`../src/pages/<span class=\"subst\">$&#123;name&#125;</span>.tsx`</span>);</span><br><span class=\"line\">  fs.ensureFileSync(to); <span class=\"comment\">// 确保文件存在(文件目录结构没有会新建)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> template = <span class=\"string\">`import React from 'react';</span></span><br><span class=\"line\"><span class=\"string\">import &#123; markdown &#125; from '@/utils';</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">$&#123;demo[name] ? <span class=\"string\">`import Demo from '<span class=\"subst\">$&#123;demo[name]&#125;</span>';`</span> : <span class=\"string\">\"\"</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">interface Props &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const index: React.FC&lt;Props&gt; = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return (</span></span><br><span class=\"line\"><span class=\"string\">    &lt;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div</span></span><br><span class=\"line\"><span class=\"string\">        className=\"markdown\"</span></span><br><span class=\"line\"><span class=\"string\">        // eslint-disable-next-line react/no-danger</span></span><br><span class=\"line\"><span class=\"string\">        dangerouslySetInnerHTML=&#123;&#123; __html: markdown('<span class=\"subst\">$&#123;name&#125;</span>') &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div className=\"demo\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h2 className=\"demo-title\"&gt;演示&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">        <span class=\"subst\">$&#123;demo[name] ? <span class=\"string\">\"&lt;Demo /&gt;\"</span> : <span class=\"string\">\"&lt;p&gt;演示代码&lt;/p&gt;\"</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">  )</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">export default index;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">  fs.outputFileSync(to, template);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 写入路由</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeRouter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; components &#125; = readComponents();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">import React from 'react';</span></span><br><span class=\"line\"><span class=\"string\">import &#123; RouteConfig &#125; from \"react-router-config\";</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">import Home from '@/pages/Home';</span></span><br><span class=\"line\"><span class=\"string\">import Welcome from '@/pages/Welcome';</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const MarkDown = React.lazy(() =&gt; import(/* webpackChunkName: \"IMarkDown\" */ '@/pages/MarkDown'));</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">$&#123;components</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  .map(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    (component) =&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      <span class=\"string\">`const <span class=\"subst\">$&#123;component&#125;</span> = React.lazy(() =&gt; import(/* webpackChunkName: \"I<span class=\"subst\">$&#123;component&#125;</span>\" */ '@/pages/<span class=\"subst\">$&#123;component&#125;</span>'));`</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  )</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  .join(<span class=\"string\">\"\\n\"</span>)&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const routes: RouteConfig[] = [</span></span><br><span class=\"line\"><span class=\"string\">  &#123;</span></span><br><span class=\"line\"><span class=\"string\">    path: '/',</span></span><br><span class=\"line\"><span class=\"string\">    component: Home,</span></span><br><span class=\"line\"><span class=\"string\">    children: [</span></span><br><span class=\"line\"><span class=\"string\">      &#123; path: \"/welcome\", component: Welcome, name: 'Welcome' &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &#123; path: \"/markdown\", component: MarkDown, name: 'MarkDown测试' &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      <span class=\"subst\">$&#123;components</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        .map((component) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"keyword\">if</span> (component.toLowerCase().indexOf(<span class=\"string\">\"js\"</span>) &gt; <span class=\"number\">-1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            <span class=\"keyword\">return</span> <span class=\"string\">`&#123; path: \"/<span class=\"subst\">$&#123;component.toLowerCase()&#125;</span>\", component: <span class=\"subst\">$&#123;component&#125;</span>, name: '<span class=\"subst\">$&#123;component&#125;</span>' &#125;,`</span>;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          &#125;</span> else &#123;</span></span><br><span class=\"line\"><span class=\"string\">            return `</span>&#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/$&#123;component</span></span><br><span class=\"line\"><span class=\"string\">              .replace(/\\B([A-Z])/g, \"</span>-$<span class=\"number\">1</span><span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">              .toLowerCase()&#125;\"</span>, <span class=\"attr\">component</span>: $&#123;component&#125;, <span class=\"attr\">name</span>: <span class=\"string\">'$&#123;component&#125;'</span> &#125;,<span class=\"string\">`;</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        .join(\"\\n      \")&#125;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">];</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">export default routes;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">  fs.outputFileSync(path.join(__dirname, <span class=\"string\">`../src/router/index.ts`</span>), template);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"markdown-解析\"><a href=\"#markdown-解析\" class=\"headerlink\" title=\"markdown 解析\"></a>markdown 解析</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> marked <span class=\"keyword\">from</span> <span class=\"string\">\"marked\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> hljs <span class=\"keyword\">from</span> <span class=\"string\">\"highlight.js/lib/core\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javascript <span class=\"keyword\">from</span> <span class=\"string\">\"highlight.js/lib/languages/javascript\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> md <span class=\"keyword\">from</span> <span class=\"string\">\"@/md\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">markdown</span>(<span class=\"params\">component: string, isComponent = true</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  marked.setOptions(&#123;</span><br><span class=\"line\">    renderer: <span class=\"keyword\">new</span> marked.Renderer(),</span><br><span class=\"line\">    highlight: <span class=\"function\">(<span class=\"params\">code: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> hljs.highlightAuto(code).value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pedantic: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    gfm: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    tables: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    breaks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    sanitize: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    smartLists: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    smartypants: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    xhtml: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (md[component]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> marked(md[component]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isComponent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> marked(<span class=\"string\">`## <span class=\"subst\">$&#123;component&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> marked(component);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在日常开发的过程中，我们除了组件的代码编写外，还有很多流程上、边角上的工作需要做，这些事情往往都比较琐碎又必须要做。我们多借助工具去解决我们的工作中那些零星简单的任务。</p>\n","categories":[],"tags":["随笔","组件库"]},{"title":"组件库搭建实践","url":"http://yoursite.com/2021/08/08/组件库搭建实践/","content":"<blockquote>\n<p>前言：从去年年底开始规划项目的重构，也是这样一个机遇，我开始负责项目的一个基础架构以及一些公共基础服务，主要搭建了组件库以及工具类库来提升后续开发以及重构的效率，期间也是踩了不少坑，接下来就作为整个搭建过程的一个总结，本篇主要是组件库的搭建与实践。</p>\n</blockquote>\n<p>一个项目或系统有着大量的业务场景和业务代码，相似的页面和代码层出不穷，那如何管理和抽象这些相似的代码和模块，这肯定是许多团队都会遇到的问题。不断的拷代码？还是抽象成 UI 组件或业务组件？显然后者更高效。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>之前的开发流程从产品设计到研发的过程中，最常出现在需求沟通与研发过程中由于缺少统一的规范和标准化体系来指导实践，导致实施环节各方沟通成本高。</p>\n<ul>\n<li><strong>认知：</strong>产品、研发、设计师对于同一需求都有自己理解的解决方案，缺少统一规范的约束，难以达成共识。</li>\n<li><strong>效率：</strong>设计效率低，交互原型的维护成本及上下游团队的沟通成本高，易造成不专业的印象。</li>\n<li><strong>品质：</strong>认知和效率的局限性，最终导致实施落地的产品质量和用户体验难以得到保障。</li>\n</ul>\n<h2 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h2><p><strong>组件库最大的价值在于提升整个团队的产研效率，使设计质量得以保障的同时提升产品整体的用户体验。</strong></p>\n<ul>\n<li><strong>保证产品体验的一致性：</strong>对于一个含有多业务系统的大型复杂产品，每个独立的业务系统虽然在功能上有一定区别，但整体的用户体验需要满足基本的一致性。</li>\n<li><strong>提升设计师的效率：</strong>在需求量巨大且需求来自不同的业务线时，需要逐一绘制页面及组件，造成大量重复劳动，并且在评审及需求沟通环节还可能存在不断地细节调优，所以对于设计师而言，组件的高频复用能大大提升设计效率，使设计师更多的将精力聚焦于理解和解决用户的实际问题。</li>\n<li><strong>提升产研团队的效率：</strong>通用场景及普通需求直接按规范进行设计和研发，减少上下游对同一页面及组件使用方式的不同理解而产生的多余沟通成本。</li>\n<li><strong>利于技术的沉淀：</strong>从一个组件库可以扩展到其它的技术方案，比如懒加载、Tree Shaking、文档预览等等。</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p><strong>搭建统一的组件库</strong></p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>接下来将详细介绍搭建一个前端组件库需要涉及的流程和相关知识、工具，其中也是参考了一些主流开源组件库的做法。</p>\n<h2 id=\"基础架构\"><a href=\"#基础架构\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><h3 id=\"组件库目录结构\"><a href=\"#组件库目录结构\" class=\"headerlink\" title=\"组件库目录结构\"></a>组件库目录结构</h3><p>目前现在的组件目录结构大致如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── ...</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── README.md // 文档说明</span><br><span class=\"line\">├── tsconfig.json // ts 配置文件</span><br><span class=\"line\">├── tsconfig.build.json // ts 编译配置</span><br><span class=\"line\">├── build // 配置文件</span><br><span class=\"line\">├── esm // es modules目标文件</span><br><span class=\"line\">├── lib // umd目标文件</span><br><span class=\"line\">├── docs // 文档</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── JsComponents // 原生js组件</span><br><span class=\"line\">    ├── components // React 组件</span><br><span class=\"line\">    ├── images</span><br><span class=\"line\">    ├── style // 公共样式文件</span><br><span class=\"line\">    └── index.ts // 入口文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件目录结构\"><a href=\"#组件目录结构\" class=\"headerlink\" title=\"组件目录结构\"></a>组件目录结构</h3><p>组件的目录结构参考了 antd 的规范</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input</span><br><span class=\"line\">├── Input.tsx // 组件</span><br><span class=\"line\">├── demo.tsx // 示例演示demo</span><br><span class=\"line\">├── index.md // 组件文档说明</span><br><span class=\"line\">├── index.tsx // 组件入口文件</span><br><span class=\"line\">└── style // 样式文件</span><br><span class=\"line\">    ├── index.scss</span><br><span class=\"line\">    └── index.ts</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译后的组件目录结构\"><a href=\"#编译后的组件目录结构\" class=\"headerlink\" title=\"编译后的组件目录结构\"></a>编译后的组件目录结构</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── Input.d.ts</span><br><span class=\"line\">├── Input.js</span><br><span class=\"line\">├── index.d.ts</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">└── style</span><br><span class=\"line\">    ├── index.css</span><br><span class=\"line\">    ├── index.d.ts</span><br><span class=\"line\">    ├── index.js</span><br><span class=\"line\">    └── index.scss</span><br></pre></td></tr></table></figure>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><p>无规矩不成方圆，在组件库开始之初就定义好规范，保证代码的严谨性，配置了以下规则：</p>\n<ul>\n<li>eslint/@typescript-eslint</li>\n<li>stylelint</li>\n<li>git hooks</li>\n<li>git commit</li>\n<li>prettier</li>\n</ul>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>基础架构定义好之后就可以愉快的进行组件开发了，组件的基本开发流程：</p>\n<ul>\n<li>组件初始化</li>\n<li>代码 coding</li>\n<li>组件 demo</li>\n<li>组件文档说明</li>\n<li>组件库入口文件导出组件</li>\n</ul>\n<p>对于组件初始化，我们也是通过脚本自动化实现，减少这些繁琐重复的工作。</p>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><p>对于组件的样式，一开始我们有两套方案：</p>\n<ul>\n<li>常规样式（css/scss）</li>\n<li>CSS-in-JS（<a href=\"https://www.styled-components.com/\" target=\"_blank\" rel=\"noopener\">styled-components</a>）</li>\n</ul>\n<p>我个人的话更喜欢 CSS-in-JS 的方案，不用去考虑样式的打包以及引用方式，但最终考虑到业务场景还需要输出原生的 css 代码提供旧项目引用，所以最后也是采用了常规样式，通过 gulp 打包输出 css 以及 scss 文件，后面打包的时候也会具体介绍一下。</p>\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><p>这里介绍一下目前的文档说明以及文档生成方案，首先对于每一个组件，需要在开发组件时编写好组件的说明文档（规则格式看下面组件文档）以及 demo，当我们运行组件库文档预览项目时会通过 node 脚本读取组件的说明文档以及 demo 自动生成对应的路由文件，这样我们就能实时预览文档以及 demo 演示。</p>\n<h3 id=\"组件文档\"><a href=\"#组件文档\" class=\"headerlink\" title=\"组件文档\"></a>组件文档</h3><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## Input</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">#### 输入框组件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## Input Props：</span></span><br><span class=\"line\"></span><br><span class=\"line\">| 参数       | 说明                     | 类型                                         | 默认值  |</span><br><span class=\"line\">| ---------- | ------------------------ | -------------------------------------------- | ------- |</span><br><span class=\"line\">| disabled   | 是否禁用                 | boolean                                      | -       |</span><br><span class=\"line\">| icon       | input 图标               | React.ReactElement                           | -       |</span><br><span class=\"line\">| iconPlace  | input 图标渲染位置       | 'left' \\| 'right'                            | 'right' |</span><br><span class=\"line\">| allowClear | 是否可清除，渲染清除图标 | boolean                                      | false   |</span><br><span class=\"line\">| showNumber | 是否渲染字数计算         | boolean                                      | false   |</span><br><span class=\"line\">| maxLength  | 最大输入长度             | number                                       | 70      |</span><br><span class=\"line\">| onChange   | input 输入框改变的回调   | (e: ChangeEvent\\<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HTMLInputElement\\</span>&gt;</span></span>) =&gt; void | -       |</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; Tip：Input 的 props 不止上面列举的项，可传入原生 input 的所有属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### Usage</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"code\">```js</span></span><br><span class=\"line\"><span class=\"code\">import &#123; Input &#125; from \"@hzzly/components\";</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">const onChange = (e) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"code\">  console.log(\"Value: \", e.target.value);</span></span><br><span class=\"line\"><span class=\"code\">&#125;;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">ReactDOM.render(&lt;Input icon=&#123;&lt;Icon /&gt;&#125; onChange=&#123;onChange&#125; /&gt;, mountNode);</span></span><br><span class=\"line\"><span class=\"code\">```</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件库文档\"><a href=\"#组件库文档\" class=\"headerlink\" title=\"组件库文档\"></a>组件库文档</h3><p>组件库的文档一般都是对外可访问的，因此需要部署到服务器上，同时也需具备本地预览的功能。</p>\n<p>可以自己搭一个文档站点，也可以使用目前主流的文档生成器（Docz、Storybook、VuePress）来生成文档站点。</p>\n<p>这里我们采用的是自己搭建的一个单独的 React 项目，也就是上面的 <code>docs</code> 文件夹，其实自己搭也比较简单，首先是思路：</p>\n<ul>\n<li><code>readFile</code> 读取 <code>src</code> 下组件的 md 文件和 demo 文件保存起来</li>\n<li><code>writeFile</code> 写入路由配置以及对应的路由文件</li>\n<li>通过不同的路由渲染对应的组件文档和演示</li>\n</ul>\n<p>主要借助的是 node 读写文件的便捷性，对于文档自动生成方案在后面文章会具体介绍一下，先明确一下思路就行。</p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>对于打包后的文件，统一放在 <code>ems</code> 目录下，顾名思义我们需要打包成 <code>ESModule</code> 的规范。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// packages.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"scripts\": &#123;</span><br><span class=\"line\">    \"clean\": \"rimraf dist\",</span><br><span class=\"line\">    \"build\": \"npm run clean &amp;&amp; tsc -p tsconfig.build.json &amp;&amp; gulp -f ./build/gulpfile.js\", // 组件库打包</span><br><span class=\"line\">    \"start\": \"cross-env webpack-dev-server --config ./build/webpack.dev.js\", // 组件开发调试环境</span><br><span class=\"line\">    \"build:umd\": \"cross-env NODE_ENV='production' webpack --config ./build/webpack.umd.js\", // umd打包</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译打包-ts-x\"><a href=\"#编译打包-ts-x\" class=\"headerlink\" title=\"编译打包 ts[x]\"></a>编译打包 ts[x]</h3><p>在入口文件我们需要以 <code>ESModule</code> 的规范导出组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./components/Input\"</span>;</span><br></pre></td></tr></table></figure>\n<p>打包工具的话我们就不能使用 <code>webpack</code> 来打包我们的组件库，可以使用 <code>rollup</code> 或 <code>TS</code>来编译组件，这里我们采用的是 <code>TS</code> 编译的方案，配置 <code>tsconfig.build.json</code> :</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"outDir\"</span>: <span class=\"string\">\"ems\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"es6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"esnext\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    \"declaration\": true, // 生成声明文件 .d.ts</span><br><span class=\"line\">    \"skipLibCheck\": true,</span><br><span class=\"line\">    \"allowSyntheticDefaultImports\": true,</span><br><span class=\"line\">    \"experimentalDecorators\": true,</span><br><span class=\"line\">    \"baseUrl\": \".\",</span><br><span class=\"line\">    \"paths\": &#123;</span><br><span class=\"line\">      \"@/*\": [\"./src/*\"]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"jsx\": \"react\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"include\": [\"src\"],</span><br><span class=\"line\">  \"exclude\": [</span><br><span class=\"line\">    // 排除编译文件</span><br><span class=\"line\">    \"node_modules\",</span><br><span class=\"line\">    \"src/**/demo.tsx\",</span><br><span class=\"line\">    <span class=\"string\">\"**/*.md\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译打包样式文件\"><a href=\"#编译打包样式文件\" class=\"headerlink\" title=\"编译打包样式文件\"></a>编译打包样式文件</h3><p>上面我们已经成功编译了 <code>ts</code> 或 <code>tsx</code> 文件，但是对于我们的样式文件还没处理（TS 无法编译样式文件），样式文件根据我们上面的代码规范，需要打包编译到对应的组件文件夹下，这样就可以跟着组件路径来引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"@hzzly/components/esm/input/style\"</span>;</span><br></pre></td></tr></table></figure>\n<p>这里我们采用 <code>gulp</code> 来处理样式文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成css到对应组件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scss2css</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp</span><br><span class=\"line\">    .src(paths.styles)</span><br><span class=\"line\">    .pipe(base64(&#123; <span class=\"attr\">maxImageSize</span>: <span class=\"number\">2000</span> &#125;))</span><br><span class=\"line\">    .pipe(sass()) <span class=\"comment\">// 处理sass文件</span></span><br><span class=\"line\">    .pipe(autoprefixer()) <span class=\"comment\">// 根据browserslistrc增加前缀</span></span><br><span class=\"line\">    .pipe(cssmin(&#123; <span class=\"attr\">compatibility</span>: <span class=\"string\">\"ie9\"</span> &#125;)) <span class=\"comment\">// 压缩</span></span><br><span class=\"line\">    .pipe(gulp.dest(paths.dest.esm));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拷贝scss到对应的组件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyScss</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp</span><br><span class=\"line\">    .src(paths.styles)</span><br><span class=\"line\">    .pipe(base64(&#123; <span class=\"attr\">maxWeightResource</span>: <span class=\"number\">10000</span> &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(paths.dest.esm));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h3><p>这里还有一个业务场景是 <code>JsComponents</code> 需要打包成 <code>umd</code> 的格式提供旧框架通过链接的方式直接引用，所以我们还配置了 <code>umd</code> 的打包规范，分别单独打包 js 原生组件, 将组件单独打包需要在 Webpack 中配置多个<code>entry</code>，大致配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entry = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> names = fs</span><br><span class=\"line\">  .readdirSync(path.resolve(__dirname, <span class=\"string\">`../src/JsComponents`</span>))</span><br><span class=\"line\">  .filter(<span class=\"function\">(<span class=\"params\">f</span>) =&gt;</span> f.indexOf(<span class=\"string\">'.'</span>) &lt; <span class=\"number\">0</span>);</span><br><span class=\"line\">names.forEach(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  entry[name.toLocaleLowerCase()] = path.resolve(__dirname, <span class=\"string\">`../src/JsComponents/<span class=\"subst\">$&#123;name&#125;</span>/index.ts`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  entry,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../lib'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].min.js'</span>,</span><br><span class=\"line\">    publicPath: <span class=\"string\">'./'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"迭代维护\"><a href=\"#迭代维护\" class=\"headerlink\" title=\"迭代维护\"></a>迭代维护</h2><h3 id=\"CHANGELOG-md\"><a href=\"#CHANGELOG-md\" class=\"headerlink\" title=\"CHANGELOG.md\"></a>CHANGELOG.md</h3><p>组件日常维护占整个组件库生命周期的很大一部分，组件库做起来了以后，组件功能后续会不断迭代，也许是 bug fix，也可能 feature，这些组件的迭代我们通过 PR 和 issue 来管理，同时，我们需要管理好组件的 changelog，为了规范我们也是将 changelog 维护到一个 Markdown 文件里，通过 <code>conventional-changelog</code> 工具自动根据 commit message 生成 CHANGELOG.md**。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里，也算是对最近在组件库的探索做了个总结，从零开始构建了一个比较完整的组件库，这段经历也是让我在架构思维以及业务层面有了新的认识，也学到了不少的知识。当然，还有很多不完善的地方，也是在慢慢优化完善，在组件化这条路上，我们还有很多事情要做，加油！！！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ant-design/ant-design/\" target=\"_blank\" rel=\"noopener\">Ant Design</a></li>\n</ul>\n","categories":[],"tags":["随笔","组件库"]},{"title":"Input组件字数限制引发的问题","url":"http://yoursite.com/2021/06/11/Input组件字数限制引发的问题/","content":"<blockquote>\n<p>前言：最近在完善 Input 组件字数计算的时候引发了不少的问题：1、到限制字数时，继续输入中文会替换末尾的文字；2、不同浏览器截断的表现不一样等等问题。</p>\n</blockquote>\n<p>先明确一下需求</p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ul>\n<li>输入到最大长度时，超出截断</li>\n<li>首尾非文字（空格、换行等）不计入字数统计中</li>\n<li>超出截断时保持已输入的文字以及开头非文字部分</li>\n</ul>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><h3 id=\"总体思路\"><a href=\"#总体思路\" class=\"headerlink\" title=\"总体思路\"></a>总体思路</h3><p>1、不能直接使用 input 的 maxLength，因为计算数字的时候会把首尾非文字也计算其中</p>\n<p>2、监听 input 的 onChange 事件，当输入的长度大于最大长度时截断</p>\n<p>根据以上思路，既然不能直接使用 input 的 maxLength，那就在 onChange 事件里进行逻辑处理。</p>\n<h3 id=\"第一次尝试\"><a href=\"#第一次尝试\" class=\"headerlink\" title=\"第一次尝试\"></a>第一次尝试</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v = e.target.value.trim();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (v.length &gt; maxLength &amp;&amp; !(<span class=\"string\">\"value\"</span> <span class=\"keyword\">in</span> props)) &#123;</span><br><span class=\"line\">  setNum(maxLength);</span><br><span class=\"line\">  inputRef.current.value = v.slice(<span class=\"number\">0</span>, maxLength);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setNum(v.length);</span><br></pre></td></tr></table></figure>\n<p><strong>存在的问题</strong></p>\n<ul>\n<li>输入到最大长度时开头空格或换行会被截掉</li>\n<li>输入中文时会从尾部开始替换掉输入框的值</li>\n<li>尾部空格较多时，截取的时候会出问题，计算数字的时候会把空格计算其中</li>\n</ul>\n<h3 id=\"第二次尝试\"><a href=\"#第二次尝试\" class=\"headerlink\" title=\"第二次尝试\"></a>第二次尝试</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; value &#125; = e.target;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v = value.trim();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (value.length - v.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  setLength(maxLength + (value.length - v.length)); <span class=\"comment\">// 动态计算maxLength保证首尾空格或换行还在</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (v.length &gt; maxLength) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newValue = v.slice(<span class=\"number\">0</span>, -(v.length - maxLength)).trim(); <span class=\"comment\">// 防止倒数第一个前面的值为空格</span></span><br><span class=\"line\">  inputRef.current.value = value.slice(<span class=\"number\">0</span>, -(v.length - maxLength));</span><br><span class=\"line\">  setNum(newValue.length);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  setNum(v.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面两个逻辑判断和处理已经解决了第一次尝试的两个问题，那还有一个问题是不是没解决呢？其实在其他浏览器能解决输入中文时替换掉输入框的值，但是 Chrome 浏览器却不行，WTF！Chrome 竟然不行。其实原因是我上面提到的 Chrome 和其他浏览器输入中文时的表现不一样。</p>\n<p>我们用两张图来看一下就明白了</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/input/1.png\" alt=\"Chrome\"></p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/input/2.png\" alt=\"其他浏览器\"></p>\n<p>第一张图是 Chrome 输入中文的表现，第二张图是其他浏览器输入中文的表现。是的，Chrome 输入中文时会实时把拼音显示在输入框内，这样就会导致在截取的时候判断不准确替换掉了尾部的值，那有没有什么解决方案呢？那肯定是有的，接下来就来优化一下这个问题。</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h3 id=\"判断是否中文输入\"><a href=\"#判断是否中文输入\" class=\"headerlink\" title=\"判断是否中文输入\"></a>判断是否中文输入</h3><p>当用户使用拼音输入法输入时，我们会发现 <code>onChange/onInput</code>取得的值是拼音值，但是很明显，我们需要计算的是用户输入的中文值的长度，而不是拼音值的长度。所以这里需要解决使用拼音输入法时会取得拼音值的问题。</p>\n<p>我们先来看两个比较陌生的事件：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event\" target=\"_blank\" rel=\"noopener\">compositionstart</a>：文本合成系统如 input method editor（即输入法编辑器）开始新的输入合成时会触发 <code>compositionstart</code> 事件。例如，当用户使用拼音输入法开始输入汉字或者使用语音输入时，这个事件就会被触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event\" target=\"_blank\" rel=\"noopener\">compositionend</a>：当文本段落的组成完成或取消时，<code>compositionend</code> 事件将被触发 (具有特殊字符的触发，需要一系列键和其他输入，如语音识别或移动中的字词建议)。例如，当用户使用拼音输入法输入汉字或者使用语音输入完毕或者取消时，这个事件就会被触发。</li>\n</ul>\n<p>因此我们可以声明一个标记<code>lock</code>，在<code>compositionstart</code>、<code>compositionend</code>两个事件过程之间的时候<code>lock</code>值为 true，在 input <code>onChange</code>事件中通过<code>lock</code>的值来判断当前输入的状态和截取。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (e.type === <span class=\"string\">'compositionstart'</span>) &#123;</span><br><span class=\"line\">  lock.current = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (e.type === <span class=\"string\">\"compositionend\"</span>) &#123;</span><br><span class=\"line\">  lock.current = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; value &#125; = e.target;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v = value.trim();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (value.length - v.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  setLength(maxLength + (value.length - v.length))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (v.length &gt; maxLength) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newValue = v.slice(<span class=\"number\">0</span>, -(v.length - maxLength)).trim();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!lock.current) &#123;</span><br><span class=\"line\">    inputRef.current.value = value.slice(<span class=\"number\">0</span>, -(v.length - maxLength));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setNum(newValue.length);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  setNum(v.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">&lt;input</span><br><span class=\"line\">  ref=&#123;inputRef&#125;</span><br><span class=\"line\">  className=<span class=\"string\">\"yp-input__inner\"</span></span><br><span class=\"line\">  onChange=&#123;handleChange&#125;</span><br><span class=\"line\">  onCompositionStart=&#123;handleChange&#125;</span><br><span class=\"line\">  onCompositionEnd=&#123;handleChange&#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>那到这里一个 Input 组件字数计算的问题总算解决了，从中也是吸取了不少的经验和总结，继续加油！！！</p>\n","categories":[],"tags":["随笔"]},{"title":"Monorepo的实践落地","url":"http://yoursite.com/2021/04/26/Monorepo的实践落地/","content":"<blockquote>\n<p>前言：最近针对项目代码仓库进行了一次重构，之前代码管理缺少规范和模块化的思想，也是借着项目重构这次机会重新规划代码仓库，实践落地了一种新的项目管理方式——Monorepo，Monorepo的管理概念跟我们规划的项目代码管理非常贴合，再加上我们新增的组件库及工具库，打造了一套比较完整的工作流。</p>\n</blockquote>\n<p>一些概念性的的东西这里就不多说了，不太了解 <code>Monorepo</code> 的可以自行 google 一下，这里就默认已经了解过了。</p>\n<p>要想从零开始定制一套完善的 Monorepo 的工程化工具，还是一件比较有难度的事情。不过社区已经提供了一些比较成熟的方案，我们可以拿来进行定制。</p>\n<p>在重构方案选择上，我们选择了业界比较成熟的 <strong><a href=\"https://lerna.js.org/\" target=\"_blank\" rel=\"noopener\">lerna</a></strong> 和 <strong>yarn workspaces</strong>，用 <code>yarn</code> 来处理依赖问题，用 <code>lerna</code> 来处理发布问题。</p>\n<p><a href=\"https://github.com/hzzlyxx/lerna\" target=\"_blank\" rel=\"noopener\">仓库地址</a></p>\n<h2 id=\"lerna\"><a href=\"#lerna\" class=\"headerlink\" title=\"lerna\"></a>lerna</h2><p><code>lerna</code> 官方的定位：A tool for managing JavaScript projects with multiple packages（一个用来管理带有多个package的JavaScript项目）。</p>\n<p>lerna不负责构建，测试等任务，它提出了一种集中管理package的目录模式，提供了一套自动化管理程序，让开发者不必再深耕到具体的组件里维护内容，在项目根目录就可以全局掌控，基于 npm scripts，使用者可以很好地完成组件构建，代码格式化等操作。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lerna –g</span><br><span class=\"line\">//</span><br><span class=\"line\">yarn add lerna global</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// lerna 项目初始化</span><br><span class=\"line\">lerna init // 固定模式</span><br><span class=\"line\">lerna init -i // 独立模式</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建子项目</span><br><span class=\"line\">lerna create [包名]</span><br><span class=\"line\"></span><br><span class=\"line\">// 清除所有子项目的依赖</span><br><span class=\"line\">lerna clean</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装所有依赖</span><br><span class=\"line\">lerna bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\">// 发布</span><br><span class=\"line\">lerna publish</span><br></pre></td></tr></table></figure>\n<h2 id=\"重构的价值\"><a href=\"#重构的价值\" class=\"headerlink\" title=\"重构的价值\"></a>重构的价值</h2><p>之前的代码管理非常的混杂，还是比较传统的代码目录结构，一些公共基础服务无法扩展复用，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 之前的代码目录</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── tool // 项目打包编译配置</span><br><span class=\"line\">├── release // 打包目标文件夹</span><br><span class=\"line\">└── src // 源代码</span><br><span class=\"line\">    ├── css</span><br><span class=\"line\">    ├── html</span><br><span class=\"line\">    ├── images</span><br><span class=\"line\">    ├── js</span><br><span class=\"line\">    └── sass</span><br></pre></td></tr></table></figure>\n<p>重构后的代码结构无论是模块化还是复用性都很清晰，同时在代码规范上也比之前更规范了，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重构后的代码目录：</span><br><span class=\"line\">├── ... // 其它配置文件（代码规范）</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── lerna.json // lerna 配置文件</span><br><span class=\"line\">└── packages // 分割的小项目</span><br><span class=\"line\">    ├── components</span><br><span class=\"line\">    ├── utils</span><br><span class=\"line\">    ├── ... // 多个业务模块</span><br></pre></td></tr></table></figure>\n<p><strong>总结一下：</strong></p>\n<ul>\n<li>将之前混杂的代码库分割为独立版本控制的小项目（项目更清晰）</li>\n<li>解决了包之间的依赖关系（新增了组件库以及工具库）</li>\n<li>通过git仓库检查到改动并自动同步（公共基础库的发布）</li>\n<li>根据提交的commit生成CHANGELOG版本日志文件（项目代码更规范）</li>\n<li>TypeScript支持</li>\n<li>统一技术栈</li>\n<li>完善的工作流</li>\n</ul>\n<p>当然，<code>lerna</code> 还有更多的功能可以去发掘，还有很多可以结合 <code>lerna</code> 一起使用的工具。构建一套完善的仓库管理机制，可能它的收益不是一些量化的指标可以衡量出来的，也没有直接的价值输出，但它能在日常的工作中极大的提高工作效率，解放生产力，节省大量的人力成本。</p>\n<p>下篇就来聊聊组件库的那些事。</p>\n","categories":[],"tags":["随笔"]},{"title":"【记录】React TS中自定义DOM属性","url":"http://yoursite.com/2021/04/16/【记录】React TS中自定义DOM属性/","content":"<blockquote>\n<p>前言：最近在项目中进行渐进式重构升级，技术栈也是从之前的jQuery时代转换成React和TypeScript。当然重构过程中也冒出了不少的问题，本文将记录一下React TS中自定义DOM属性的一些解决方案。</p>\n</blockquote>\n<p>先看一下需求</p>\n<ul>\n<li><strong>在原生DOM节点新增自定义属性</strong></li>\n</ul>\n<p>比如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">mark</span>=<span class=\"string\">\"mark\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在React中这样写是能正常渲染的，React官方对于<a href=\"https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html\" target=\"_blank\" rel=\"noopener\">自定义DOM属性</a>也是有一篇文章特别说明，大致意思就是React 16之前对于未知的DOM属性。如果JSX具有React无法识别的属性，React只会跳过它，并不会渲染在DOM中，在React 16之后，进行了更改，所有未知属性都将最终出现在DOM中。</p>\n<p>但是在TypeScript中这样写就会报错：</p>\n<blockquote>\n<p>类型“DetailedHTMLProps&lt;HTMLAttributes<htmldivelement>, HTMLDivElement&gt;”上不存在属性“mark”</htmldivelement></p>\n</blockquote>\n<p>Google了一圈，在 <a href=\"https://stackoverflow.com/questions/40093655/how-do-i-add-attributes-to-existing-html-elements-in-typescript-jsx\" target=\"_blank\" rel=\"noopener\">stackoverflow</a> 看到一个差不多的问题，尝试按照useful最多的这样声明：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">'react'</span> &#123;</span><br><span class=\"line\">  interface HTMLProps&lt;T&gt; &#123;</span><br><span class=\"line\">    mark?:string;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而还是报相同的错误，未解决。</p>\n<p>最后在一个Answer中找到了解决方案，测试可行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">'react'</span> &#123;</span><br><span class=\"line\">  interface HTMLAttributes&lt;T&gt; extends AriaAttributes, DOMAttributes&lt;T&gt; &#123;</span><br><span class=\"line\">    mark?: string;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加这句声明后能顺利的解决ts的报错，但这也不是最好的解决方案，这是为什么呢？在添加了这句声明后，发现我们在上面声明的图片格式失效报错了：</p>\n<blockquote>\n<p>找不到模块“xxxxxx.png”或其相应的类型声明</p>\n</blockquote>\n<p>这里就直接列举出我尝试后的解决方案，可能不是最好的，但目前可以解决上面的两个报错问题：</p>\n<p><strong>把自定义DOM属性类型声明和图片类型声明分开到不一样的.d.ts文件里，防止冲突报错</strong></p>\n<p>如果有更好的解决方案，欢迎交流探讨。</p>\n","categories":[],"tags":["随笔","react","TypeScript","记录"]},{"title":"Tree Shaking知多少","url":"http://yoursite.com/2021/04/06/Tree-Shaking知多少/","content":"<blockquote>\n<p>前言：最近在团队中负责公共基础服务的建设，封装了公共类库及组件库，以为能带来比较大的便捷，真是理想很丰满，现实很骨感，开发时通过ES Module引入及使用都很方便，的确达到了开发效率的提升，但后续打包发布测试时却遇到了难题，目标项目中未使用的代码也一并打包进来了，导致最后的bundle过大。那问题就很明显了，需要去除掉未使用的代码。</p>\n</blockquote>\n<p>下面跟分享下，我在Tree Shaking上的摸索历程。</p>\n<h2 id=\"什么是Tree-Shaking\"><a href=\"#什么是Tree-Shaking\" class=\"headerlink\" title=\"什么是Tree Shaking\"></a>什么是Tree Shaking</h2><p>用个简单的栗子描述一下：我们将应用程序想象成一棵树。绿色叶子表示实际用到的 source code(源码) 和 library(库)，是树上活的树叶。灰色叶子表示未引用代码，是树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。</p>\n<p>具体来说，在 webpack 项目中，有一个入口文件，相当于一棵树，入口文件有很多依赖的模块，相当于树叶。实际情况中，虽然依赖了某个模块，但其实只使用其中的某些功能。通过 Tree Shaking，将没有使用的模块摇掉，这样来达到删除无用代码（dead-code）的目的。</p>\n<p>Tree Shaking 较早由 rollup 提出并实现，后来，webpack 从 webpack2 开始也增加了 Tree Shaking 的功能。</p>\n<h2 id=\"Tree-Shaking的原理\"><a href=\"#Tree-Shaking的原理\" class=\"headerlink\" title=\"Tree Shaking的原理\"></a>Tree Shaking的原理</h2><p>Tree Shaking 本质是借助 ES module 的静态分析能力来消除无用的代码（dead-code）。</p>\n<h3 id=\"静态分析能力\"><a href=\"#静态分析能力\" class=\"headerlink\" title=\"静态分析能力\"></a>静态分析能力</h3><p>Tree Shaking 的目的是减少文件的体积，节约带宽，提高加载速度，所以文件必须在浏览器加载之前完成瘦身，也就是在打包的时候完成这个功能。ES6 使用 import 和 export 可以在编译期确定模块间的依赖关系，这是 Tree Shaking 的必需条件，这也意味着被 Babel 编译成 ES5 的代码是不能 Tree Shaking 的。</p>\n<h3 id=\"dead-code\"><a href=\"#dead-code\" class=\"headerlink\" title=\"dead-code\"></a>dead-code</h3><p>我们需要理解什么是无用的代码，满足以下特征，即是无用代码：</p>\n<ul>\n<li>代码不会被执行，不可达到</li>\n<li>代码执行的结果不会被用到</li>\n<li>代码只会影响死变量（只写不读）</li>\n</ul>\n<p>Tree Shaking的原理总结下来就是以下两点：</p>\n<p>1、ES6的模块引入是静态分析的，故而可以在编译时正确判断到底加载了什么代码<br>2、分析程序流，判断哪些变量未被使用、引用，进而删除此代码</p>\n<h2 id=\"TS-编译的类库\"><a href=\"#TS-编译的类库\" class=\"headerlink\" title=\"TS 编译的类库\"></a>TS 编译的类库</h2><p>原理理解后，那对于开头那个问题就比较好解决了。</p>\n<p>查看我的tsconfig.json后果然配置有误，配置的 <code>&quot;target&quot;: &quot;ES5&quot;</code> 没有配置 <code>module</code> 导致 TS 编译成 <code>CommonJS</code> 模块了，也就无法满足 Tree Shaking 的条件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改后的tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"compilerOptions\": &#123;</span><br><span class=\"line\">    \"target\": \"ES5\",</span><br><span class=\"line\">    \"module\": \"ESNext\"</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改完 TS 编译配置后，让目标项目重新打包后就符合预期，去除了无用的代码，bundle的体积也明显的减少了。</p>\n<p>到这里，感觉万事大吉了，然而比较坑的是用 class 写的类库还是没办法消除，还是会被打包进去。</p>\n<p>还是我们上面配置的<code>&quot;target&quot;: &quot;ES5&quot;</code>的问题，因为我们项目还需要兼容IE（万恶的IE），所以需要配置编译为es5，导致我们的 class 被编译成了 <code>IIFE</code> （立即调用函数表达式），又有一个新的问题：<strong>Webpack Tree Shaking不会清除IIFE</strong></p>\n<h2 id=\"Webpack-Tree-Shaking\"><a href=\"#Webpack-Tree-Shaking\" class=\"headerlink\" title=\"Webpack Tree Shaking\"></a>Webpack Tree Shaking</h2><p>当我们用 <code>Webpack</code> 配合 <code>UglifyJS</code> 打包文件时，我们class类的IIFE又被打包进去了。这跟我们想象的完全不一样啊？为什么呢？无用的类不能消除，这还能叫做 Tree Shaking 吗。</p>\n<p>在<a href=\"https://zhuanlan.zhihu.com/p/32831172\" target=\"_blank\" rel=\"noopener\">你的Tree-Shaking并没什么卵用</a>中有过分析，里面有一个例子比较好，见下文</p>\n<p>原因很简单：<code>uglify没有完善的程序流分析。它可以简单的判断变量后续是否被引用、修改，但是不能判断一个变量完整的修改过程，不知道它是否已经指向了外部变量，所以很多有可能会产生副作用的代码，都只能保守的不删除</code>。</p>\n<p>栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> V8Engine = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">V8Engine</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  V8Engine.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'V8'</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> V8Engine</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"><span class=\"keyword\">var</span> V6Engine = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">V6Engine</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  V6Engine.prototype = V8Engine.prototype <span class=\"comment\">// &lt;---- side effect</span></span><br><span class=\"line\">  V6Engine.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'V6'</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> V6Engine</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> V8Engine().toString()) <span class=\"comment\">// V6</span></span><br></pre></td></tr></table></figure>\n<p><code>V6Engine</code>虽然没有被使用，但是它修改了V8Engine原型链上的属性，这就产生副作用了。如果 <code>V6Engine</code> 这个IIFE里面再搞一些全局变量的声明，那就当然不能删除了。那就没有解决方案吗？在<a href=\"https://zhuanlan.zhihu.com/p/32831172\" target=\"_blank\" rel=\"noopener\">你的Tree-Shaking并没什么卵用</a>中最后有提供解决方案。</p>\n<p>如果想利用好 Webpack 的 Tree Shaking，我们需要规范自己的代码：</p>\n<ul>\n<li>使用 ES2015 模块语法（即 <code>import</code> 和 <code>export</code>）</li>\n<li>确保没有编译器将您的 ES2015 模块语法转换为 CommonJS 的（顺带一提，这是现在常用的 @babel/preset-env 的默认行为，详细信息请参阅<a href=\"https://babeljs.io/docs/en/babel-preset-env#modules\" target=\"_blank\" rel=\"noopener\">文档</a>）</li>\n<li>尽量不写带有副作用的代码。诸如编写了立即执行函数，在函数里又使用了外部变量等</li>\n<li>如果JavaScript库开发中，难以避免的产生各种副作用代码，可以将功能函数或者组件，打包成单独的文件或目录，以便于用户可以通过目录去加载。如有条件，也可为自己的库开发单独的webpack-loader，便于用户按需加载</li>\n<li>配置TypeScript编译器以<code>&quot;esnext&quot;</code>用作 <code>module</code>，使代码能以 <code>ES module</code> 导出</li>\n</ul>\n<p>目前也是越来越多的 Npm 第三方模块考虑到了 Tree Shaking，并对其提供了支持。 相信 Tree Shaking 也会越来越成熟。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://webpack.js.org/guides/tree-shaking/\" target=\"_blank\" rel=\"noopener\">Webpack 官方文档</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/32831172\" target=\"_blank\" rel=\"noopener\">你的Tree-Shaking并没什么卵用</a></li>\n<li><a href=\"https://juejin.cn/post/6844903544756109319\" target=\"_blank\" rel=\"noopener\">Tree-Shaking性能优化实践 - 原理篇</a></li>\n</ul>\n","categories":[],"tags":["随笔"]},{"title":"既爱又恨的定时器","url":"http://yoursite.com/2021/01/10/既爱又恨的定时器/","content":"<blockquote>\n<p>前言：前两天开发了一个抽奖功能的需求，也是被定时器折磨了一番。</p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>React Hooks里的定时器</li>\n<li>倒计时不准</li>\n<li>应用退到手机后台后的定时器</li>\n</ul>\n<p>接下来咱们一一解决它。</p>\n<h2 id=\"React-Hooks里的定时器\"><a href=\"#React-Hooks里的定时器\" class=\"headerlink\" title=\"React Hooks里的定时器\"></a>React Hooks里的定时器</h2><p>对于每个使用 React Hooks 的开发者来说，setInterval 是一个绕不过去的”坑“。由于React Hooks 特有的设计理念，如果用固有的思维模式去写 setInterval，很容易触发意想不到的 bug。</p>\n<p>比如下面的错误写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> timer = useRef();</span><br><span class=\"line\">  </span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer.current) &#123;</span><br><span class=\"line\">      timer.current = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timer.current) &#123;</span><br><span class=\"line\">        clearInterval(timer.current);</span><br><span class=\"line\">        timer.current = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样写确实很简洁，也符合我们固有的思维模式，但是它的实现效果却与我们的目标背道而驰。</p>\n<p>预期的效果是页面上的数字会每秒增加 1 ，但实际是数字增加到 1 后便静止不动了。由于 useEffect 的依赖为空数组，所以 setInterval 只会在组件完成初次渲染后被调用一次，从而使得回调函数在之后每次被定时调用时，取到的 count 都是初次渲染时的值 0（闭包的原因），页面上的数值也会永远停留在 1。</p>\n<p>解决方案：</p>\n<p>我们使用useRef来解决来解决这种闭包引起的问题。（useRef 在 React Hooks 中的作用，正如官网说的，它像一个变量，类似于 this ，它就像一个盒子，你可以存放任何东西， <strong>useRef 每次都会返回相同的引用</strong>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> timer = useRef();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> time = useRef(<span class=\"number\">0</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer.current) &#123;</span><br><span class=\"line\">      timer.current = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        time.current += <span class=\"number\">1</span>;</span><br><span class=\"line\">        setCount(time.current);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timer.current) &#123;</span><br><span class=\"line\">        clearInterval(timer.current);</span><br><span class=\"line\">        timer.current = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        time.current = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"倒计时不准（定时器不准）\"><a href=\"#倒计时不准（定时器不准）\" class=\"headerlink\" title=\"倒计时不准（定时器不准）\"></a>倒计时不准（定时器不准）</h2><p>我们知道定时器的执行时间并不是确定的。这是由于 JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点）。那么为什么说定时器的执行时间不是确定的呢？那就得来细数一下轮询（Event loop）了。</p>\n<p><strong>Event Loop</strong> 的是计算机系统的一种运行机制。JS 语言就采用这种机制，来解决单线程运行带来的一些问题。</p>\n<p>在 JavaScript 中，任务被分为两种，一种宏任务（MacroTask），一种叫微任务（MicroTask）。</p>\n<p><strong>常见的宏任务有</strong>：script全部代码、setTimeout、setInterval、setImmediate（浏览器暂时不支持，只有IE10支持，具体可见MDN）、I/O、UI Rendering。</p>\n<p><strong>常见的微任务有</strong>：Process.nextTick（Node独有）、Promise、Object.observe(已废弃)、MutationObserver</p>\n<p>一次 <strong>Event loop</strong> 顺序是这样的：</p>\n<ol>\n<li>执行同步代码，这属于宏任务</li>\n<li>执行栈为空，查询是否有微任务需要执行</li>\n<li>执行所有微任务</li>\n<li>必要的话渲染 UI</li>\n<li>然后开始下一轮 Event loop，执行宏任务中的异步代码</li>\n</ol>\n<p>通过上述的 <strong>Event loop</strong> 顺序可知，我们实际写的定时器（倒计时）1秒是不确定的。当我们倒计时还在定时器里减1就不准确了。</p>\n<p>解决方案：</p>\n<p>既然定时器不准，那我们就不能做减1的操作，可以利用时间戳的差值来计算。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">3600</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> timer = useRef();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> time = useRef(<span class=\"number\">0</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    time.current = count;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer.current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\">      timer.current = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> s = (end - start) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">        time.current -= s;</span><br><span class=\"line\">        setCount(time.current);</span><br><span class=\"line\">        start = end;</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timer.current) &#123;</span><br><span class=\"line\">        clearInterval(timer.current);</span><br><span class=\"line\">        timer.current = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        time.current = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用退到手机后台后的定时器\"><a href=\"#应用退到手机后台后的定时器\" class=\"headerlink\" title=\"应用退到手机后台后的定时器\"></a>应用退到手机后台后的定时器</h2><p>在手机端，如果应用被切换到后台（不是关闭应用，是切到后台），那么这时候定时器就会有问题。PC上的Firefox，Chrome和Safari等浏览器，都会自动把未激活页面中的JavaScript定时器（setTimeout，setInterval）间隔最小值改为1秒以上。这是因为间隔很小的定时器一般用来做UI更新（例如用定时器实现的动画），让用户不可见的页面上的定时器跑慢一些，既节省资源又不会影响体验。对移动浏览器来说，内存，CPU，带宽等资源更加宝贵，设备移动的上浏览器往往会<strong>直接冻结</strong>所有未激活页面上的所有定时器。</p>\n<p>解决方案：</p>\n<p>通过监听 <strong>visibilitychange</strong> 方法，如果退到后台记录下当前时间，等切回来，再算一下当前时间，然后计算时间差，最后用当时定格的那个时间去减去这个时间差，再赋值给这个定时器，就ok了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> startS = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> hiddenProperty =</span><br><span class=\"line\">  <span class=\"string\">'hidden'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span> ?</span><br><span class=\"line\">  <span class=\"string\">'hidden'</span> :</span><br><span class=\"line\">  <span class=\"string\">'webkitHidden'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span> ?</span><br><span class=\"line\">  <span class=\"string\">'webkitHidden'</span> :</span><br><span class=\"line\">  <span class=\"string\">'mozHidden'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span> ?</span><br><span class=\"line\">  <span class=\"string\">'mozHidden'</span> :</span><br><span class=\"line\">  <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hiddenProperty == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> visibilityChangeEvent = hiddenProperty.replace(<span class=\"regexp\">/hidden/i</span>, <span class=\"string\">'visibilitychange'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> onVisibilityChange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">document</span>[hiddenProperty]) &#123;</span><br><span class=\"line\">    end = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(); <span class=\"comment\">// 页面切回来的时间戳</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = <span class=\"built_in\">Math</span>.ceil((end - start) / <span class=\"number\">1000</span>); <span class=\"comment\">// 时间差</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timeC = startS - s; <span class=\"comment\">// 当时定格的那个时间去减去这个时间差 = 最新的倒计时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeC &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      setTime(timeC);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      setTime(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    startS = time; <span class=\"comment\">// 当前倒计时时间戳</span></span><br><span class=\"line\">    start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(); <span class=\"comment\">// 页面退到后台的时间戳</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(visibilityChangeEvent, onVisibilityChange);</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里，基本就针对碰到的定时器的三个问题讲了一遍，不对之处，还请多多指正！</p>\n","categories":[],"tags":["随笔","js"]},{"title":"记一次dva升级后的bug","url":"http://yoursite.com/2020/03/13/记一次dva升级后的bug/","content":"<blockquote>\n<p>前言：去年的时候针对公司老项目（dva环境）进行了一次优化升级，升级后没出现啥问题，因为疫情的关系，导致一直在家办公，最近针对老项目又加了个需求，用自己的电脑从Gogs上down下来<code>npm install</code>之后运行就报错了。</p>\n</blockquote>\n<p>安装完依赖npm start的时候，就开始报如下的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed to compile</span><br><span class=\"line\">./node_modules/<span class=\"built_in\">history</span>/esm/history.js</span><br><span class=\"line\">Module not found: Can<span class=\"string\">'t resolve '</span>@babel/runtime/helpers/esm/extends<span class=\"string\">' in '</span>xxxx\\prong-console-tenant\\node_modules\\<span class=\"built_in\">history</span>\\esm<span class=\"string\">'</span></span><br></pre></td></tr></table></figure>\n<p>一般删了node_modules重新安装依赖能解决80%的问题，但这次重新安装却不起作用了。于是就开始了折腾之旅了，去Google搜了一圈，找了几个解决方案尝试之后发现都不太行。</p>\n<p>最后在Github issues里找到了解决思路：<code>history</code> 版本问题。</p>\n<p>按以下步骤检查：</p>\n<p>1、<code>npm list history</code> 查看history安装情况；</p>\n<p>2、如果版本不是4.7.2，卸载history， <code>npm un history</code>；</p>\n<p>3、<code>npm list history</code> 确保history已全部删除；</p>\n<p>4、<code>npm install --save history@4.7.2</code> 安装指定版本；</p>\n<p>按照如上步骤就把这个错误解决了，运行成功。完美！</p>\n","categories":[],"tags":["随笔","异常"]},{"title":"js处理long型丢失精度问题","url":"http://yoursite.com/2020/01/21/JavaScript处理Long型丢失精度/","content":"<p>最近项目后端为 Prong 开发了一个基于 snowflake 算法的 Java 分布式 ID 组件，将实体主键从原来的 String 类型的 UUID 修改成了 Long 型的分布式 ID。修改后发现前端显示的 ID 和数据库中的 ID 不一致。例如数据库中存储的是：812782555915911412，显示出来却成了 812782555915911400，后面 2 位变成了 0，精度丢失了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">812782555915911412</span>);</span><br><span class=\"line\"><span class=\"number\">812782555915911400</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>这是因为 JavaScript 中数字的精度是有限的，Java 的 Long 类型的数字超出了 JavaScript 的处理范围。JavaScript 内部只有一种数字类型 Number，所有数字都是采用 IEEE 754 标准定义的双精度 64 位格式存储，即使整数也是如此。这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64 位浮点数）。其结构如图：</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/long/long.png\" alt=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/long/long.png\"></p>\n<p>各位的含义如下：</p>\n<ul>\n<li>1 位（s） 用来表示符号位，0 表示正数，1 表示负数</li>\n<li>11 位（e） 用来表示指数部分</li>\n<li>52 位（f） 表示小数部分（即有效数字）</li>\n</ul>\n<p>双精度浮点数(<code>double</code>)并不是能够精确表示范围内的所有数， 虽然双精度浮点型的范围看上去很大: 。 可以表示的最大整数可以很大，但能够精确表示，使用算数运算的并没有这么大。因为小数部分最大是 <code>52</code> 位，因此 JavaScript 中能精准表示的最大整数是 ，十进制即 <code>9007199254740991</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>L&lt;&lt;<span class=\"number\">53</span>);</span><br><span class=\"line\"><span class=\"number\">9007199254740991</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript 有所谓的最大和最小安全值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_SAFE_INTEGER);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MIN_SAFE_INTEGER);</span><br><span class=\"line\"><span class=\"number\">9007199254740991</span> - <span class=\"number\">9007199254740991</span>;</span><br></pre></td></tr></table></figure>\n<p><code>安全</code> 意思是说能够 <code>one-by-one</code> 表示的整数，也就是说在范围内，双精度数表示和整数是一对一的，在这个范围以内，所有的整数都有唯一的浮点数表示，这叫做安全整数。</p>\n<p>而超过这个范围，会有两个或更多整数的双精度表示是相同的；即超过这个范围，有的整数是无法精确表示的，只能大约(round)到与它相近的浮点数（说到底就是科学计数法）表示，这种情况下叫做<code>不安全整数</code>，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_SAFE_INTEGER + <span class=\"number\">1</span>); <span class=\"comment\">// 结果：9007199254740992，精度未丢失</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_SAFE_INTEGER + <span class=\"number\">2</span>); <span class=\"comment\">// 结果：9007199254740992，精度丢失</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_SAFE_INTEGER + <span class=\"number\">3</span>); <span class=\"comment\">// 结果：9007199254740994，精度未丢失</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_SAFE_INTEGER + <span class=\"number\">4</span>); <span class=\"comment\">// 结果：9007199254740996，精度丢失</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.MAX_SAFE_INTEGER + <span class=\"number\">5</span>); <span class=\"comment\">// 结果：9007199254740996，精度未丢失</span></span><br></pre></td></tr></table></figure>\n<p>而 <code>Java</code> 的 <code>Long</code> 类型的有效位数是 63 位（扣除一位符号位），其最大值为，十进制为 9223372036854775807。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(Long.MAX_VALUE);</span><br><span class=\"line\">    System.out.println((<span class=\"number\">1L</span>&lt;&lt;<span class=\"number\">63</span>) -<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9223372036854775807</span></span><br><span class=\"line\"><span class=\"number\">9223372036854775807</span></span><br></pre></td></tr></table></figure>\n<p>所以只要 java 传给 JavaScript 的 <code>Long</code> 类型的值超过 9007199254740991，就有可能产生精度丢失，从而导致数据和逻辑出错。</p>\n<blockquote>\n<p>和其他编程语言（如 C 和 Java）不同，JavaScript 不区分整数值和浮点数值，所有数字在 JavaScript 中均用浮点数值表示，所以在进行数字运算的时候要特别注意精度缺失问题。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把 64 位浮点数，转成 32 位整数，然后再进行运算，由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>\n<p>进一步阅读：<a href=\"https://wangdoc.com/javascript/types/number.html\" target=\"_blank\" rel=\"noopener\">JavaScript 教程 - 数据类型 - 数值</a></p>\n</blockquote>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>解决办法就是让 Javascript 把数字当成字符串进行处理。对 Javascript 来说如果不进行运算，数字和字符串处理起来没有什么区别。当然如果需要进行运算，只能采用其他方法，例如 JavaScript 的一些开源库 bignum、bigint 等支持长整型的处理。Java 进行 JSON 处理的时候是能够正确处理 long 型的，只需要将数字转化成字符串就可以了。</p>\n","categories":[],"tags":["随笔","JavaScript"]},{"title":"h5手机键盘弹出收起的处理","url":"http://yoursite.com/2020/01/19/h5手机键盘弹出收起的处理/","content":"<blockquote>\n<p>前言：前端时间也是应项目的需求开始了h5移动端的折腾之旅，在目前中台的基础上扩展了两个ToC移动端项目，下面就是在h5移动端表单页面键盘弹出收起兼容性的一些总结。</p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>在 h5 项目中，我们会经常遇到一些表单页面，在输入框获取焦点时，会自动触发键盘弹起，而键盘弹出在 IOS 与 Android 的 webview 中表现并非一致，同时当我们主动触发键盘收起时也同样存在差异化。</p>\n<h3 id=\"键盘弹出\"><a href=\"#键盘弹出\" class=\"headerlink\" title=\"键盘弹出\"></a>键盘弹出</h3><ul>\n<li>IOS：IOS系统 的键盘处在窗口的最上层，当键盘弹起时，webview 的高度 height 并没有改变，只是 scrollTop 发生变化，页面可以滚动。且页面可以滚动的最大限度为弹出的键盘的高度，而只有键盘弹出时页面恰好也滚动到最底部时，scrollTop 的变化值为键盘的高度，其他情况下则无法获取。这就导致在 IOS 情况下难以获取键盘的真实高度。</li>\n<li>Android: 在Android系统中，键盘也是处在窗口的最上层，键盘弹起时，如果输入框在靠近底部的话，就会被键盘挡住，只有你输入的时候输入框才会滚动到可视化区域。</li>\n</ul>\n<h3 id=\"键盘收起\"><a href=\"#键盘收起\" class=\"headerlink\" title=\"键盘收起\"></a>键盘收起</h3><ul>\n<li>IOS：触发键盘上的按钮收起键盘或者输入框以外的页面区域时，输入框会失去焦点，因此会触发输入框的 blur 事件；当键盘收起时，页面底部会出现一个空白区域，页面会被顶起。</li>\n<li>Android: 触发键盘上的按钮收起键盘时，输入框并不会失去焦点，因此不会触发页面的 blur 事件；触发输入框以外的区域时，输入框会失去焦点，触发输入框的 blur 事件。</li>\n</ul>\n<h2 id=\"期望的结果\"><a href=\"#期望的结果\" class=\"headerlink\" title=\"期望的结果\"></a>期望的结果</h2><p>针对不同系统触发键盘弹出收起时的差异化，我们希望功能流畅的同时，尽量保持用户体验的一致性。</p>\n<h2 id=\"对症下药\"><a href=\"#对症下药\" class=\"headerlink\" title=\"对症下药\"></a>对症下药</h2><p>上面我们理清了目前市面上两大主要系统的差异性，接下来就需对症下药了。</p>\n<p>在 h5 中目前没有接口可以直接监听键盘事件，但我们可以通过分析键盘弹出、收起的触发过程及表现形式，来判断键盘是弹出还是收起的状态。</p>\n<ul>\n<li>键盘弹出：输入框获取焦点时会自动触发键盘的弹起动作，因此，我们可以监听 focusin 事件，在里面实现键盘弹出后所需的页面逻辑。</li>\n<li><p>键盘收起：当触发其他页面区域收起键盘时，我们可以监听 focusout 事件，在里面实现键盘收起后所需的页面逻辑。而在通过键盘按钮收起键盘时在 ios 与 android 端存在差异化表现，下面具体分析：</p>\n<ul>\n<li>IOS：触发了 focusout 事件，仍然通过该办法监听。</li>\n<li>Android：没有触发 focusout 事件。在 android 中，键盘的状态切换（弹出、收起）不仅和输入框关联，同时还会影响到 webview 高度的变化，那我们就可以通过监听 webview height 的变化来判断键盘是否收起。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"系统判断\"><a href=\"#系统判断\" class=\"headerlink\" title=\"系统判断\"></a>系统判断</h3><p>在实践中我们可以通过 userAgent 来判断目前的系统：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent.toLocaleLowerCase();</span><br><span class=\"line\"><span class=\"keyword\">const</span> isIOS = <span class=\"regexp\">/iphone|ipad|ipod/</span>.test(ua);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isAndroid = <span class=\"regexp\">/android/</span>.test(ua);</span><br></pre></td></tr></table></figure>\n<h3 id=\"IOS-处理\"><a href=\"#IOS-处理\" class=\"headerlink\" title=\"IOS 处理\"></a>IOS 处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isReset = <span class=\"literal\">true</span>; <span class=\"comment\">//是否归位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.focusinHandler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  isReset = <span class=\"literal\">false</span>; <span class=\"comment\">//聚焦时键盘弹出，焦点在输入框之间切换时，会先触发上一个输入框的失焦事件，再触发下一个输入框的聚焦事件</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.focusoutHandler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  isReset = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//当焦点在弹出层的输入框之间切换时先不归位</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isReset) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.scroll(<span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//确定延时后没有聚焦下一元素，是由收起键盘引起的失焦，则强制让页面归位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'focusin'</span>, <span class=\"keyword\">this</span>.focusinHandler);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'focusout'</span>, <span class=\"keyword\">this</span>.focusoutHandler);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Android-处理\"><a href=\"#Android-处理\" class=\"headerlink\" title=\"Android 处理\"></a>Android 处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originHeight = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.resizeHandler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resizeHeight = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> activeElement = <span class=\"built_in\">document</span>.activeElement;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resizeHeight &lt; originHeight) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 键盘弹起后逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (activeElement &amp;&amp; (activeElement.tagName === <span class=\"string\">\"INPUT\"</span> || activeElement.tagName === <span class=\"string\">\"TEXTAREA\"</span>)) &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        activeElement.scrollIntoView(&#123; <span class=\"attr\">block</span>: <span class=\"string\">'center'</span> &#125;);<span class=\"comment\">//焦点元素滚到可视区域的问题</span></span><br><span class=\"line\">      &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 键盘收起后逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeHandler);</span><br></pre></td></tr></table></figure>\n<h2 id=\"react-封装\"><a href=\"#react-封装\" class=\"headerlink\" title=\"react 封装\"></a>react 封装</h2><p>在 react 中我们可以写一个类装饰器来修饰表单组件。</p>\n<blockquote>\n<p>类装饰器：类装饰器在类声明之前被声明（紧靠着类声明）。 类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// keyboard.tsx</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: 键盘处理装饰器</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: hzzly</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: hzzly</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2020-01-09 09:36:40</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2020-01-10 12:08:47</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> keyboard = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (WrappedComponent: any) =&gt;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    focusinHandler: <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> <span class=\"keyword\">void</span>) | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    focusoutHandler: <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> <span class=\"keyword\">void</span>) | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    resizeHandler: <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> <span class=\"keyword\">void</span>) | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent.toLocaleLowerCase();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isIOS = <span class=\"regexp\">/iphone|ipad|ipod/</span>.test(ua);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isAndroid = <span class=\"regexp\">/android/</span>.test(ua);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isIOS) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 上面 IOS 处理</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isAndroid) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 上面 Android 处理</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.focusinHandler &amp;&amp; <span class=\"keyword\">this</span>.focusoutHandler) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeEventListener(<span class=\"string\">'focusin'</span>, <span class=\"keyword\">this</span>.focusinHandler);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeEventListener(<span class=\"string\">'focusout'</span>, <span class=\"keyword\">this</span>.focusoutHandler);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.resizeHandler) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeHandler);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123;<span class=\"attr\">...this.props</span>&#125; /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">export default keyboard;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// PersonForm.tsx</span></span><br><span class=\"line\">@keyboard()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span>&lt;</span>&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> PersonForm;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["随笔","TypeScript","js","h5"]},{"title":"记npm login的一次异常解决","url":"http://yoursite.com/2019/12/23/记npm login的一次异常解决/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在工作中，我们常常会将一些通用性代码，比如一些工具类、公用业务逻辑代码以及团队定制化的UI库等，发布到私有npm仓库。需要的项目直接安装使用即可。</p>\n<p>在一次组件开发完将要上传的私服的时候，通过 <code>npm login</code> 登录私服一直报错，出现了如下两种报错：</p>\n<h2 id=\"登录报错npm-ERR-code-E401\"><a href=\"#登录报错npm-ERR-code-E401\" class=\"headerlink\" title=\"登录报错npm ERR! code E401\"></a>登录报错npm ERR! code E401</h2><p>npm登录时报错：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm login</span><br><span class=\"line\">Username: 你的nexus用户名</span><br><span class=\"line\">Password: 你的nexus用户密码</span><br><span class=\"line\">Email: (this IS public) 你的邮箱</span><br><span class=\"line\">npm ERR! code E401</span><br><span class=\"line\">npm ERR! Unable to authenticate, need: BASIC realm=<span class=\"string\">\"Sonatype Nexus Repository Manager\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! A complete <span class=\"built_in\">log</span> of this run can be found <span class=\"keyword\">in</span>:</span><br><span class=\"line\">npm ERR!     C:\\Users\\Administrator\\AppData\\Roaming\\npm-cache\\_logs\\XXX-debug.log</span><br></pre></td></tr></table></figure>\n<p>这时在我的mac上可以正常登录，说明是客户端的问题。</p>\n<p>原因可能是本机使用过其他账号登录过，但是没有退出登录。果然在npm的配置文件 <code>.npmrc</code> 文件中找到了问题。</p>\n<p>解决方案，检查 <code>~/.npmrc</code> 文件，删除 <code>xlab-npm-group</code> 和 <code>xlab-npm-private</code> 相关的token记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=http://**********:20001/repository/xlab-npm-group/</span><br><span class=\"line\">//**********:20001/repository/xlab-npm-group/:_authToken=XXXX     // 删除这行</span><br><span class=\"line\">//**********:20001/repository/xlab-npm-group/:_authToken=XXXX        // 删除这行</span><br><span class=\"line\">always-auth=true</span><br><span class=\"line\">home=https://www.npmjs.org</span><br><span class=\"line\">//**********:20001/repository/xlab-npm-private/:_authToken=XXXX  // 删除这行</span><br></pre></td></tr></table></figure>\n<p>修改后如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=http://**********:20001/repository/xlab-npm-group/</span><br><span class=\"line\">always-auth=true</span><br><span class=\"line\">home=https://www.npmjs.org</span><br></pre></td></tr></table></figure>\n<p>保存后重新登录成功。</p>\n<h2 id=\"登录报错npm-ERR-code-E500\"><a href=\"#登录报错npm-ERR-code-E500\" class=\"headerlink\" title=\"登录报错npm ERR! code E500\"></a>登录报错npm ERR! code E500</h2><p>npm登录时报错：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm login --registry=http://**********:20001/repository/xlab-npm-private/</span><br><span class=\"line\">Username: 你的nexus用户名</span><br><span class=\"line\">Password: 你的nexus用户密码</span><br><span class=\"line\">Email: (this IS public) 你的邮箱</span><br><span class=\"line\">npm ERR! code E500</span><br><span class=\"line\">npm ERR! 500 Server Error -PUT =http://**********:20001/repository/xlab-npm-private/-/user/org.couchdb.user:XXX</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! A complete <span class=\"built_in\">log</span> of this run can be found <span class=\"keyword\">in</span>:</span><br><span class=\"line\">npm ERR!  /Users/XXX/.npm/_logs/XXX-debug.log</span><br></pre></td></tr></table></figure>\n<p>这时在另外的机器登录也是同样错误，说明是可能是服务器问题。</p>\n<p>解决方案，通知管理员检查服务器是否正常。管理员检查后发现服务器OOM了：</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/npm/npm-error.png\" alt=\"npm-error\"></p>\n<p>重启服务器容器后，重新登录成功。</p>\n","categories":[],"tags":["随笔","异常"]},{"title":"flutter初探","url":"http://yoursite.com/2019/12/19/flutter初探/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>忙完公司的工作之后，终于能腾出点时间来学习了，除了将基础和源码的学习补回来，还利用闲余的时间玩了一下flutter。刚开始我觉得Flutter的布局嵌套语法很恶心，内心是及其排斥的，但是在学了之后，我只想说：“真香！”</p>\n<h2 id=\"移动开发的现状\"><a href=\"#移动开发的现状\" class=\"headerlink\" title=\"移动开发的现状\"></a>移动开发的现状</h2><p>随着移动互联网的高速发展，移动App的开发模式也在快速更迭中发展。<br>最初，为了能够在不同系统环境上运行，通常要求开发团队进行多平台并行开发。通常，开发Android和iOS App一共需要两个开发团队，维护两套源代码，分别进行测试。</p>\n<p>后来，开发者们逐渐意识到，这样的开发效率并不高，成本却不低。因此诞生了一个接一个的跨平台解决方案。比如react-native、weex、cordova、ionic等等。但无一例外地，它们都无法摆脱低性能的JavaScript或者原生代码依赖，或多或少地存在不足。<br>所以急需一个真正能够打通多平台且高性能的框架来“救场”，Flutter则应运而生。</p>\n<h2 id=\"认识-Flutter\"><a href=\"#认识-Flutter\" class=\"headerlink\" title=\"认识 Flutter\"></a>认识 Flutter</h2><p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。作为一种全新的响应式，跨平台，高性能的移动开发框架。从开源以来，已经得到越来越多开发者的喜爱。其中闲鱼、腾讯、美团、字节跳动等大厂都有自己成熟的团队并有深度实践。赶快学起来！</p>\n<h3 id=\"Flutter-特性\"><a href=\"#Flutter-特性\" class=\"headerlink\" title=\"Flutter 特性\"></a>Flutter 特性</h3><p>那么，Flutter 究竟有哪些特性吸引着这么多开发者的喜爱呢呢？</p>\n<ol>\n<li>热重载（Hot Reload）：有热重载真的太舒服了，可以帮助开发者更高效地进行开发和测试，更利于修复Bug，就这一点比原生安卓制作简直不知道高到哪里去了。</li>\n<li>统一的应用开发体验：Flutter拥有丰富的库，帮助开发者快速实现项目需求。同时，大部分的工具和库同时支持Android和iOS；</li>\n<li>界面生动：Flutter支持跨平台开发，同样支持Material Design（原生Android设计语言）和Cupertino（原生iOS设计语言）风格的控件。开发者可根据设计需要实现不同风格的UI界面；</li>\n<li>原生性能：无论在Android还是iOS环境中，Flutter可以提供与原生应用一样的性能，甚至支持120 HZ的高刷新率；</li>\n<li>响应式框架：Flutter支持响应式框架，在某些场景下，开发者无需付出任何代价，即可完成不同屏幕的适配，使UI的构建更加轻松；</li>\n<li>混合开发：Flutter可以与平台原生代码相结合，支持较新的Kotlin和Swift开发语言。借助该特性，可以轻松访问Android或iOS上的原生系统功能和系统API。</li>\n</ol>\n<h3 id=\"Flutter-核心思想\"><a href=\"#Flutter-核心思想\" class=\"headerlink\" title=\"Flutter 核心思想\"></a>Flutter 核心思想</h3><p><strong>一切都是控件（Widget）(Everything’s a Widget)</strong></p>\n<p>在Flutter的世界里，包括views,view controllers,layouts等在内的概念都建立在Widget之上。widget是flutter功能的抽象描述。</p>\n<p>也就是说，在Flutter中，一个应用就是有许许多多的Widget组合而成的。</p>\n<h3 id=\"Flutter-分层架构\"><a href=\"#Flutter-分层架构\" class=\"headerlink\" title=\"Flutter 分层架构\"></a>Flutter 分层架构</h3><p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_1.png\" alt=\"flutter_1\"></p>\n<p>从flutter的架构图中不难看出widget是整个视图描述的基础。</p>\n<h4 id=\"Flutter-Framework\"><a href=\"#Flutter-Framework\" class=\"headerlink\" title=\"Flutter Framework\"></a>Flutter Framework</h4><p>这是一个纯 Dart实现的 SDK，它实现了一套基础库，自底向上，我们来简单介绍一下：</p>\n<ul>\n<li><p>底下两层（Foundation和Animation、Painting、Gestures）在Google的一些视频中被合并为一个dart UI层，对应的是Flutter中的dart:ui包，它是Flutter引擎暴露的底层UI库，提供动画、手势及绘制能力。</p>\n</li>\n<li><p>Rendering层，这一层是一个抽象的布局层，它依赖于dart UI层，Rendering层会构建一个UI树，当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终将UI树绘制到屏幕上，这个过程类似于React中的虚拟DOM。Rendering层可以说是Flutter UI框架最核心的部分，它除了确定每个UI元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。</p>\n</li>\n<li><p>Widgets层是Flutter提供的的一套基础组件库，在基础组件库之上，Flutter还提供了 Material 和Cupertino两种视觉风格的组件库。而我们Flutter开发的大多数场景，只是和这两层打交道。</p>\n</li>\n</ul>\n<h4 id=\"Flutter-Engine\"><a href=\"#Flutter-Engine\" class=\"headerlink\" title=\"Flutter Engine\"></a>Flutter Engine</h4><p>这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。</p>\n<p>聊完架构接下来我们聊一聊flutter的生命周期。</p>\n<h3 id=\"Flutter-生命周期\"><a href=\"#Flutter-生命周期\" class=\"headerlink\" title=\"Flutter 生命周期\"></a>Flutter 生命周期</h3><p>Flutter的生命周期主要包括两大部分：state和App。</p>\n<h4 id=\"state-生命周期\"><a href=\"#state-生命周期\" class=\"headerlink\" title=\"state 生命周期\"></a>state 生命周期</h4><p>widget是immutable的，发生变化的时候需要重建，所以谈不上状态。StatefulWidget 中的状态保持其实是通过State类来实现的。State拥有一套自己的生命周期：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:left\">状态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>initState</td>\n<td style=\"text-align:left\">插入渲染树时调用，只调用一次</td>\n</tr>\n<tr>\n<td>didChangeDependencies</td>\n<td style=\"text-align:left\">state依赖的对象发生变化时调用</td>\n</tr>\n<tr>\n<td>didUpdateWidget</td>\n<td style=\"text-align:left\">组件状态改变时候调用，可能会调用多次</td>\n</tr>\n<tr>\n<td>build</td>\n<td style=\"text-align:left\">构建Widget时调用</td>\n</tr>\n<tr>\n<td>deactivate</td>\n<td style=\"text-align:left\">当移除渲染树的时候调用</td>\n</tr>\n<tr>\n<td>dispose</td>\n<td style=\"text-align:left\">组件即将销毁时调用</td>\n</tr>\n</tbody>\n</table>\n<p>生命周期状态图如下：</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_2.png\" alt=\"flutter_2\"></p>\n<p>注意：</p>\n<blockquote>\n<ul>\n<li><p>didChangeDependencies有两种情况会被调用。</p>\n<ul>\n<li>创建时候在initState 之后被调用</li>\n<li>在依赖的InheritedWidget发生变化的时候会被调用</li>\n</ul>\n</li>\n<li><p>正常的退出流程中会执行deactivate然后执行dispose。但是也会出现deactivate以后不执行dispose，直接加入树中的另一个节点的情况。</p>\n</li>\n<li><p>这里的状态改变包括两种可能：1.通过setState内容改变 2.父节点的state状态改变，导致孩子节点的同步变化。</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"App生命周期\"><a href=\"#App生命周期\" class=\"headerlink\" title=\"App生命周期\"></a>App生命周期</h4><p>如果想要知道App的生命周期,那么需要通过WidgetsBindingObserver的didChangeAppLifecycleState 来获取。通过该接口可以获取是生命周期在AppLifecycleState类中。常用状态包含如下几个：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:left\">状态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>resumed</td>\n<td style=\"text-align:left\">可见并能相应用户的输入</td>\n</tr>\n<tr>\n<td>inactive</td>\n<td style=\"text-align:left\">处在并不活动状态，无法处理用户相应</td>\n</tr>\n<tr>\n<td>paused</td>\n<td style=\"text-align:left\">不可见并不能相应用户的输入，但是在后台继续活动中</td>\n</tr>\n</tbody>\n</table>\n<p>一个实际场景中的例子：<br>在不考虑suspending的情况下：从后台切入前台生命周期变化如下:</p>\n<blockquote>\n<p>AppLifecycleState.inactive -&gt; AppLifecycleState.resumed;</p>\n</blockquote>\n<p>从前台压后台生命周期变化如下：</p>\n<blockquote>\n<p>AppLifecycleState.inactive -&gt; AppLifecycleState.paused;</p>\n</blockquote>\n<h2 id=\"Flutter-环境搭建\"><a href=\"#Flutter-环境搭建\" class=\"headerlink\" title=\"Flutter 环境搭建\"></a>Flutter 环境搭建</h2><p>工欲善其事必先利其器，环境搭建可以参考 <a href=\"https://book.flutterchina.club/chapter1/install_flutter.html\" target=\"_blank\" rel=\"noopener\">Flutter实战</a> 一步一步来搭建。</p>\n<h2 id=\"Flutter-实践\"><a href=\"#Flutter-实践\" class=\"headerlink\" title=\"Flutter 实践\"></a>Flutter 实践</h2><p>经过一个多礼拜的折腾，自己也尝试写了几个小demo：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_3.png\" alt=\"示范图片1\"></th>\n<th style=\"text-align:center\"><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_4.png\" alt=\"示范图片1\"></th>\n<th style=\"text-align:center\"><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_5.png\" alt=\"示范图片3\"></th>\n<th style=\"text-align:center\"><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_6.png\" alt=\"示范图片4\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"优秀学习资料\"><a href=\"#优秀学习资料\" class=\"headerlink\" title=\"优秀学习资料\"></a>优秀学习资料</h2><ul>\n<li><a href=\"https://flutterchina.club/\" target=\"_blank\" rel=\"noopener\">Flutter中文网</a></li>\n<li><a href=\"https://flutterworld.site/cn/\" target=\"_blank\" rel=\"noopener\">Flutter World</a></li>\n<li><a href=\"https://jspang.com/detailed?id=41\" target=\"_blank\" rel=\"noopener\">Flutter免费视频-技术胖</a></li>\n<li><a href=\"https://book.flutterchina.club/\" target=\"_blank\" rel=\"noopener\">《Flutter 实战》</a></li>\n<li><a href=\"https://juejin.im/user/5ac2db47f265da2393774122/posts\" target=\"_blank\" rel=\"noopener\">闲鱼技术团队</a></li>\n</ul>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><ul>\n<li><a href=\"https://juejin.im/post/5b9606055188255c7c6541c3\" target=\"_blank\" rel=\"noopener\">Flutter和RN谁才是更好的跨端开发方案</a></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://book.flutterchina.club/\" target=\"_blank\" rel=\"noopener\">《Flutter 实战》</a></li>\n<li><a href=\"https://juejin.im/user/5ac2db47f265da2393774122/posts\" target=\"_blank\" rel=\"noopener\">闲鱼技术团队</a></li>\n</ul>\n","categories":[],"tags":["随笔","flutter"]},{"title":"flex: 1 详解","url":"http://yoursite.com/2019/12/11/flex-1详解/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前段时间被头条hr从库里捞起来了(去年面到三面打入冷宫)，于是就接受了面试邀请，心想进不了也可以查缺补漏自己的不足。</p>\n<p>其中就问了一道关于flex的问题：<br><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面试官：<span class=\"code\">`flex: 1`</span> 是哪些属性的缩写？</span><br><span class=\"line\"> </span><br><span class=\"line\">我：对应三个属性(flex-grow|flex-shrink|flex-basis)。</span><br><span class=\"line\"> </span><br><span class=\"line\">面试官：<span class=\"code\">`1`</span> 对应哪个属性，另外两个属性的默认值是多少？</span><br><span class=\"line\"> </span><br><span class=\"line\">我：当 flex 取值为一个非负数字时，则该数字为 flex-grow 值，flex-shrink 默认为 1，flex-basis 默认 0%。心想幸好当时学的时候看到过。</span><br><span class=\"line\"> </span><br><span class=\"line\">面试官：这三个属性分别表示的什么意思，剩余空间和溢出空间的概念有了解过吗？</span><br><span class=\"line\"> </span><br><span class=\"line\">我：。。。不知道</span><br><span class=\"line\"> </span><br><span class=\"line\">面试官：没关系，我们下一个问题。</span><br><span class=\"line\"> </span><br><span class=\"line\">总结：果然很头条(一个问题问到你不知道为止)。</span><br></pre></td></tr></table></figure></p>\n<p>接下来我就来对flex对应的三个属性做个详解。</p>\n<p>首先明确一点是，flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。</p>\n<h2 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h2><p>传统的布局是子容器在父容器中从左到右进行布局，应用 flex 进行布局，那么父容器一定设置 <code>display: flex</code>，子容器要“占有”并且“瓜分”父容器的空间，如何占有、瓜分的策略就是弹性布局的策略。这里就要解释到“剩余空间”的概念：</p>\n<blockquote>\n<p>子容器在父容器的“主轴”上还有多少空间可以“瓜分”，这个可以被“瓜分”的空间就叫做剩余空间。</p>\n</blockquote>\n<p><code>flex-grow</code> 属性定义弹性盒子项（flex-item）的放大比例(定义子容器的瓜分剩余空间的比例)，默认为0，即如果存在剩余空间，也不放大(不会去瓜分)。</p>\n<h2 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h2><p>如果子容器宽度超过父容器宽度，即使是设置了 flex-grow，但是由于没有剩余空间，就分配不到剩余空间了。这时候有两个办法：换行和压缩。由于 flex 默认不换行，那么压缩的话，怎么压缩呢，压缩多少？此时就需要用到 <code>flex-shrink</code> 属性了。</p>\n<p><code>flex-shrink</code> 属性定义了弹性盒子项（flex-item）的缩小比例，默认为1，即如果空间不足，该子容器将缩小。</p>\n<p>如果所有子项的 <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小。如果一个子项的 <code>flex-shrink</code> 属性为0，其他子项都为1，则空间不足时，前者不缩小。</p>\n<p>此时，剩余空间的概念就转化成了“溢出空间”。</p>\n<p>注意：</p>\n<ul>\n<li>负值对该属性无效。</li>\n<li>如果子容器没有超出父容器，设置 flex-shrink 无效</li>\n</ul>\n<h2 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h2><p><code>flex-basis</code> 属性定义了在分配多余空间之前，子项占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<p>它可以设为跟 width 或 height 属性一样的值（比如350px），则子项将占据固定空间。既然是跟宽度相关，那么 max-width，min-width，width 和 flex-basis 的大小优先级是怎么样的。</p>\n<blockquote>\n<p>max-width/min-width &gt; flex-basis &gt; width</p>\n</blockquote>\n<p>理解完了这三个属性接下来就看一些我们平时常写的一些简写表示的意义。</p>\n<h2 id=\"flex-简写\"><a href=\"#flex-简写\" class=\"headerlink\" title=\"flex 简写\"></a>flex 简写</h2><p>flex 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 flex 的默认值是 0 1 auto。</p>\n<h3 id=\"flex-取三个值\"><a href=\"#flex-取三个值\" class=\"headerlink\" title=\"flex 取三个值\"></a>flex 取三个值</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">200px</span>; &#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"flex-取值为-none\"><a href=\"#flex-取值为-none\" class=\"headerlink\" title=\"flex 取值为 none\"></a>flex 取值为 none</h3><p>当 flex 取值为 none，则计算值为 0 0 auto。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123; <span class=\"attribute\">flex</span>: none; &#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flex-取值为-auto\"><a href=\"#flex-取值为-auto\" class=\"headerlink\" title=\"flex 取值为 auto\"></a>flex 取值为 auto</h3><p>当 flex 取值为 auto，则计算值为 1 1 auto。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123; <span class=\"attribute\">flex</span>: auto; &#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flex-取值为-一个非负数\"><a href=\"#flex-取值为-一个非负数\" class=\"headerlink\" title=\"flex 取值为 一个非负数\"></a>flex 取值为 一个非负数</h3><p>当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: <span class=\"number\">0%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flex-取值为-长度或百分比\"><a href=\"#flex-取值为-长度或百分比\" class=\"headerlink\" title=\"flex 取值为 长度或百分比\"></a>flex 取值为 长度或百分比</h3><p>当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">0%</span>; &#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: <span class=\"number\">0%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flex-取值为-两个非负数字\"><a href=\"#flex-取值为-两个非负数字\" class=\"headerlink\" title=\"flex 取值为 两个非负数字\"></a>flex 取值为 两个非负数字</h3><p>当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">2</span>; &#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: <span class=\"number\">0%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flex-取值为-一个非负数字和一个长度或百分比\"><a href=\"#flex-取值为-一个非负数字和一个长度或百分比\" class=\"headerlink\" title=\"flex 取值为 一个非负数字和一个长度或百分比\"></a>flex 取值为 一个非负数字和一个长度或百分比</h3><p>当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">2</span> <span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后我们来用一个例子来计算子项的宽度。</p>\n<h2 id=\"栗子🌰\"><a href=\"#栗子🌰\" class=\"headerlink\" title=\"栗子🌰\"></a>栗子🌰</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.item1</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 140px;</span></span><br><span class=\"line\"><span class=\"undefined\">    flex: 2 1 0%;</span></span><br><span class=\"line\"><span class=\"undefined\">    background: blue;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.item2</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">    flex: 2 1 auto;</span></span><br><span class=\"line\"><span class=\"undefined\">    background: darkblue;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.item3</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    flex: 1 1 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    background: lightblue;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当 item-1 的 flex-basis 取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设<br>而 item-2 的 flex-basis 取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间</p>\n</blockquote>\n<p>主轴上父容器总尺寸：600px</p>\n<p>剩余空间：<br>600px - 100px(item2的flex-basis值) - 200px(item3的flex-basis值) = 300px</p>\n<p>伸缩放大系数之和(flex-grow值)：<br>2(item1) + 2(item2) + 1(item3) = 5</p>\n<p>每一份比例所占宽度：300 / 5 = 60px;</p>\n<p>剩余空间分配如下：</p>\n<ul>\n<li>item1 和 item2 各分配 2/5，各得 120px</li>\n<li>item3 分配 1/5，得 60px</li>\n</ul>\n<p>各子项最终宽度为：</p>\n<ul>\n<li>item1 = 0%(0px) + 120px = 120px</li>\n<li>item2 = auto(100px) + 120px = 220px</li>\n<li>item3 = 200px + 60px = 260px</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">Flex 布局教程：语法篇</a></li>\n</ul>\n","categories":[],"tags":["随笔","flex"]},{"title":"React数据大屏的应用实践","url":"http://yoursite.com/2019/09/24/React数据大屏的应用实践/","content":"<h2 id=\"数据大屏与数据可视化\"><a href=\"#数据大屏与数据可视化\" class=\"headerlink\" title=\"数据大屏与数据可视化\"></a>数据大屏与数据可视化</h2><p>现如今大数据已无所不在，并且正被越来越广泛的被应用到历史、政治、科学、经济、商业甚至渗透到我们生活的方方面面中，获取的渠道也越来越便利。</p>\n<p>今天我们就来聊一聊“大屏应用”，说到大屏就一定要聊到数据可视化，现如今，数据可视化由于数据分析的火热也变得火热起来，不过数据可视化并不是一个新技术，可视化数据就是用可视化的方式展现的数据。而数据大屏作为大数据展示媒介的一种，广泛运用于各种展示厅、会展、发布会及各种狂欢节中，其中不乏一些通用的处理方案：阿里的DataV、百度的Suger、腾讯RayData等等。</p>\n<p>随着物联网、5G等各种跟连接有关的技术的出现与发展，每个人手中掌握的数据量都呈指数级增长，光看这些数是看不过来也看不懂的，“数据可视化”就是一种简化，让艰难的数据理解过程，变成——看颜色，辨长短，分高低。从而大大缩短理解数据所需的时间。</p>\n<p>因公司的自研产品涉及到BI模块，因此数据大屏展示的需求孕育而生（数据大屏需求已经完成）。</p>\n<p>下面是本人针对这个数据大屏需求前期做的一些探索实践，数据也是mock的。</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/bi/img2.gif\" alt=\"bi\"></p>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><ul>\n<li>React 全家桶（React-Router、React-Redux、React Hooks）</li>\n<li>Webpack 编译打包</li>\n<li>Echarts 图表组件</li>\n<li>Socket.IO 即时通讯、通知与消息推送</li>\n<li>Grid 网格布局</li>\n</ul>\n<h2 id=\"系统搭建\"><a href=\"#系统搭建\" class=\"headerlink\" title=\"系统搭建\"></a>系统搭建</h2><h3 id=\"图表选择\"><a href=\"#图表选择\" class=\"headerlink\" title=\"图表选择\"></a>图表选择</h3><p>六种基本图表涵盖了大部分图表使用场景，也是做数据可视化最常用的图表类型：</p>\n<ul>\n<li><strong>柱状图</strong> 用来反映分类项目之间的比较；</li>\n<li><strong>饼图</strong> 用来反映构成，即部分占总体的比例；</li>\n<li><strong>折线图</strong> 用来反映随时间变化的趋势；</li>\n<li><strong>条形图</strong> 用来反映分类项目之间的比较；</li>\n<li><strong>散点图</strong> 用来反映相关性或分布关系；</li>\n<li><strong>地图</strong> 用来反映区域之间的分类比较。</li>\n</ul>\n<p>基本图表类型都有通用的样式，不过多的展开讲解。我们更多的考虑如何选择常用图表来呈现数据，达到数据可视化的目标。基本方法：<strong>明确目标</strong> —&gt; <strong>选择图形</strong> —&gt; <strong>梳理维度</strong> —&gt; <strong>突出关键信息</strong>。</p>\n<h3 id=\"数据请求推送\"><a href=\"#数据请求推送\" class=\"headerlink\" title=\"数据请求推送\"></a>数据请求推送</h3><p>当信息一旦准备就绪，我们就需要从服务器获取它们。这里我们需要一种基于推送的方法，例如 WebSocket 协议、轮询、服务器推送事件（SSE）以及最近的 HTTP2 服务器推送。这里我们简单比较一下 WebSocket 与轮询。</p>\n<p>轮询需要客户端定时向服务器发送ajax请求，服务器接到请求后返回响应信息。这就需要大量的占据服务器资源。同时在HTTP1.x协议中也存在一些比如线头阻塞、头部冗余等问题。所以这种方案直接pass了。</p>\n<p>再来说说 WebSocket，建立在 TCP 协议之上，数据格式比较轻量，性能开销小，通信高效，可以发送文本，也可以发送二进制数据。同时它还没有同源限制，客户端可以与任意服务器通信。还有一点 WebSocket 通常不使用 XMLHttpRequest，因此，当我们每次需要从服务器获取更多的信息时，无需发送头部数据。反过来说，这又减少了数据发送到服务器时需要付出的高昂的数据负载代价。对于数据大屏需要实时获取数据，这无疑是最高效的。</p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><p>数据大屏的核心就是数据的拼接，具体到展示层可以归纳成数据块的拼接。这里我们采用通用的尺寸1920*108(16:9)。尺寸确立后，接下来要对展示层进行布局和页面的划分。这里的划分，主要根据我们之前定好的业务指标进行，核心业务指标安排在中间位置、占较大面积；其余的指标按优先级依次在核心指标周围展开。一般把有关联的指标让其相邻或靠近，把图表类型相近的指标放一起，这样能减少观者认知上的负担并提高信息传递的效率。</p>\n<p>对于这种块状(网格)布局，我们就可以使用我们强大的 CSS 布局方案 – <strong>Grid</strong>。它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。</p>\n<p>安利一个grid 布局可视化设计工具 – <a href=\"https://cssgrid-generator.netlify.com/\" target=\"_blank\" rel=\"noopener\">CSS Grid Generator</a>。可以使用它生成对应的代码，帮助咱们快速布局。</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/bi/img2.png\" alt=\"grid\"></p>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>聊完这些通用知识我们就可以上手开发了。</p>\n<p>我这里使用了我自己开发的脚手架（hzzly-cli）来生成react项目环境。</p>\n<blockquote>\n<p>有兴趣了解脚手架开发的可以看我这篇文章<a href=\"http://hjingren.cn/2019/07/19/%E5%8A%A8%E6%89%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/\" target=\"_blank\" rel=\"noopener\">动手开发一个自己的项目脚手架</a></p>\n</blockquote>\n<p>项目结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── assets // 资源目录</span><br><span class=\"line\">│   ├── components // 公共组件目录</span><br><span class=\"line\">│   │   ├── Card // Card组件</span><br><span class=\"line\">│   │   ├── Charts // 图表组件目录</span><br><span class=\"line\">│   │   │   ├── Bar // 柱状图</span><br><span class=\"line\">│   │   │   ├── ChinaMap // 中国地图</span><br><span class=\"line\">│   │   │   ├── Funnel // 漏斗图</span><br><span class=\"line\">│   │   │   ├── Line // 折线图</span><br><span class=\"line\">│   │   │   ├── Pie // 饼图</span><br><span class=\"line\">│   │   │   └── lib // 基础图表组件</span><br><span class=\"line\">│   │   ├── ScrollNumber // 滚动数字组件</span><br><span class=\"line\">│   │   └── SvgIcon // Icon组件</span><br><span class=\"line\">│   ├── global.scss</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   ├── pages // 分块结构目录</span><br><span class=\"line\">│   ├── router // 路由</span><br><span class=\"line\">│   ├── store</span><br><span class=\"line\">│   │   ├── actions</span><br><span class=\"line\">│   │   ├── index.js</span><br><span class=\"line\">│   │   ├── reducers</span><br><span class=\"line\">│   │   ├── sagas</span><br><span class=\"line\">│   │   └── types.js</span><br><span class=\"line\">│   └── utils</span><br><span class=\"line\">│       ├── genChartData.js</span><br><span class=\"line\">│       ├── genMapData.js</span><br><span class=\"line\">│       ├── socket.js</span><br><span class=\"line\">│       └── util.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><h3 id=\"Chart基础组件封装\"><a href=\"#Chart基础组件封装\" class=\"headerlink\" title=\"Chart基础组件封装\"></a>Chart基础组件封装</h3><p>这里对<code>echarts-for-react</code>进一步封装，其它图表组件可以直接继承使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Charts/lib/BaseChart.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">'prop-types'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Echarts <span class=\"keyword\">from</span> <span class=\"string\">'echarts-for-react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseChart</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">    option: PropTypes.object.isRequired,</span><br><span class=\"line\">    data: PropTypes.object.isRequired,</span><br><span class=\"line\">    getOption: PropTypes.func.isRequired,</span><br><span class=\"line\">    style: PropTypes.object,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    style: &#123;&#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; runAction &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.chartRef &amp;&amp; runAction) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> chartIns = <span class=\"keyword\">this</span>.chartRef.getEchartsInstance();</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        runAction(chartIns);</span><br><span class=\"line\">      &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; option, data, getOption, style &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> finalOption = getOption(option, data);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> finalStyle = getStyle(style);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Echarts</span><br><span class=\"line\">        ref=&#123;ref =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.chartRef = ref;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">        style=&#123;finalStyle&#125;</span><br><span class=\"line\">        option=&#123;finalOption&#125;</span><br><span class=\"line\">        notMerge</span><br><span class=\"line\">        lazyUpdate</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">style</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">position</span>: <span class=\"string\">'relative'</span> &#125;,</span><br><span class=\"line\">    style</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// line.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BaseChart <span class=\"keyword\">from</span> <span class=\"string\">'../lib/BaseChart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> option <span class=\"keyword\">from</span> <span class=\"string\">'./option'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> getOption <span class=\"keyword\">from</span> <span class=\"string\">'./getOption'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseChart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    option,</span><br><span class=\"line\">    getOption,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// option.js 基础配置</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getOption.js 计算配置文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seriesCreator</span>(<span class=\"params\">series</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> series.map(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> (&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'line'</span>,</span><br><span class=\"line\">    symbol: <span class=\"string\">'circle'</span>,</span><br><span class=\"line\">    smooth: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    lineStyle: &#123;</span><br><span class=\"line\">      normal: &#123;</span><br><span class=\"line\">        width: <span class=\"number\">3</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...e,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; tooltip, xAxis, yAxis, yCategory, series = [], ...rest &#125; = data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...option,</span><br><span class=\"line\">    xAxis: &#123;</span><br><span class=\"line\">      ...option.xAxis,</span><br><span class=\"line\">      ...xAxis,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tooltip: &#123;</span><br><span class=\"line\">      ...option.tooltip,</span><br><span class=\"line\">      ...tooltip,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    yAxis: &#123;</span><br><span class=\"line\">      ...option.yAxis,</span><br><span class=\"line\">      ...yAxis,</span><br><span class=\"line\">      data: yCategory || [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    series: seriesCreator(series),</span><br><span class=\"line\">    ...rest,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Socket封装SDK\"><a href=\"#Socket封装SDK\" class=\"headerlink\" title=\"Socket封装SDK\"></a>Socket封装SDK</h3><p>这里对<code>socket.io-client</code>封装成SDK，方便使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io <span class=\"keyword\">from</span> <span class=\"string\">'socket.io-client'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> socket = &#123;</span><br><span class=\"line\">  wsConn: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  config: &#123;</span><br><span class=\"line\">    wsHost: <span class=\"string\">'/'</span>, <span class=\"comment\">// wesocket host</span></span><br><span class=\"line\"></span><br><span class=\"line\">    onConn() &#123;&#125;,</span><br><span class=\"line\">    onDisconn() &#123;&#125;,</span><br><span class=\"line\">    onError() &#123;&#125;,</span><br><span class=\"line\">    onReceiveMsg() &#123;&#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  init(opt) &#123;</span><br><span class=\"line\">    socket.config = &#123; ...socket.config, ...opt &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getWs() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket.wsConn) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> socket.wsConn;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      socket.initWs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getWsStatus() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> socket.wsConn ? socket.wsConn.connected : <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  initWs() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket.getWsStatus()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> socket.wsConn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> wsUrl = socket.config.wsHost;</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.wsConn = io.connect(wsUrl);</span><br><span class=\"line\">    socket.wsConn.on(<span class=\"string\">'connect'</span>, () =&gt; &#123;</span><br><span class=\"line\">      socket.config.onConn(socket.wsConn);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.wsConn.on(<span class=\"string\">'message'</span>, (...param) =&gt; &#123;</span><br><span class=\"line\">      socket.config.onReceiveMsg(...param);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.wsConn.on(<span class=\"string\">'disconnect'</span>, () =&gt; &#123;</span><br><span class=\"line\">      socket.config.onDisconn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> socket.wsConn;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  reconnect() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket.wsConn) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (socket.wsConn.disconnected) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reconnect ws</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      socket.initWs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  disconnect() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket.wsConn) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (socket.wsConn.connected) &#123;</span><br><span class=\"line\">        socket.wsConn.disconnect();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  wsEmit(params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket.wsConn) &#123;</span><br><span class=\"line\">      socket.wsConn.emit(params.name, params.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</span><br><span class=\"line\">  global.socket = socket;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; socket &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态数字展示\"><a href=\"#动态数字展示\" class=\"headerlink\" title=\"动态数字展示\"></a>动态数字展示</h3><p>该数据通过socket推送实时更新。</p>\n<p>数字过渡的动态效果为对应数位的新数字从下至上替换旧数字，如果该位数的数字没有发生变化，则没有过渡效果。</p>\n<p><code>1、对数据进行完善并格式化</code></p>\n<p>针对数字少于9位数进行前位补零并进行千分位格式化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MAX_LEN = <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toThousands</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = (val || <span class=\"number\">0</span>).toString();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (num.length &lt; MAX_LEN) &#123;</span><br><span class=\"line\">    num = <span class=\"string\">`0<span class=\"subst\">$&#123;num&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (num.length &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    result = <span class=\"string\">`,<span class=\"subst\">$&#123;num.slice(<span class=\"number\">-3</span>)&#125;</span><span class=\"subst\">$&#123;result&#125;</span>`</span>;</span><br><span class=\"line\">    num = num.slice(<span class=\"number\">0</span>, num.length - <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num) &#123;</span><br><span class=\"line\">    result = num + result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.toString().split(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>2、过渡动画</code></p>\n<p>利用样式控制过渡动画，在第一步中我们对数字进行了格式化，然后我们针对每一位数字进行比较，当数字不相等的时候添加<code>active</code>类，最后对<code>active</code>类添加动画。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环渲染每一位数字</span></span><br><span class=\"line\">&lt;li className=&#123;<span class=\"string\">`<span class=\"subst\">$&#123;oldNumber[i] !== newNumber[i] ? <span class=\"string\">'active'</span> : <span class=\"string\">''</span>&#125;</span>`</span>&#125;&gt;</span><br><span class=\"line\">  &lt;span className=<span class=\"string\">\"num\"</span>&gt;&#123;oldNumber[i]&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;span className=\"num\"&gt;&#123;newNumber[i]&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/li&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  .num &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">move</span> 1<span class=\"selector-class\">.5s</span>;</span><br><span class=\"line\">    animation-fill-mode: forwards; // 让动画结束后保持最后一帧</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> move &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-100%);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"背景线性粒子\"><a href=\"#背景线性粒子\" class=\"headerlink\" title=\"背景线性粒子\"></a>背景线性粒子</h3><p>这里我使用了我自己封装的组件，可以对应框架来安装引用：</p>\n<ul>\n<li><a href=\"https://github.com/hzzly/vue-particle-line\" target=\"_blank\" rel=\"noopener\">vue-particle-line</a></li>\n<li><a href=\"https://github.com/hzzly/react-particle-line\" target=\"_blank\" rel=\"noopener\">react-particle-line</a></li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>1、项目框架目录结构采用笔者自己搭建的webpack环境：<a href=\"https://github.com/hzzly/webpack-template\" target=\"_blank\" rel=\"noopener\">webpack-template</a></p>\n<p>2、关于适配和兼容性暂时还未完善，如果后期有时间会慢慢去完善</p>\n<p>3、此项目为笔者调研时的实践，因为时间有限，一些功能还不善，设计和布局都是自己的一些想象与参考</p>\n<p>4、此项目作为开源学习使用，谢绝用于商业应用</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p>代码已上传至我的<a href=\"https://github.com/hzzly/credit-bi-react\" target=\"_blank\" rel=\"noopener\">GitHub</a>，欢迎 Star、Fork</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.woshipm.com/pd/1782868.html\" target=\"_blank\" rel=\"noopener\">超全面设计指南：如何做大屏数据可视化设计？</a></li>\n<li><a href=\"http://www.woshipm.com/data-analysis/2279512.html\" target=\"_blank\" rel=\"noopener\">五个方面，聊聊大数据可视化的初体验</a></li>\n<li><a href=\"https://juejin.im/post/5a20fe96f265da431120025b\" target=\"_blank\" rel=\"noopener\">一个炫酷大屏展示页的打造过程</a></li>\n</ul>\n","categories":[],"tags":["随笔","react","大屏"]},{"title":"AST的实践","url":"http://yoursite.com/2019/09/19/AST的实践/","content":"<h2 id=\"什么是AST（抽象语法树）\"><a href=\"#什么是AST（抽象语法树）\" class=\"headerlink\" title=\"什么是AST（抽象语法树）?\"></a>什么是AST（抽象语法树）?</h2><blockquote>\n<p>It is a hierarchical program representation that presents source code structure according to the grammar of a programming language, each AST node corresponds to an item of a source code.</p>\n<p>AST是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n</blockquote>\n<p>AST是一个非常基础但是同时非常重要的知识点，我们熟知的 TypeScript、babel、webpack、vue-cli 都是依赖 AST 进行开发的。</p>\n<p>这里我们就以 babel 为例来实践一下 AST。</p>\n<h2 id=\"Babel运行原理\"><a href=\"#Babel运行原理\" class=\"headerlink\" title=\"Babel运行原理\"></a>Babel运行原理</h2><p>Babel 作为当今最为常用的 JavaScript 编译器，在前端开发中扮演着极为重要的角色。大多数情况下，Babel 被用来转译 ECMAScript 2015+ 至可兼容浏览器的版本。</p>\n<p>Babel 的三个主要处理步骤分别是：</p>\n<ul>\n<li>解析（parse）</li>\n<li>转换（transform）</li>\n<li>生成（generate）</li>\n</ul>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/ast/ast1.png\" alt=\"Babel处理步骤\"></p>\n<p>整个过程中，parsing和generation是固定不变的，最关键的是transforming步骤，通过babel插件来支持，这是其扩展性的关键。</p>\n<p>这三个阶段分别由 @babel/parser、@babel/core、@babel/generator 执行。Babel 本质上只是一个代码的搬运工，如果不给 Babel 装上插件，它将会把输入的代码原封不动地输出。正是因为有插件的存在， Babel 才能将输入的代码进行转变，从而生成新的代码。</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>输入JS源码，输出AST</p>\n<p>parsing（解析），对应于编译器的词法分析，及语法分析阶段。输入的源码字符序列经过词法分析，生成具有词法意义的token序列（能够区分出关键字、数值、标点符号等），接着经过语法分析，生成具有语法意义的AST（能够区分出语句块、注释、变量声明、函数参数等）。</p>\n<p>利用 @babel/parser 对源代码进行解析 得到 AST。</p>\n<p>栗如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(info)</span><br></pre></td></tr></table></figure>\n<p>经过parsing后，生成的AST如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CallExpression\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"callee\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"MemberExpression\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"object\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"Identifier\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"loc\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"identifierName\"</span>: <span class=\"string\">\"console\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"console\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"property\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"Identifier\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"loc\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"identifierName\"</span>: <span class=\"string\">\"log\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"log\"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"arguments\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"Identifier\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"Identifier\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"loc\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"identifierName\"</span>: <span class=\"string\">\"log\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"info\"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>🔥Tip: JS代码对应的AST结构可以通过<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">AST Explorer</a>工具查看</p>\n<p>仔细的小伙伴可能就会发现从我们的源代码到AST的过程其实就是一个分词的过程，将我们的 console.log(info) 分成 console、log、info。</p>\n<p>有了这个 AST 树结构，我们就能进行语义层面转换了。</p>\n<h3 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h3><p>输入AST，输出修改过的AST</p>\n<p>利用 @babel/traverse 对 AST 进行遍历，并解析出整个树的 path，通过挂载的 metadataVisitor 读取对应的元信息，这一步叫 set AST 过程。</p>\n<blockquote>\n<p>@babel/traverse 是一款用来自动遍历抽象语法树的工具，它会访问树中的所有节点，在进入每个节点时触发 enter 钩子函数，退出每个节点时触发 exit 钩子函数。开发者可在钩子函数中对 AST 进行修改。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traverse <span class=\"keyword\">from</span> <span class=\"string\">\"@babel/traverse\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  enter(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 进入 path 后触发</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  exit(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 退出 path 前触发</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>transforming（转换），对应于编译器的机器无关代码优化阶段（稍微有点牵强，但二者工作内容都是修改AST），对 AST 做一些修改，比如针对上面的 log 增加一些信息方便我们调试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(info) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'[info]'</span>, info)</span><br></pre></td></tr></table></figure>\n<p>修改过后的 AST 结构：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CallExpression\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"callee\"</span>: &#123;</span><br><span class=\"line\">    // ....</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"arguments\": [</span><br><span class=\"line\">    \"StringLiteral\": &#123;</span><br><span class=\"line\">      \"type\": \"StringLiteral\",</span><br><span class=\"line\">      \"value\": \"'[info]'\",</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"Identifier\": &#123;</span><br><span class=\"line\">      \"type\": \"Identifier\",</span><br><span class=\"line\">      \"loc\": &#123;</span><br><span class=\"line\">        \"identifierName\": \"log\",</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      \"name\": \"info\",</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>语义层面的转换具体而言就是对AST进行增、删、改操作，修改后的AST可能具有不同的语义，映射回代码字符串也不同</p>\n<h3 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h3><p>输入AST，输出JS源码</p>\n<p>generation（生成），对应于编译器的代码生成阶段，把AST映射回代码字符串。</p>\n<p>利用 @babel/generator 将 AST 树输出为转码后的代码字符串。</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>说了这么多接下来我们就用代码实践一下上面的例子</p>\n<h3 id=\"相关npm包\"><a href=\"#相关npm包\" class=\"headerlink\" title=\"相关npm包\"></a>相关npm包</h3><ul>\n<li>@babel/parser 解析输入源码，创建AST</li>\n<li>@babel/traverse 遍历操作AST</li>\n<li>@babel/generator 把AST转回JS代码</li>\n<li>@babel/types AST操作工具库</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. parse</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = parser.parse(code);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. traverse</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">    CallExpression(path) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; callee, <span class=\"built_in\">arguments</span> &#125; = path.node;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        t.isMemberExpression(callee)</span><br><span class=\"line\">        &amp;&amp; callee.object.name === <span class=\"string\">'console'</span></span><br><span class=\"line\">        &amp;&amp; callee.property.name === <span class=\"string\">'log'</span></span><br><span class=\"line\">        &amp;&amp; <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">0</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> variableName = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">        path.node.arguments.unshift(</span><br><span class=\"line\">          t.StringLiteral(<span class=\"string\">`[<span class=\"subst\">$&#123;variableName&#125;</span>]`</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  traverse.default(ast, visitor);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. generate</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> generate.default(ast, &#123;&#125;, code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`console.log(info)`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = compile(code);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result.code);</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>看到这，我们的 AST 实践也告一段落了。当然，文章所讲的只是一个简单的例子，但基本的原理思路八九不离十，更多的类型还得自己去探究。总之，掌握好 AST，你真的可以做很多事情。</p>\n","categories":[],"tags":["随笔","AST"]},{"title":"JWT--JSON WEB TOKEN","url":"http://yoursite.com/2019/09/04/JWT--JSON WEB TOKEN/","content":"<h2 id=\"什么是JWT\"><a href=\"#什么是JWT\" class=\"headerlink\" title=\"什么是JWT\"></a>什么是JWT</h2><p>JSON Web Token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href=\"https://tools.ietf.org/html/rfc7519\" target=\"_blank\" rel=\"noopener\">RFC 7519</a>)，该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>\n<p>JWT是目前最流行的跨域认证解决方案之一。</p>\n<h2 id=\"为什么使用JWT\"><a href=\"#为什么使用JWT\" class=\"headerlink\" title=\"为什么使用JWT\"></a>为什么使用JWT</h2><p>在看为什么使用之前，我们必须要先了解之前我们是如何进行验证请求的。</p>\n<h3 id=\"Session认证\"><a href=\"#Session认证\" class=\"headerlink\" title=\"Session认证\"></a>Session认证</h3><p>在 Session 认证方式中，用户登录后发给服务器，服务器在接收并验证发送过来的账号密码请求之后，就会把这个用户信息放入 Session 中，然后把 Session 存在服务器上，这样服务器就知道了这个用户的存在，当下一次用户访问的时候，就能认证了。</p>\n<p>但因为我们知道<strong>http协议是一种无状态的协议</strong>，也就是说当下一次用户发送请求的时候，请求中没有任何信息能表明用户身份！也就是说不知道请求是谁发出来了，这样也就不能认证了。</p>\n<p>所以就需要利用 Cookie 来管理 Session，即把 SessionID 放入 HTTP 响应中发给客户端，并保存在客户端，当客户端发送下一次请求的时候，就把这个 SessionID 一起发送回来，这样就能这次的请求是谁发出来的了。</p>\n<blockquote>\n<p>扩展：Cookie 是由客户端（通常是浏览器）保存的小型文本信息，其内容是一系列的键值对，是由 HTTP 服务器设置并保存在浏览器上的信息。</p>\n</blockquote>\n<h3 id=\"Session认证的问题\"><a href=\"#Session认证的问题\" class=\"headerlink\" title=\"Session认证的问题\"></a>Session认证的问题</h3><ol>\n<li><p><code>内存开销大</code>: 我们知道 Session 是存在服务器上的，实际上为了加快认证的速度，我们一般都会放在内存中，这样当用户基数大的时候，内存的开销就会很大。当然也可以将 Session 存入到 Session 表或者是缓存（redis等）中，但是依旧会有这样的问题。</p>\n</li>\n<li><p><code>安全性（CSRF）</code>: 因为是基于 Cookie 进行用户识别，如果 Cookie 被截获，用户就会很容易收到跨站请求伪造的攻击。</p>\n</li>\n<li><p><code>分布式负载均衡</code>: 因为 Session 信息是被单个服务器所保存的，所以在分布式系统中就不能适用了。比如 Session 一开始是保存在 A 服务器上，但是下一次请求的时候，这个请求被服务器负载均衡转发到了 B 服务器，而 B 服务器则没有这个 Session 信息，所以就不能用过认证了。</p>\n</li>\n</ol>\n<h3 id=\"JWT的优点\"><a href=\"#JWT的优点\" class=\"headerlink\" title=\"JWT的优点\"></a>JWT的优点</h3><p>因为 JWT 是由服务端生成的，通过请求传给客户端（客户端可以以任意方式存放）。所以服务器不需要存储任何 JWT 信息。这样就能避免了上述 Session 的几个问题了。当然 JWT 还有其自身的一些优点。</p>\n<ol>\n<li><p><code>轻量级</code>：JWT是非常轻量级的，传输的方式多样化，可以通过URL/POST参数/HTTP头部等方式传输。</p>\n</li>\n<li><p><code>无状态/跨域认证</code>：token包含所有用于标识用户的信息，这消除了对会话状态的需要。如果我们使用负载均衡，我们依然可以将token传递给任何服务器，而不是存储在我们登录的同一台服务器上。</p>\n</li>\n<li><p><code>安全性</code>：无需担心跨站请求伪造（CSRF）攻击。</p>\n</li>\n</ol>\n<h2 id=\"JWT-组成\"><a href=\"#JWT-组成\" class=\"headerlink\" title=\"JWT 组成\"></a>JWT 组成</h2><p>由三个部分组成：header.payload.signature</p>\n<h3 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h3><p><code>header</code>：包含了两个部分 typ 和 alg，分别是声明类型和JWT的加密算法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过 base64URL 加密之后得到 JWT 的第一部分信息：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h3><p><code>payload</code>：负载，存放有效信息的地方。这些有效信息包含三个部分：标准中注册的声明、公共的声明 和 私有的声明。</p>\n<ul>\n<li>iss：JWT 的签发者</li>\n<li>sub：JWT 所面向的用户</li>\n<li>aud：接收 JWT 的一方</li>\n<li>exp：JWT 的过期时间这个过期时间必须大于签发时间</li>\n<li>nbf：JWT 起作用的开始时间，即定义在什么时间之前，该JWT都是不可用的</li>\n<li>iat：JWT 的签发时间</li>\n<li>jti：JWT 的唯一身份标识，主要用来作为一次性 token，从而回避重放攻击。</li>\n</ul>\n<p>除了官方字段，你还可以在这个部分定义私有字段：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"sub\"</span>: <span class=\"string\">\"1234567890\"</span>, </span><br><span class=\"line\">  <span class=\"string\">\"nickname\"</span>: <span class=\"string\">\"hzzly\"</span>, </span><br><span class=\"line\">  <span class=\"string\">\"username\"</span>: <span class=\"string\">\"hzzly\"</span>, </span><br><span class=\"line\">  <span class=\"string\">\"scopes\"</span>: [ <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"user\"</span> ] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经过 base64URL 加密之后得到 JWT 的第二部分信息：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmlja25hbWUiOiJoenpseSIsInVzZXJuYW1lIjoiaHp6bHkiLCJzY29wZXMiOlsiYWRtaW4iLCJ1c2VyIl19</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"signature\"><a href=\"#signature\" class=\"headerlink\" title=\"signature\"></a>signature</h3><p><code>signature</code>：是对前两部分的签名，防止数据篡改。由三个部分组成：header、payload 和 secret。其中 header 和 payload 都是加密后的字符串，secret就是一个字符串（密钥）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> signature = HMACSHA256(base64UrlEncode(header) + <span class=\"string\">\".\"</span> + base64UrlEncode(payload), secret);</span><br></pre></td></tr></table></figure>\n<p>算出签名以后，把 header、payload、signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给客户端。</p>\n<p>最终的jwt：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmlja25hbWUiOiJoenpseSIsInVzZXJuYW1lIjoiaHp6bHkiLCJzY29wZXMiOlsiYWRtaW4iLCJ1c2VyIl19.sXaHGg9SWyRpl-rhiSBFuD01G4yE3Gmi5m-JD7u6YyI</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"base64URL\"><a href=\"#base64URL\" class=\"headerlink\" title=\"base64URL\"></a>base64URL</h3><p>面提到，header 和 payload 串型化的算法是 base64URL。这个算法跟 base64 算法基本类似，但有一些小的不同。</p>\n<p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p>\n<h2 id=\"JWT的使用方式\"><a href=\"#JWT的使用方式\" class=\"headerlink\" title=\"JWT的使用方式\"></a>JWT的使用方式</h2><p>客户端收到服务器返回的 JWT，可以储存在 sessionStorage 或 localStorage 里面。</p>\n<p>此后，客户端每次与服务器通信，都要带上这个 JWT。需要把它放在 HTTP 请求的头信息 Authorization 字段里面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>\n<p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p>\n","categories":[],"tags":["随笔","jwt"]},{"title":"一本正经的来了解一下HTTP2","url":"http://yoursite.com/2019/09/01/一本正经的来了解一下HTTP2/","content":"<h2 id=\"HTTP-2介绍\"><a href=\"#HTTP-2介绍\" class=\"headerlink\" title=\"HTTP/2介绍\"></a>HTTP/2介绍</h2><p>维基百科：HTTP/2（超文本传输协议第2版，最初命名为HTTP 2.0），简称为h2（基于TLS/1.2或以上版本的加密连接）或h2c（非加密连接），是HTTP协议的的第二个主要版本，使用于万维网。</p>\n<p>HTTP/2是HTTP协议自1999年HTTP 1.1发布后的首个更新，主要基于SPDY协议。它由互联网工程任务组（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组进行开发。该组织于2014年12月将HTTP/2标准提议递交至IESG进行讨论，于2015年2月17日被批准。HTTP/2标准于2015年5月以RFC 7540正式发表。</p>\n<h2 id=\"HTTP-1-x存在的问题\"><a href=\"#HTTP-1-x存在的问题\" class=\"headerlink\" title=\"HTTP/1.x存在的问题\"></a>HTTP/1.x存在的问题</h2><p>在看为什么要使用HTTP/2之前，我们先来了解之前的HTTP/1.x存在的问题。</p>\n<ol>\n<li><code>线头阻塞</code>：TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。</li>\n<li><code>多个TCP连接</code>：虽然HTTP/1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。</li>\n<li><code>头部冗余，采用文本格式</code>：HTTP/1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。</li>\n<li><code>客户端需要主动请求</code></li>\n</ol>\n<h2 id=\"HTTP-2的具体变化\"><a href=\"#HTTP-2的具体变化\" class=\"headerlink\" title=\"HTTP/2的具体变化\"></a>HTTP/2的具体变化</h2><h3 id=\"二进制分帧层\"><a href=\"#二进制分帧层\" class=\"headerlink\" title=\"二进制分帧层\"></a>二进制分帧层</h3><p>先来理解几个概念：</p>\n<p><code>帧（Frame）</code>：HTTP/2数据通信的最小单位消息：指 HTTP/2 中逻辑上的 HTTP 消息。例如请求和响应等，消息由一个或多个帧组成。</p>\n<p><code>流（Stream）</code>：存在于连接中的一个虚拟通道。流可以承载双向消息，每个流都有一个唯一的整数ID。</p>\n<p><code>消息（Message）</code>：一个完整的HTTP请求或响应，由一个或多个帧组成。特定消息的帧在同一个流上发送，这意味着一个HTTP请求或响应只能在一个流上发送。</p>\n<p>HTTP/2 性能提升的核心就在于二进制分帧层。HTTP2是二进制协议，他采用二进制格式传输数据而不是1.x的文本格式，二进制协议解析起来更高效。 HTTP / 1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码。</p>\n<p>HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p>\n<h3 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3><p>上面提到HTTP/1.x的线头阻塞和多个TCP连接的问题，HTTP2的多路复用完美解决。HTTP/2让所有的通信都在一个TCP连接上完成，真正实现了请求的并发。</p>\n<p>在一个 TCP 连接上，HTTP/2可以向服务器不断发送帧，每帧的 stream identifier 的标明这一帧属于哪个流，然后在接收时，根据 stream identifier 拼接每个流的所有帧组成一整块数据。把 HTTP/1.x 每个请求都当作一个流，那么多个请求变成多个流，请求响应数据分成多个帧，不同流中的帧交错地发送给对方，这就是 HTTP/2 中的多路复用。</p>\n<p>流的概念实现了单连接上多请求 - 响应并行，解决了线头阻塞的问题，减少了 TCP 连接数量和 TCP 连接慢启动造成的问题</p>\n<p>所以 HTTP/2 对于同一域名只需要创建一个连接，而不是像 HTTP/1.x 那样创建 6~8 个连接。</p>\n<h3 id=\"头部压缩\"><a href=\"#头部压缩\" class=\"headerlink\" title=\"头部压缩\"></a>头部压缩</h3><p>在HTTP/1.x版本中，首部用文本格式传输，通常会给每个传输增加500-800字节的开销。当一个网站请求非常多时，而每个请求带的一些首部字段都是相同的，例如cookie、user-agent等，浪费了很多带宽资源。HTTP/2为此对消息头采用HPACK（专为HTTP/2头部设计的压缩格式）进行压缩传输，能够节省消息头占用的网络的流量。头部压缩需要在浏览器和服务器端之间：</p>\n<ul>\n<li>维护一份相同的静态字典，包含常见的头部名称，以及常见的头部名称和值的组合</li>\n<li>维护一份相同的动态字典，可以动态的添加内容</li>\n<li>通过静态Huffman编码对传输的首部字段进行编码</li>\n</ul>\n<p>HTTP/2的静态字典可以查看<a href=\"https://httpwg.org/specs/rfc7541.html#static.table.definition\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>所以我们在传输首部字段的时候，例如要传输method:GET,那我们只需要传输静态字典里面method:GET对应的索引值就可以了，一个字节搞定。像user-agent、cookie这种静态字典里面只有首部名称而没有值的首部，第一次传输需要user-agent在静态字典中的索引以及他的值，值会采用静态Huffman编码来减小体积。</p>\n<p>第一次传输过user-agent 之后呢，浏览器和服务器端就会把它添加到自己的动态字典中。后续传输就可以传输索引了，一个字节搞定。</p>\n<h3 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h3><p>浏览器发送一个请求，服务器主动向浏览器推送与这个请求相关的资源，这样浏览器就不用发起后续请求。<br>Server-Push 主要是针对资源内联做出的优化，相较于 HTTP/1.x 资源内联的优势:</p>\n<ul>\n<li>客户端可以缓存推送的资源</li>\n<li>客户端可以拒收推送过来的资源</li>\n<li>推送资源可以由不同页面共享</li>\n<li>服务器可以按照优先级推送资源</li>\n</ul>\n<h3 id=\"重置\"><a href=\"#重置\" class=\"headerlink\" title=\"重置\"></a>重置</h3><p>HTTP/1.1的有一个缺点是：当一个含有确切值的Content-Length的HTTP消息被送出之后，你就很难中断它了。当然，通常你可以断开整个TCP链接（但也不总是可以这样），但这样导致的代价就是需要通过三次握手来重新建立一个新的TCP连接。</p>\n<p>一个更好的方案是只终止当前传输的消息并重新发送一个新的。在HTTP/2里面，我们可以通过发送RST_STREAM帧来实现这种需求，从而避免浪费带宽和中断已有的连接。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>HTTP/2升级并不完全是没有副作用的，先说结论，HTTP/1.x全升HTTP/2性能不一定能提升，还是需要做一些特殊的优化。</p>\n<ol>\n<li><p>需要把针对HTTP/1.x的优化点摘出来改成对h2友好的，不然会影响性能，比如雪碧图，css，js行内引入，域名打散这些都是针对h1的优化，如果不针对h2做修改，收益可能是负的。</p>\n</li>\n<li><p>保证你的页面没有那种古老的合并资源请求的优化，比如通过xhr请求多个图片js，html片段再在客户端解析的骚操作。</p>\n</li>\n<li><p>h2特性在h1上不支持，所以你需要在不支持的h1浏览器里访问站点，来做性能测试，需要成本。</p>\n</li>\n<li><p>h2对单请求的优化有限，如果做流服务器，可能收益也不大，视频，大图片下载，多路复用也体现不出什么优势。</p>\n</li>\n<li><p>开启h2之后对ssl的配置可能会更复杂一些，如果不是nginx层代理开启，而是在前端机上比如nodejs服务上开启h2，服务端的改造也比较麻烦，不像静态资源那么开关方便。</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/HTTP/2\" target=\"_blank\" rel=\"noopener\">维基百科：HTTP/2</a></li>\n<li><a href=\"https://ye11ow.gitbooks.io/http2-explained/content/\" target=\"_blank\" rel=\"noopener\">《http2讲解》</a></li>\n<li><a href=\"https://www.zhihu.com/question/310263956/answer/582342502\" target=\"_blank\" rel=\"noopener\">把所有 HTTPS 项目无脑升级成 HTTP/2 会有什么坑吗?[知乎]</a></li>\n</ul>\n","categories":[],"tags":["随笔","http"]},{"title":"深究HTTPS","url":"http://yoursite.com/2019/08/13/深究HTTPS/","content":"<p>前言：还没有用上https的可以看一下我之前写的<a href=\"http://hjingren.cn/2019/06/11/Nginx%E4%B8%8B%E5%8D%87%E7%BA%A7https/\" target=\"_blank\" rel=\"noopener\">Nginx下升级https</a>，把你的http升级到https。</p>\n<h2 id=\"HTTP和HTTPS基本概念\"><a href=\"#HTTP和HTTPS基本概念\" class=\"headerlink\" title=\"HTTP和HTTPS基本概念\"></a>HTTP和HTTPS基本概念</h2><p><code>HTTP</code>：超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。<br><code>HTTPS</code>：超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>\n<h2 id=\"HTTP和HTTPS的差异\"><a href=\"#HTTP和HTTPS的差异\" class=\"headerlink\" title=\"HTTP和HTTPS的差异\"></a>HTTP和HTTPS的差异</h2><ol>\n<li><p>从上面概念也可以看出来HTTP是不安全的，且攻击者通过监听和中间人攻击等手段，可以获取网站帐户和敏感信息等。HTTPS被设计为可防止前述攻击，并在正确配置时被认为是安全的。</p>\n</li>\n<li><p>HTTP的URL由”http://“起始且默认使用端口80，而HTTPS的URL由”https://“起始且默认使用端口443。</p>\n</li>\n<li><p>HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。</p>\n<ul>\n<li>1）对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li>\n<li>2）非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"简述HTTPS访问过程\"><a href=\"#简述HTTPS访问过程\" class=\"headerlink\" title=\"简述HTTPS访问过程\"></a>简述HTTPS访问过程</h2><p>HTTPS在进行数据传输之前会与服务器和浏览器进行一次握手，在握手时确定双方的加密密码信息。</p>\n<p>具体过程如下：</p>\n<ol>\n<li><p>浏览器将支持的加密信息发送给网站服务器；</p>\n</li>\n<li><p>服务器会选择出一套加密算法和哈希算法，将验证身份的信息以证书（证书发布CA机构、证书有效期、公钥、证书所有者、签名等）的形式发送给浏览器；</p>\n</li>\n<li><p>当浏览器收到证书之后首先需要验证证书的合法性，如果证书受到浏览器信任则在浏览器地址栏会有标志显示，否则就会显示不受信的标识。当证书受信之后，浏览器会随机生成一串密码，并使用证书中的公钥加密。之后就是使用约定好的哈希算法握手消息，并生成随机数对消息进行加密，再将生成的信息发送给服务器；</p>\n</li>\n<li><p>当服务器接收到浏览器发送过来的数据后，会使用服务器本身的私钥将信息解密确定密码，然后通过密码解密浏览器发送过来的握手信息，并验证哈希是否与浏览器一致。然后服务器会使用密码加密新的握手信息，发送给浏览器；</p>\n</li>\n<li><p>最后浏览器解密并计算经过哈希算法加密的握手消息，如果与服务发送过来的哈希一致，则此握手过程结束后，服务器与浏览器会使用之前浏览器生成的随机密码和对称加密算法进行加密交换数据。</p>\n</li>\n</ol>\n<h2 id=\"HTTPS的加密原理\"><a href=\"#HTTPS的加密原理\" class=\"headerlink\" title=\"HTTPS的加密原理\"></a>HTTPS的加密原理</h2><p>HTTPS在加密过程中使用了非对称加密技术和对称加密技术。</p>\n<h3 id=\"对称加密算法\"><a href=\"#对称加密算法\" class=\"headerlink\" title=\"对称加密算法\"></a>对称加密算法</h3><p>采用单钥密码系统的加密方式，同一个密钥可以同时做信息的加密和解密，这种加密的方法称为对称加密。</p>\n<p>SSL在通信过程中，使用了对称加密算法，也就是说客户端和服务器同时共享一个密钥。</p>\n<p>于是，以共享密钥的方式加密，必须将密钥发给对方。这个时候，假如通信过程被监听，密钥被攻击者获取了，那么这个时候也就失去了加密的意义了。</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https2.png\" alt=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https2.png\"></p>\n<p>于是就需要使用两把密钥的非对称加密算法。</p>\n<h3 id=\"非对称加密算法\"><a href=\"#非对称加密算法\" class=\"headerlink\" title=\"非对称加密算法\"></a>非对称加密算法</h3><p>与对称加密算法相反，非对称加密算法需要两个密钥来进行加密和解密，这两个密钥是配对的，分别是公开密钥（公钥）和私有密钥（私钥）。</p>\n<p>于是现在，假设现在由服务器来生成一对公钥和密钥。</p>\n<p>当客户端第一次发请求和服务器协商的时候，服务器就生成了一对公钥和私钥。</p>\n<p>紧接着，服务器把公钥发给客户端（明文，不需要做任何加密），客户端接收后，使用服务器发过来的公钥进行数据加密。</p>\n<p>再接着，服务器接收到了以后，用配对的私钥进行解密，就得到了客户端发送的数据。</p>\n<p>非对称加密算法的特点：算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加解密速度性能上比较差，没有对称加密算法加解密的速度快。</p>\n<p>但是我们还存在一个问题，如果公钥被中间人拿到篡改呢？</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https3.jpeg\" alt=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https3.jpeg\"></p>\n<p>这时我们就需要使用证书保证公钥的正确性</p>\n<h3 id=\"公钥证书\"><a href=\"#公钥证书\" class=\"headerlink\" title=\"公钥证书\"></a>公钥证书</h3><p>首先，服务器的运营人员向数字证书机构（CA）提出公开密钥的申请。数字证书认证机构在验证申请者的身份之后，会对申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起。</p>\n<p>简单点理解就是：<br>CA会向申请者颁发一个证书文件和证书的私钥文件，这个证书文件里面的内容有：签发者、证书用途、服务器申请的时候附带的公钥、服务器的加密算法、使用的HASH算法、证书到期的时间等等，私钥文件就是与证书中公钥对应的私钥。</p>\n<p>紧接着，把上面所提到的证书文件里的内容，做一次HASH求值，得到一个HASH值。</p>\n<p>再接着，用CA的私钥进行加密，这样就完成了数字签名。而用CA的私钥加密后，就生成了类似人体指纹的签名，任何篡改证书的尝试，都会被数字签名发现。</p>\n<p>最后，把数字签名，附在数字证书的末尾，传输回来给服务器。</p>\n<p>接下来，服务器会把这份由数字证书认证机构颁发的公钥证书发给客户端。<br>客户端拿到这个数字证书以后，会去校验证书签名的合法性，先对证书进行SHA256（浏览器的加密算法）得到一个哈希值，然后用证书的公钥对证书的签名进行解密从中取得另一个哈希值，如果这两个哈希值相等，说明证书没有被篡改过，确实是权威机构颁发。</p>\n<p>如果认证通过，就可以取得服务器的公开密钥。</p>\n<p>接下来就可以使用对称加密算法通信了。</p>\n<h3 id=\"扩展：客户端证书\"><a href=\"#扩展：客户端证书\" class=\"headerlink\" title=\"扩展：客户端证书\"></a>扩展：客户端证书</h3><p>HTTPS中不仅可以使用服务器证书，还可以使用客户端证书。以客户端证书进行客户端认证，它的作用与服务器证书是相同的。</p>\n<p>例如，银行的网上银行就采用了客户端证书（网银盾）。在登录网银时不仅要求用户确认输入ID和密码，还会要求用户的客户端证书（网银盾），以确认用户是否从特定的终端访问网银。</p>\n<h2 id=\"HTTPS的安全通信机制\"><a href=\"#HTTPS的安全通信机制\" class=\"headerlink\" title=\"HTTPS的安全通信机制\"></a>HTTPS的安全通信机制</h2><p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https1.png\" alt=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https1.png\"></p>\n<h3 id=\"client-hello\"><a href=\"#client-hello\" class=\"headerlink\" title=\"client_hello\"></a>client_hello</h3><p>这一步中，客户端通过发送<code>client_hello</code>报文开始SSL通信。在请求中，浏览器会带上一些建立连接的必要信息（注意：这一步的信息全都是明文的），包括：</p>\n<ol>\n<li><code>版本</code>: 客户端支持的最高的 TLS 协议版本。从高到低依次为：TLS v1.2, TLS v1.1, TLS v1.0, SSL v3, SSL v2。其中低于 TLS v1.0 的版本基本不再使用，因为 SSL v3 和 SSL v2 都存在漏洞，Google 和 Mozilla 已明确禁用 SSL 协议。</li>\n<li><code>密码套件</code>: 按优先级降序排列的、客户端支持的加密套件列表。每个加密套件会各包含一个认证算法（用于身份验证）、密钥交换算法（用于协商密钥）、对称加密算法（用于消息加密）和信息摘要算法（用于完整性校验）。</li>\n<li><code>压缩方法</code>: 客户端支持的用于压缩消息、降低传输体积的压缩算法列表。</li>\n<li><code>随机数</code>: 一个由客户端生成的随机数，使用 32 位时间戳和一个安全随机数生成器生成的 28 字节随机数组成。这个随机数用于后续<code>Master Key</code>的生成，并防止重放攻击。</li>\n<li><code>会话标识</code>: 一个变长的会话标志。非 0 值意味着客户端希望更新当前已存在的连接的参数或者为此连接创建一个新的连接。0 值表示客户端想在新会话上创建一个新连接。</li>\n<li><code>扩展字段</code>: 包含一些其他的相关参数（比如 SNI）。</li>\n</ol>\n<h3 id=\"server-hello\"><a href=\"#server-hello\" class=\"headerlink\" title=\"server_hello\"></a>server_hello</h3><p>客户端在发出<code>client_hello</code>消息之后，会等待服务器返回<code>server_hello</code>消息，包含和 <code>client_hello</code>相同的参数。一般来说，参数结构如下：</p>\n<ol>\n<li><code>版本</code>: 包含客户端支持的最低版本和服务器支持的最高版本。</li>\n<li><code>密码套件</code>: 包含了服务器从客户端发来的密码套件列表中选择出的将要使用的密码套件。</li>\n<li><code>压缩方法</code>: 包含了服务器从客户端发来的压缩方法列表中选择出的将要使用的压缩方法。</li>\n<li><code>随机数</code>: 由服务器生成的不同于客户端在<code>client_hello</code>中发来的随机数的另一个独立的随机数。</li>\n<li><code>会话标识</code>: 如果客户端发送的会话标识不为 0，服务器会使用与客户端发送的一致的会话标识，否则返回的是服务器生成的一个新的会话标识。</li>\n</ol>\n<h3 id=\"certificate-server-hello-done\"><a href=\"#certificate-server-hello-done\" class=\"headerlink\" title=\"certificate + server_hello _done\"></a>certificate + server_hello _done</h3><p>通常来说，服务器会在<code>certificate</code>消息中发送其自身的公开密钥证书供客户端进行验证。</p>\n<p>最后，服务器发送<code>server_hello_done</code>消息，表明服务器的 hello 相关的消息结束。在发送此消息之后，服务器会等待客户端应答，该消息没有参数。</p>\n<p>在这一步结束之后表明最初阶段的SSL握手协商部分结束。</p>\n<h3 id=\"client-key-change\"><a href=\"#client-key-change\" class=\"headerlink\" title=\"client_key_change\"></a>client_key_change</h3><p>客户端在收到服务器发来的<code>server_hello_done</code>消息之后，会验证服务器提供的证书是否合法，并检查<code>server_hello</code>的各项参数。如果验证通过，则客户端会向服务器发送一条或多条消息。</p>\n<p>然后客户端会发送<code>client_key_exchange</code>报文消息，报文中包含通信加密中使用的一种被称为<code>PreMaster Key</code>的随机密码串，并使用服务器证书中的公钥或者服务器密钥交换消息中的临时 RSA 密钥加密。这个密钥会被用于之后的<code>Master Key</code>的计算。</p>\n<h3 id=\"change-cipher-spec-finished\"><a href=\"#change-cipher-spec-finished\" class=\"headerlink\" title=\"change_cipher_spec + finished\"></a>change_cipher_spec + finished</h3><p>经过以上步骤，客户端和服务器已经可以通过得到的消息计算出<code>Master Key</code>了。从现在开始，客户端和服务器都将开始使用协商好的加密算法、密钥进行通信，在正式传递消息之前会计算<code>Master Key</code>和之前握手过程中收到的所有信息的<code>hash</code>，并通过协商好的加密算法使用 <code>Master Key</code>加密，作为<code>change_cipher_spec</code>消息的内容，接着发送<code>finished</code>消息。服务器在收到客户端发来的<code>change_cipher_spec</code>和<code>finished</code>消息之后，也会计算<code>Master Key</code>并使用协商好的加密算法和之前握手过程中收到的所有信息的<code>hash</code>，发回给客户端用以验证。至此，握手阶段结束，之后就可以交换应用层的内容了。</p>\n<p>服务器和客户端的<code>finished</code>报文交换完毕之后，SSL连接就算建立完成，当然，通信会受到SSL的保护。从此处开始进行应用层协议的通信，即发送HTTP请求。</p>\n<p>至此，整个过程介绍完毕。</p>\n<h2 id=\"实践HTTPS连接的握手过程\"><a href=\"#实践HTTPS连接的握手过程\" class=\"headerlink\" title=\"实践HTTPS连接的握手过程\"></a>实践HTTPS连接的握手过程</h2><p>我们可以使用 curl 命令来简略查看建立 HTTPS 时的握手过程，在命令行中执行：curl -v -I -L <a href=\"https://hzzly.cn\" target=\"_blank\" rel=\"noopener\">https://hzzly.cn</a></p>\n<p>能得到如下的输出：</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/http4.png\" alt=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/http4.png\"></p>\n<p>简单说明一下连接的建立过程：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 表示建立了和 hzzly.cn 服务器 443 端口的连接。</span></span><br><span class=\"line\">Connected to hzzly.cn (39.108.182.125) port 443 (<span class=\"comment\">#0) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端发出 client_hello 消息。</span></span><br><span class=\"line\">TLSv1.2 (OUT), TLS handshake, Client hello (1): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器发出 server_hello 消息。</span></span><br><span class=\"line\">TLSv1.2 (IN), TLS handshake, Server hello (2): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器发出 certificate 消息。</span></span><br><span class=\"line\">TLSv1.2 (IN), TLS handshake, Certificate (11): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器发出 server_key_exchange 消息。</span></span><br><span class=\"line\">TLSv1.2 (IN), TLS handshake, Server key exchange (12): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器发出 server_done 消息。</span></span><br><span class=\"line\">TLSv1.2 (IN), TLS handshake, Server finished (14): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端发出 client_key_exchange 消息。</span></span><br><span class=\"line\">TLSv1.2 (OUT), TLS handshake, Client key exchange (16): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端发出加密后的 client_hello 消息。</span></span><br><span class=\"line\">TLSv1.2 (OUT), TLS change cipher, Client hello (1): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端发出 hello_done 消息。</span></span><br><span class=\"line\">TLSv1.2 (OUT), TLS handshake, Finished (20): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器将加密后的 client_hello 消息发回。</span></span><br><span class=\"line\">TLSv1.2 (IN), TLS change cipher, Client hello (1): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 握手结束。</span></span><br><span class=\"line\">TLSv1.2 (IN), TLS handshake, Finished (20): </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SSL 连接采用 ECDHE-RSA-AES256-GCM-SHA384 密码套件。</span></span><br><span class=\"line\"><span class=\"comment\"># ECDHE 表示密钥交换方法采用椭圆曲线迪菲-赫尔曼交换方法</span></span><br><span class=\"line\"><span class=\"comment\"># RSA 表示密钥交换中使用的签名方式</span></span><br><span class=\"line\"><span class=\"comment\"># AES-256-GCM 表示的是对称加密算法</span></span><br><span class=\"line\"><span class=\"comment\"># SHA-384 表示的是内容完整性校验使用的哈希算法</span></span><br><span class=\"line\">SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 之后的几行包含了证书的内容，包括有效时间、常用名、证书签发机构等。</span></span><br><span class=\"line\">Server certificate: </span><br><span class=\"line\">      <span class=\"comment\"># Common Name 为 hzzly.cn</span></span><br><span class=\"line\">    subject: CN=hzzly.cn</span><br><span class=\"line\">      <span class=\"comment\"># 在此时间之前无效</span></span><br><span class=\"line\">    start date: Aug  2 00:00:00 2019 GMT</span><br><span class=\"line\">      <span class=\"comment\"># 在此时间之后无效</span></span><br><span class=\"line\">    expire date: Aug  1 12:00:00 2020 GMT</span><br><span class=\"line\">      <span class=\"comment\"># 域名和证书的域名匹配</span></span><br><span class=\"line\">    subjectAltName: host <span class=\"string\">\"hzzly.cn\"</span> matched certs <span class=\"string\">\"hzzly.cn\"</span></span><br><span class=\"line\">      <span class=\"comment\"># 签发者是 Encryption</span></span><br><span class=\"line\">    issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=Encryption Everywhere DV TLS CA - G1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>《图解http》</li>\n<li><a href=\"https://juejin.im/post/5a9400fcf265da4e976eb4b9\" target=\"_blank\" rel=\"noopener\">从Chrome源码看HTTPS</a></li>\n</ul>\n","categories":[],"tags":["随笔","https"]},{"title":"动手开发一个自己的项目脚手架","url":"http://yoursite.com/2019/07/19/动手开发一个自己的项目脚手架/","content":"<blockquote>\n<p>前言：随着前端工程化的不断深入，同时 Node 给前端开发带来了很大的改变，促进了前端开发的自动化，越来越多的人选择使用脚手架来从零到一搭建自己的项目。其中最熟悉的就是vue-cli和create-react-app，它们可以帮助我们初始化配置、生成项目结构、自动安装依赖等等，最后我们一行指令即可运行项目开始开发，或者进行项目构建（build）。在实际的开发过程中，我们可能会有自己的特定需求，那么我们就得学会如何开发一个Node命令行工具。</p>\n</blockquote>\n<p>在前面的文章 动手搭建react开发环境系列 中，结尾处我们说到，既然我们的项目结构搭建好了，但不能每次开发都来手动复制项目结构，所以我们就要通过执行命令就生成我们需要的项目结构。</p>\n<p>我们的初步设想是，在指定目录下执行一个命令（假设为create）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hzzly create demo</span><br></pre></td></tr></table></figure></p>\n<p>就会生成一个目录名为 demo 的项目，里面包含有我们所需的基础项目结构。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir hzzly-cli</span><br><span class=\"line\">cd hzzly-cli</span><br><span class=\"line\">mkdir bin lib</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add commander chalk boxen fs-extra inquirer ora update-notifier download-git-repo rimraf</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://github.com/tj/commander.js\" target=\"_blank\" rel=\"noopener\">commander</a> 一款重量轻，表现力和强大的命令行框架</li>\n<li><a href=\"https://github.com/chalk/chalk\" target=\"_blank\" rel=\"noopener\">chalk</a> 用于打印彩色的信息</li>\n<li><a href=\"https://github.com/sindresorhus/boxen\" target=\"_blank\" rel=\"noopener\">boxen</a> 创建小“面板”</li>\n<li><a href=\"https://github.com/SBoudrias/Inquirer.js\" target=\"_blank\" rel=\"noopener\">inquirer</a> 交互式命令行用户界面的集合</li>\n<li><a href=\"https://github.com/sindresorhus/ora\" target=\"_blank\" rel=\"noopener\">ora</a> 用于创建 spinner，添加下载模板 loading 效果</li>\n<li><a href=\"https://github.com/yeoman/update-notifier\" target=\"_blank\" rel=\"noopener\">update-notifier</a> 用于检查包的线上版本与本地版本</li>\n<li><a href=\"https://github.com/flipxfx/download-git-repo\" target=\"_blank\" rel=\"noopener\">download-git-repo</a> 从节点下载并提取git存储库</li>\n</ul>\n<h2 id=\"初探\"><a href=\"#初探\" class=\"headerlink\" title=\"初探\"></a>初探</h2><h3 id=\"1、创建一个用于运行命令的脚本\"><a href=\"#1、创建一个用于运行命令的脚本\" class=\"headerlink\" title=\"1、创建一个用于运行命令的脚本\"></a>1、创建一个用于运行命令的脚本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bin/hzzly.js</span></span><br><span class=\"line\"><span class=\"meta\">#! /usr/bin/env node</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world ~\"</span>);</span><br></pre></td></tr></table></figure>\n<p>执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node bin/hzzly.js</span><br></pre></td></tr></table></figure></p>\n<p>不出意外的话能够看到输出了 hello world ~，当然这不是我们想要的结果，我们是要直接运行 hzzly 命令就能输出 hello world ~</p>\n<blockquote>\n<p>🔥Tip: 主入口文件的最上方添加代码 #! /usr/bin/env node, 表明这是一个可执行的应用</p>\n</blockquote>\n<h3 id=\"2、添加命令\"><a href=\"#2、添加命令\" class=\"headerlink\" title=\"2、添加命令\"></a>2、添加命令</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  \"bin\": &#123;</span><br><span class=\"line\">    \"hzzly\": \"bin/hzzly.js\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们指定 hzzly 命令的执行文件为 bin/hzzly.js。</p>\n<h3 id=\"3、全局运行命令调试\"><a href=\"#3、全局运行命令调试\" class=\"headerlink\" title=\"3、全局运行命令调试\"></a>3、全局运行命令调试</h3><p>在项目目录下运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install . -g</span><br><span class=\"line\">// 或</span><br><span class=\"line\">npm link</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以使用 hzzly 命令了。</p>\n<p>到此，一个本地的 npm 命令行工具就已经成功完成了，接下来我们就来完善具体的功能。</p>\n<h2 id=\"脚手架开发\"><a href=\"#脚手架开发\" class=\"headerlink\" title=\"脚手架开发\"></a>脚手架开发</h2><h3 id=\"1、效果\"><a href=\"#1、效果\" class=\"headerlink\" title=\"1、效果\"></a>1、效果</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: hzzly &lt;<span class=\"built_in\">command</span>&gt; [options] &lt;app-name&gt; [folder-name]</span><br><span class=\"line\"> </span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -v, --version  output the version number</span><br><span class=\"line\">  -c, --<span class=\"built_in\">clone</span>    use git <span class=\"built_in\">clone</span></span><br><span class=\"line\">  -h, --<span class=\"built_in\">help</span>     output usage information</span><br><span class=\"line\"> </span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  setup          run remote setup commands</span><br><span class=\"line\">  create         generate a new project from a react template</span><br><span class=\"line\">  check          check <span class=\"built_in\">test</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Examples:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># create a new react project</span></span><br><span class=\"line\">  $ hzzly create demo</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、准备项目模版\"><a href=\"#2、准备项目模版\" class=\"headerlink\" title=\"2、准备项目模版\"></a>2、准备项目模版</h3><p>脚手架是帮助我们快速生成一套既定的项目架构、文件、配置，而最常见的做法的就是先写好一套项目框架模版，等到脚手架要生成项目时，则将这套模版拷贝到目标目录下。</p>\n<ul>\n<li>一种是直接放在本地</li>\n<li>另一种是托管在 github 上</li>\n</ul>\n<p>这里我们选择托管在 github，然后通过<code>download-git-repo</code>下载到指定目录。我准备了一个<a href=\"https://github.com/hzzly/webpack-template\" target=\"_blank\" rel=\"noopener\">项目模版</a>，之后就会用它来作为脚手架生成的项目结构。</p>\n<h3 id=\"3、初始Command\"><a href=\"#3、初始Command\" class=\"headerlink\" title=\"3、初始Command\"></a>3、初始Command</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bin/hzzly.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">\"chalk\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">'../package.json'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">program</span><br><span class=\"line\">  .version(pkg.version)</span><br><span class=\"line\">  .usage(<span class=\"string\">'&lt;command&gt; [options] &lt;app-name&gt; [folder-name]'</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"-c, --clone\"</span>, <span class=\"string\">\"use git clone\"</span>)</span><br><span class=\"line\">  .on(<span class=\"string\">\"--help\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Examples:\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">      chalk.gray(<span class=\"string\">\"  # create a new react project\"</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"  $ hzzly create demo\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">program.parse(process.argv)</span><br></pre></td></tr></table></figure>\n<p>这样，当我们执行 <code>hzzly</code> 命令时就会有如下效果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: hzzly &lt;<span class=\"built_in\">command</span>&gt; [options] &lt;app-name&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version  output the version number</span><br><span class=\"line\">  -c, --<span class=\"built_in\">clone</span>    use git <span class=\"built_in\">clone</span></span><br><span class=\"line\">  -h, --<span class=\"built_in\">help</span>     output usage information</span><br><span class=\"line\"> </span><br><span class=\"line\">Examples:</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># create a new react project</span></span><br><span class=\"line\">  $ hzzly create demo</span><br></pre></td></tr></table></figure></p>\n<p>接下来就可以去定义我们的 Commands 了。</p>\n<h3 id=\"4、定义Command命令\"><a href=\"#4、定义Command命令\" class=\"headerlink\" title=\"4、定义Command命令\"></a>4、定义Command命令</h3><p>在 <code>program.parse(process.argv)</code> 前面去定义我们的command命令</p>\n<p>为什么要在它前面去定义命令呢？</p>\n<blockquote>\n<p>parse 用于解析process.argv，设置options以及触发commands</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bin/hzzly.js</span></span><br><span class=\"line\"><span class=\"comment\">// 同上...</span></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">'create'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'generate a new project from a template'</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"-c, --clone\"</span>, <span class=\"string\">\"use git clone\"</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">appName, option</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得了参数，可以在这里做响应的业务处理</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`指令 create 后面跟的参数值: <span class=\"subst\">$&#123;appName&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(option);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 同上</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>command 定义命令行指令</li>\n<li>description 命令描述，它会在help里面展示</li>\n<li>option 定义参数。它接受四个参数，在第一个参数中，它可输入短名字 -a和长名字–name ,使用 | 或者 , 分隔，在命令行里使用时，这两个是等价的，区别是后者可以在程序里通过回调获取到；第二个为描述, 会在 help 信息里展示出来；第三个参数为回调函数，他接收的参数为一个string，有时候我们需要一个命令行创建多个模块，就需要一个回调来处理；第四个参数为默认值</li>\n<li>action 注册一个 callback 函数</li>\n</ul>\n<p>接下来就是处理生成项目模板的逻辑了，继续。</p>\n<h3 id=\"5、处理生成项目结构逻辑\"><a href=\"#5、处理生成项目结构逻辑\" class=\"headerlink\" title=\"5、处理生成项目结构逻辑\"></a>5、处理生成项目结构逻辑</h3><h4 id=\"5-1、思路\"><a href=\"#5-1、思路\" class=\"headerlink\" title=\"5.1、思路\"></a>5.1、思路</h4><ul>\n<li>1、输入 <code>vue create</code> 提示输入项目文件夹名称</li>\n<li>2、输入 <code>vue create .</code> 表示在当前目录构建项目，但要给个提示（是否确定要在所在目录生成项目，其它文件将被删除）</li>\n<li>3、输入 <code>vue create app</code> 表示在当前目录生成一个 <code>app</code> 的目录并在此目录构建项目，当有相同的目录时也要提示（当前目录已存在，是否继续构建）</li>\n</ul>\n<p>好了，思路有了就 so easy 了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bin/hzzly.js</span></span><br><span class=\"line\"><span class=\"comment\">// 同上...</span></span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">'create'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'generate a new project from a template'</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"-c, --clone\"</span>, <span class=\"string\">\"use git clone\"</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">appName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// // 获得了参数，可以在这里做响应的业务处理</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(`指令 create 后面跟的参数值: $&#123;appName&#125;`);</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有传appName</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> appName === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否有相同 appName 目录</span></span><br><span class=\"line\">      checkAppName(appName);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有传appName的话提示用户输入</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> opts = [&#123;</span><br><span class=\"line\">        type: <span class=\"string\">'input'</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'appName'</span>,</span><br><span class=\"line\">        message: <span class=\"string\">'Please enter the app name for your project：'</span>,</span><br><span class=\"line\">        validate: <span class=\"function\"><span class=\"params\">appName</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!appName) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'⚠️  app name must not be null！'</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;];</span><br><span class=\"line\">      <span class=\"comment\">// inquirer命令行交互工具</span></span><br><span class=\"line\">      inquirer.prompt(opts).then(<span class=\"function\">(<span class=\"params\">&#123; appName &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (appName) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 输入完之后判断是否有相同 appName 目录</span></span><br><span class=\"line\">          checkAppName(appName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 同上</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2、checkAppName\"><a href=\"#5-2、checkAppName\" class=\"headerlink\" title=\"5.2、checkAppName\"></a>5.2、checkAppName</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理项目名称</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAppName</span>(<span class=\"params\">appName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取绝对路径</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> to = path.resolve(appName);</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否在当前目录构建</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (appName === <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前目录是否为空</span></span><br><span class=\"line\">    checkEmpty(to)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (checkExist(to)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传入的 appName 在当前目录已存在</span></span><br><span class=\"line\">    inquirer.prompt([&#123;</span><br><span class=\"line\">      type: <span class=\"string\">'confirm'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'Target directory exists. Continue?'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'ok'</span>,</span><br><span class=\"line\">    &#125;]).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (answers.ok) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 回答是的话删除已存在的目录并下载模板构建项目</span></span><br><span class=\"line\">        rm(appName)</span><br><span class=\"line\">        downloadAndGenerate(REACT_TPL, to, appName)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果以上情况都不是就直接下载模板构建项目</span></span><br><span class=\"line\">    downloadAndGenerate(REACT_TPL, to, appName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3、checkEmpty\"><a href=\"#5-3、checkEmpty\" class=\"headerlink\" title=\"5.3、checkEmpty\"></a>5.3、checkEmpty</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断目录是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkEmpty</span>(<span class=\"params\">path, appName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dirFiles = fs.readdirSync(path);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dirFiles.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    inquirer.prompt([&#123;</span><br><span class=\"line\">      type: <span class=\"string\">'confirm'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'ok'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'Target directory is not empty and will overwritten. Continue?'</span>,</span><br><span class=\"line\">    &#125;]).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (answers.ok) &#123;</span><br><span class=\"line\">        fs.emptyDirSync(path)</span><br><span class=\"line\">        downloadAndGenerate(REACT_TPL, path, appName)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    downloadAndGenerate(REACT_TPL, path, appName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-4、checkExist\"><a href=\"#5-4、checkExist\" class=\"headerlink\" title=\"5.4、checkExist\"></a>5.4、checkExist</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断目录是否已存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkExist</span>(<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fs.pathExistsSync(path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-5、downloadAndGenerate\"><a href=\"#5-5、downloadAndGenerate\" class=\"headerlink\" title=\"5.5、downloadAndGenerate\"></a>5.5、downloadAndGenerate</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载模板构建项目</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadAndGenerate</span>(<span class=\"params\">template, tmp</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 生成下载loading</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">\"downloading template\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> clone = program.clone || <span class=\"literal\">false</span>;</span><br><span class=\"line\">  spinner.start();</span><br><span class=\"line\">  download(template, tmp, &#123; clone &#125;, err =&gt; &#123;</span><br><span class=\"line\">    spinner.stop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(</span><br><span class=\"line\">        chalk.red(</span><br><span class=\"line\">        <span class=\"string\">\"Failed to download repo \"</span> + template + <span class=\"string\">\": \"</span> + err.message.trim()</span><br><span class=\"line\">        )</span><br><span class=\"line\">      );</span><br><span class=\"line\">      process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 下载完成后提示用户操作</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`To get started:\\n\\n  cd <span class=\"subst\">$&#123;tmp&#125;</span>\\n  npm install\\n  npm run dev\\n\\nDocumentation can be found at https://github.com/hzzly`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这，开发阶段就可告一段落了，我们已经可以通过 <code>hzzly create &lt;app-name&gt;</code> 命令行构建项目目录的步骤，接下来就是发布到npm给其他人使用。</p>\n<h2 id=\"发布到npm\"><a href=\"#发布到npm\" class=\"headerlink\" title=\"发布到npm\"></a>发布到npm</h2><p>到目前为止，我们开发的 hzzly 还是在本地的，现在就该将其发布到 <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">npm</a> 上了。</p>\n<p>1、首先 <a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"noopener\">注册一个账号</a>。</p>\n<p>2、在终端执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n<p>输入用户名、密码和邮箱便可将本地机器与 npm 连接起来了。</p>\n<p>3、修改package.json<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  \"files\": [</span><br><span class=\"line\">    <span class=\"string\">\"bin/\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加 files 属性指定哪些文件提交到 npm，这样可以减少包的大小。</p>\n<p>4、发布<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更新包\"><a href=\"#更新包\" class=\"headerlink\" title=\"更新包\"></a>更新包</h3><p>首先修改 package.json 配置文件中的 version 字段，比如这里我从 1.0.0 改成 1.0.1（只能大于当前版本），然后修改脚手架，最后再次<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h3 id=\"1、添加小面板\"><a href=\"#1、添加小面板\" class=\"headerlink\" title=\"1、添加小面板\"></a>1、添加小面板</h3><p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/cli/hzzly-cli2.png\" alt=\"boxen\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> boxen = <span class=\"built_in\">require</span>(<span class=\"string\">'boxen'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> BOXEN_OPTS = &#123;</span><br><span class=\"line\">  padding: <span class=\"number\">1</span>,</span><br><span class=\"line\">  margin: <span class=\"number\">1</span>,</span><br><span class=\"line\">  align: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">  borderColor: <span class=\"string\">'#678491'</span>,</span><br><span class=\"line\">  borderStyle: <span class=\"string\">'round'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializing</span>(<span class=\"params\">pkg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> messages = [];</span><br><span class=\"line\">  messages.push(</span><br><span class=\"line\">    <span class=\"string\">`🔥  Welcome to use hzzly-cli <span class=\"subst\">$&#123;chalk.grey(<span class=\"string\">`v<span class=\"subst\">$&#123;pkg.version&#125;</span>`</span>)&#125;</span>`</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  messages.push(</span><br><span class=\"line\">    chalk.grey(<span class=\"string\">'https://github.com/hzzly/hzzly-cli'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  messages.push(</span><br><span class=\"line\">    chalk.grey(<span class=\"string\">'https://www.npmjs.com/package/hzzly-cli'</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(boxen(messages.join(<span class=\"string\">'\\n'</span>), BOXEN_OPTS));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">program</span><br><span class=\"line\">  .command(<span class=\"string\">'create'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'generate a new project from a template'</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"-c, --clone\"</span>, <span class=\"string\">\"use git clone\"</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">appName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用小面板</span></span><br><span class=\"line\">    initializing(pkg)</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、检查包的线上版本与本地版本\"><a href=\"#2、检查包的线上版本与本地版本\" class=\"headerlink\" title=\"2、检查包的线上版本与本地版本\"></a>2、检查包的线上版本与本地版本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> updateNotifier = <span class=\"built_in\">require</span>(<span class=\"string\">'update-notifier'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkVersion</span>(<span class=\"params\">pkg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'🛠️  Checking your hzzly-cli version...'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">const</span> notifier = updateNotifier(&#123;</span><br><span class=\"line\">    pkg,</span><br><span class=\"line\">    updateCheckInterval: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">const</span> update = notifier.update;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (update) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> messages = [];</span><br><span class=\"line\">    messages.push(<span class=\"string\">`Update available <span class=\"subst\">$&#123;chalk.grey(update.current)&#125;</span> → <span class=\"subst\">$&#123;chalk.green(update.latest)&#125;</span>`</span>)</span><br><span class=\"line\">    messages.push(<span class=\"string\">`Run <span class=\"subst\">$&#123;chalk.cyan(<span class=\"string\">`npm i -g <span class=\"subst\">$&#123;pkg.name&#125;</span>`</span>)&#125;</span> to update`</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(boxen(messages.join(<span class=\"string\">'\\n'</span>), &#123; ...BOXEN_OPTS, <span class=\"attr\">borderColor</span>: <span class=\"string\">'#fae191'</span> &#125;));</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'🛠️  Finish checking your hzzly-cli. CAUTION ↑↑'</span>, <span class=\"string\">'⚠️'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'🛠️  Finish checking your hzzly-cli. OK'</span>, chalk.green(<span class=\"string\">'✔'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializing</span>(<span class=\"params\">pkg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  checkVersion(pkg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、README-md添加徽标\"><a href=\"#3、README-md添加徽标\" class=\"headerlink\" title=\"3、README.md添加徽标\"></a>3、README.md添加徽标</h3><p>推荐自动生成徽标网站 <a href=\"https://shields.io/\" target=\"_blank\" rel=\"noopener\">shields.io</a></p>\n<p><img src=\"https://img.shields.io/npm/v/hzzly-cli.svg\" alt=\"NPM version\"></p>\n<p><img src=\"https://img.shields.io/npm/l/hzzly-cli.svg\" alt=\"MIT Licence\"></p>\n<h2 id=\"深入inquirer-js\"><a href=\"#深入inquirer-js\" class=\"headerlink\" title=\"深入inquirer.js\"></a>深入inquirer.js</h2><p>创建脚手架的时候我们会发现很多脚手架都需要我们和命令行频繁交互，就像我们使用npm init的时候一样，那么是如何实现和命令行交互的呢？此时inquirer.js闪亮登场。</p>\n<h3 id=\"1、基本用法\"><a href=\"#1、基本用法\" class=\"headerlink\" title=\"1、基本用法\"></a>1、基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">'inquirer'</span>);</span><br><span class=\"line\">inquirer.prompt([<span class=\"comment\">/* opts */</span>])</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">answers</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use answers for... whatever!! </span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、参数详解\"><a href=\"#2、参数详解\" class=\"headerlink\" title=\"2、参数详解\"></a>2、参数详解</h3><ul>\n<li>type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；</li>\n<li>name: 存储当前问题回答的变量；</li>\n<li>message：问题的描述；</li>\n<li>default：默认值；</li>\n<li>choices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；</li>\n<li>validate：对用户的回答进行校验；</li>\n<li>filter：对用户的回答进行过滤处理，返回处理后的值；</li>\n<li>transformer：对用户回答的显示效果进行处理(如：修改回答的字体或背景颜色)，但不会影响最终的答案的内容；</li>\n<li>when：根据前面问题的回答，判断当前问题是否需要被回答；</li>\n<li>pageSize：修改某些type类型下的渲染行数；</li>\n<li>prefix：修改message默认前缀；</li>\n<li>suffix：修改message默认后缀。</li>\n</ul>\n<h3 id=\"3、实例\"><a href=\"#3、实例\" class=\"headerlink\" title=\"3、实例\"></a>3、实例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> opts = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'input'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'name'</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'input'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'手机号'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'phone'</span>,</span><br><span class=\"line\">    validate: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val.match(<span class=\"regexp\">/\\d&#123;11&#125;/g</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'请输入11位数字'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'confirm'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'是否参加本次考核？'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'assess'</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'confirm'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'是否同意本次考核须知？'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'notice'</span>,</span><br><span class=\"line\">    when: <span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> answers.assess</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'list'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'欢迎来到本次考核，请选择语言：'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'eductionBg'</span>,</span><br><span class=\"line\">    choices: [</span><br><span class=\"line\">      <span class=\"string\">\"js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"java\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"php\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    filter: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将选择的内容后面加语言</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> val + <span class=\"string\">'语言'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'rawlist'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'请选择你喜欢逛的社区：'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'game'</span>,</span><br><span class=\"line\">    choices: [</span><br><span class=\"line\">      <span class=\"string\">\"掘金\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"github\"</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'expand'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'请选择你喜欢的水果：'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'fruit'</span>,</span><br><span class=\"line\">    choices: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        key: <span class=\"string\">\"a\"</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Apple\"</span>,</span><br><span class=\"line\">        value: <span class=\"string\">\"apple\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        key: <span class=\"string\">\"O\"</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Orange\"</span>,</span><br><span class=\"line\">        value: <span class=\"string\">\"orange\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        key: <span class=\"string\">\"p\"</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Pear\"</span>,</span><br><span class=\"line\">        value: <span class=\"string\">\"pear\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'checkbox'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'请选择你喜欢的颜色：'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'color'</span>,</span><br><span class=\"line\">    choices: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"red\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"keyword\">new</span> inquirer.Separator(), <span class=\"comment\">// 添加分隔符</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"blur\"</span>,</span><br><span class=\"line\">        checked: <span class=\"literal\">true</span> <span class=\"comment\">// 默认选中</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"green\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"keyword\">new</span> inquirer.Separator(<span class=\"string\">\"--- 分隔符 ---\"</span>), <span class=\"comment\">// 自定义分隔符</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'password'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'请输入你的密码：'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'pwd'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\">inquirer.prompt(opts).then(<span class=\"function\"><span class=\"params\">answers</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(answers);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/cli/hzzly-cli.png\" alt=\"inquirer\"></p>\n<p>代码已上传至我的<a href=\"https://github.com/hzzly/hzzly-cli\" target=\"_blank\" rel=\"noopener\">GitHub</a>，欢迎 Star、Fork</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p><a href=\"https://segmentfault.com/a/1190000002918295\" target=\"_blank\" rel=\"noopener\">Nodejs 制作命令行工具</a></p>\n<p><a href=\"https://juejin.im/post/5cc160b2f265da03452bdf5b\" target=\"_blank\" rel=\"noopener\">用一次就会爱上的cli工具开发</a></p>\n<p><a href=\"https://github.com/tj/commander.js\" target=\"_blank\" rel=\"noopener\">commander.js</a></p>\n","categories":[],"tags":["随笔","脚手架"]},{"title":"动手搭建react开发环境三","url":"http://yoursite.com/2019/07/15/动手搭建react开发环境三/","content":"<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><ul>\n<li>webpack 4</li>\n<li>Babel 7</li>\n</ul>\n<blockquote>\n<p>本篇主要使用针对代码或者开发效率进行优化</p>\n</blockquote>\n<h2 id=\"1、ESLint规范\"><a href=\"#1、ESLint规范\" class=\"headerlink\" title=\"1、ESLint规范\"></a>1、ESLint规范</h2><blockquote>\n<p>规范代码有利于团队协作</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add eslint babel-eslint eslint-config-airbnb eslint-config-standard eslint-loader eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-promise eslint-plugin-react eslint-plugin-standard -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"eslintrc\"><a href=\"#eslintrc\" class=\"headerlink\" title=\".eslintrc\"></a>.eslintrc</h3><p>新建.eslintrc文件（配置ESLint）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"babel-eslint\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es6\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"parserOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ecmaVersion\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"extends\"</span>: [<span class=\"string\">\"airbnb\"</span>, <span class=\"string\">\"prettier\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"generator-star-spacing\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"consistent-return\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"react/forbid-prop-types\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"react/jsx-filename-extension\"</span>: [<span class=\"number\">1</span>, &#123; <span class=\"attr\">\"extensions\"</span>: [<span class=\"string\">\".js\"</span>] &#125;],</span><br><span class=\"line\">    <span class=\"attr\">\"global-require\"</span>: [<span class=\"number\">1</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"import/prefer-default-export\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"react/jsx-no-bind\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"react/prop-types\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"react/prefer-stateless-function\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"react/jsx-wrap-multilines\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"declaration\"</span>: <span class=\"string\">\"parens-new-line\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"assignment\"</span>: <span class=\"string\">\"parens-new-line\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"return\"</span>: <span class=\"string\">\"parens-new-line\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"arrow\"</span>: <span class=\"string\">\"parens-new-line\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"condition\"</span>: <span class=\"string\">\"parens-new-line\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"logical\"</span>: <span class=\"string\">\"parens-new-line\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"prop\"</span>: <span class=\"string\">\"ignore\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"no-else-return\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"no-restricted-syntax\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"import/no-extraneous-dependencies\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"no-use-before-define\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"jsx-a11y/no-static-element-interactions\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"jsx-a11y/no-noninteractive-element-interactions\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"jsx-a11y/click-events-have-key-events\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"jsx-a11y/anchor-is-valid\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"no-nested-ternary\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"arrow-body-style\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"linebreak-style\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"unix\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"import/extensions\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"no-bitwise\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"no-cond-assign\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"import/no-unresolved\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"comma-dangle\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"arrays\"</span>: <span class=\"string\">\"always-multiline\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"objects\"</span>: <span class=\"string\">\"always-multiline\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"imports\"</span>: <span class=\"string\">\"always-multiline\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"exports\"</span>: <span class=\"string\">\"always-multiline\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"functions\"</span>: <span class=\"string\">\"ignore\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"object-curly-newline\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"function-paren-newline\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"no-restricted-globals\"</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"require-yield\"</span>: [<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"eslintignore\"><a href=\"#eslintignore\" class=\"headerlink\" title=\".eslintignore\"></a>.eslintignore</h3><p>新建.eslintignore文件（ESLint忽略特定的文件或目录）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build<span class=\"comment\">/*.js</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"编译前置检验\"><a href=\"#编译前置检验\" class=\"headerlink\" title=\"编译前置检验\"></a>编译前置检验</h3><p>在执行编译之前去执行eslint-loader检查代码规范，有报错就不执行编译</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        enforce: <span class=\"string\">'pre'</span>,</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、编辑器配置\"><a href=\"#2、编辑器配置\" class=\"headerlink\" title=\"2、编辑器配置\"></a>2、编辑器配置</h2><p>EditorConfig包含一个用于定义代码格式的文件和一批编辑器插件，这些插件是让编辑器读取配置文件并以此来格式化代码。</p>\n<h3 id=\"editorconfig\"><a href=\"#editorconfig\" class=\"headerlink\" title=\".editorconfig\"></a>.editorconfig</h3><p>新建.editorconfig文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># http://editorconfig.org</span><br><span class=\"line\">root = <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[*]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = <span class=\"number\">2</span></span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">charset = utf<span class=\"number\">-8</span></span><br><span class=\"line\">trim_trailing_whitespace = <span class=\"literal\">true</span></span><br><span class=\"line\">insert_final_newline = <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[Makefile]</span><br><span class=\"line\">indent_style = tab</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、cross-env\"><a href=\"#3、cross-env\" class=\"headerlink\" title=\"3、cross-env\"></a>3、cross-env</h2><p>因为windows不支持NODE_ENV=development的设置环境变量的方式，所以使用我们可以cross-env设置跨平台的环境变量的脚本。</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add cross-env -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"build\": \"cross-env NODE_ENV=production webpack --config ./build/webpack.config.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以使用 <code>process.env.NODE_ENV</code> 来获取环境变量继续操作了。</p>\n<h2 id=\"4、代码自动格式化\"><a href=\"#4、代码自动格式化\" class=\"headerlink\" title=\"4、代码自动格式化\"></a>4、代码自动格式化</h2><p>使用husky, prettier, eslint在代码提交时自动格式化，并检查代码。</p>\n<ul>\n<li>husky。一个git钩子工具，这里主要用pre-commit钩子。通俗点讲就是husky可以在你commit之前帮你做一些事情。</li>\n<li>prettier。 一个很流行的代码格式化工具，你很容易在编辑器找到实现它的各种插件，像vscode,atom,webstom都可以找到。这里用它在代码提交前做代码格式化。</li>\n<li>eslint。 代码检查工具。eslint也可以负责一部分代码格式检查的工作，让其负责代码错误检查。</li>\n<li>lint-staged。在你提交的文件中，执行自定义的指令。</li>\n</ul>\n<h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"安装eslint\"><a href=\"#安装eslint\" class=\"headerlink\" title=\"安装eslint\"></a>安装eslint</h4><p>如果上面已经安装过了就不用再次安装了，没有安装就按照上面 <code>ESLint规范</code> 步骤安装好。</p>\n<h4 id=\"安装stylelint\"><a href=\"#安装stylelint\" class=\"headerlink\" title=\"安装stylelint\"></a>安装stylelint</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add stylelint stylelint-config-prettier stylelint-config-standard -D</span><br></pre></td></tr></table></figure>\n<p>新建.stylelintrc文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;extends&quot;: [&quot;stylelint-config-standard&quot;, &quot;stylelint-config-prettier&quot;],</span><br><span class=\"line\">  &quot;rules&quot;: &#123;</span><br><span class=\"line\">    &quot;selector-pseudo-class-no-unknown&quot;: null,</span><br><span class=\"line\">    &quot;shorthand-property-no-redundant-values&quot;: null,</span><br><span class=\"line\">    &quot;at-rule-empty-line-before&quot;: null,</span><br><span class=\"line\">    &quot;at-rule-name-space-after&quot;: null,</span><br><span class=\"line\">    &quot;comment-empty-line-before&quot;: null,</span><br><span class=\"line\">    &quot;declaration-bang-space-before&quot;: null,</span><br><span class=\"line\">    &quot;declaration-empty-line-before&quot;: null,</span><br><span class=\"line\">    &quot;function-comma-newline-after&quot;: null,</span><br><span class=\"line\">    &quot;function-name-case&quot;: null,</span><br><span class=\"line\">    &quot;function-parentheses-newline-inside&quot;: null,</span><br><span class=\"line\">    &quot;function-max-empty-lines&quot;: null,</span><br><span class=\"line\">    &quot;function-whitespace-after&quot;: null,</span><br><span class=\"line\">    &quot;number-leading-zero&quot;: null,</span><br><span class=\"line\">    &quot;number-no-trailing-zeros&quot;: null,</span><br><span class=\"line\">    &quot;rule-empty-line-before&quot;: null,</span><br><span class=\"line\">    &quot;selector-combinator-space-after&quot;: null,</span><br><span class=\"line\">    &quot;selector-descendant-combinator-no-non-space&quot;: null,</span><br><span class=\"line\">    &quot;selector-list-comma-newline-after&quot;: null,</span><br><span class=\"line\">    &quot;selector-pseudo-element-colon-notation&quot;: null,</span><br><span class=\"line\">    &quot;unit-no-unknown&quot;: null,</span><br><span class=\"line\">    &quot;no-descending-specificity&quot;: null,</span><br><span class=\"line\">    &quot;value-list-max-empty-lines&quot;: null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装prettier\"><a href=\"#安装prettier\" class=\"headerlink\" title=\"安装prettier\"></a>安装prettier</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add prettier eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装husky，lint-staged\"><a href=\"#安装husky，lint-staged\" class=\"headerlink\" title=\"安装husky，lint-staged\"></a>安装husky，lint-staged</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add husky lint-staged pretty-quick -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"prettier配置\"><a href=\"#prettier配置\" class=\"headerlink\" title=\"prettier配置\"></a>prettier配置</h3><p>在eslintrc.json修改如下配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"extends\"</span>: [<span class=\"string\">\"airbnb\"</span>, <span class=\"string\">\"prettier\"</span>],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建.prettierrc文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;singleQuote&quot;: true,</span><br><span class=\"line\">  &quot;trailingComma&quot;: &quot;es5&quot;,</span><br><span class=\"line\">  &quot;printWidth&quot;: 100,</span><br><span class=\"line\">  &quot;overrides&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;files&quot;: &quot;.prettierrc&quot;,</span><br><span class=\"line\">      &quot;options&quot;: &#123; &quot;parser&quot;: &quot;json&quot; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置.eslintignore文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build<span class=\"comment\">/*.js</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"husky钩子配置\"><a href=\"#husky钩子配置\" class=\"headerlink\" title=\"husky钩子配置\"></a>husky钩子配置</h3><p>husky会在你提交前，调用pre-commit钩子，执行lint-staged，如果代码不符合prettier配置的规则，会进行格式化；然后再用eslint的规则进行检查，如果有不符合规则且无法自动修复的，就会停止此次提交。如果都通过了就会讲代码添加到stage，然后commit。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  \"scripts\": &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    \"lint-staged\": \"lint-staged\",</span><br><span class=\"line\">    \"lint-staged:js\": \"eslint --ext .js --fix\",</span><br><span class=\"line\">    \"prettier\": \"prettier --write ./src/**/**/**/*\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"lint-staged\": &#123;</span><br><span class=\"line\">    \"linters\": &#123;</span><br><span class=\"line\">      \"**/*.&#123;js,jsx,scss&#125;\": [</span><br><span class=\"line\">        \"prettier --write\",</span><br><span class=\"line\">        <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      \"**/*.&#123;js,jsx&#125;\": \"npm run lint-staged:js\",</span><br><span class=\"line\">      \"**/*.scss\": \"stylelint --syntax=scss\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"ignore\": [</span><br><span class=\"line\">      <span class=\"string\">\"**/dist/public/*\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，我们的react开发环境对于打包、代码规范以及提升开发效率的一些配置我们都具备了，可以开心的写我们的react了。接下来我们就可以把这些配置单独完善成一个库，通过我们的 cli 脚手架拉取直接基于它来开发，Let’s go脚手架开发…</p>\n","categories":[],"tags":["随笔","react","webpack"]},{"title":"动手搭建react开发环境二","url":"http://yoursite.com/2019/07/12/动手搭建react开发环境二/","content":"<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><ul>\n<li>webpack 4</li>\n<li>Babel 7</li>\n</ul>\n<blockquote>\n<p>本篇主要使用针对上篇的webpack配置进行优化</p>\n</blockquote>\n<h2 id=\"webpack优化\"><a href=\"#webpack优化\" class=\"headerlink\" title=\"webpack优化\"></a>webpack优化</h2><h3 id=\"1、抽取css（MiniCssExtractPlugin）\"><a href=\"#1、抽取css（MiniCssExtractPlugin）\" class=\"headerlink\" title=\"1、抽取css（MiniCssExtractPlugin）\"></a>1、抽取css（MiniCssExtractPlugin）</h3><p>为每个引入 CSS 的 JS 文件创建一个 CSS 文件，提高首页加载速度</p>\n<ul>\n<li>把 style-loader 替换成 MiniCssExtractPlugin.loader</li>\n<li>新增 plugins</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(sc|sa|c)ss$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"comment\">// 'style-loader',</span></span><br><span class=\"line\">          MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          <span class=\"comment\">// ...同上</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash].css'</span>,</span><br><span class=\"line\">      chunkFilename: <span class=\"string\">'[id].[hash].css'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、压缩CSS（OptimizeCssAssetsWebpackPlugin）\"><a href=\"#2、压缩CSS（OptimizeCssAssetsWebpackPlugin）\" class=\"headerlink\" title=\"2、压缩CSS（OptimizeCssAssetsWebpackPlugin）\"></a>2、压缩CSS（OptimizeCssAssetsWebpackPlugin）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCssAssetsWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、压缩JS\"><a href=\"#3、压缩JS\" class=\"headerlink\" title=\"3、压缩JS\"></a>3、压缩JS</h3><p>webpack 4只要在生产模式下， 代码就会自动压缩<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode: <span class=\"string\">'production'</span>,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4、代码分割（SplitChunksPlugin）\"><a href=\"#4、代码分割（SplitChunksPlugin）\" class=\"headerlink\" title=\"4、代码分割（SplitChunksPlugin）\"></a>4、代码分割（SplitChunksPlugin）</h3><p>代码分割，单独打包，可以有效避免所有页面只生成一个js文件，首屏加载很慢的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>,   <span class=\"comment\">// include all types of chunks</span></span><br><span class=\"line\">      <span class=\"comment\">// minSize: 30000,   // 引入的库大于30kb时才会做代码分割</span></span><br><span class=\"line\">      <span class=\"comment\">// minChunks: 1,     // 一个模块至少被用了1次才会被分割</span></span><br><span class=\"line\">      <span class=\"comment\">// maxAsyncRequests: 5,     // 同时异步加载的模块数最多是5个，如果超过5个则不做代码分割</span></span><br><span class=\"line\">      <span class=\"comment\">// maxInitialRequests: 3,   // 入口文件进行加载时，引入的库最多分割出3个js文件</span></span><br><span class=\"line\">      <span class=\"comment\">// automaticNameDelimiter: '~',  // 生成文件名的文件链接符</span></span><br><span class=\"line\">      <span class=\"comment\">// name: true,   // 开启自定义名称效果</span></span><br><span class=\"line\">      <span class=\"comment\">// cacheGroups: &#123;  // 判断分割出的代码放到那里去</span></span><br><span class=\"line\">      <span class=\"comment\">//   vendors: &#123;   // 配合chunks：‘all’使用，表示如果引入的库是在node-modules中，那就会把这个库分割出来并起名为vendors.js</span></span><br><span class=\"line\">      <span class=\"comment\">//     test: /[\\/]node_modules[\\/]/,</span></span><br><span class=\"line\">      <span class=\"comment\">//     priority: -10,</span></span><br><span class=\"line\">      <span class=\"comment\">//     filename: 'vendors.js'</span></span><br><span class=\"line\">      <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   default: &#123;  // 为非node-modules库中分割出的代码设置默认存放名称</span></span><br><span class=\"line\">      <span class=\"comment\">//     priority: -20,</span></span><br><span class=\"line\">      <span class=\"comment\">//     reuseExistingChunk: true, // 避免被重复打包分割</span></span><br><span class=\"line\">      <span class=\"comment\">//     filename: 'common.js'</span></span><br><span class=\"line\">      <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、配置全局变量\"><a href=\"#5、配置全局变量\" class=\"headerlink\" title=\"5、配置全局变量\"></a>5、配置全局变量</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'development'</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>🔥Tip1 问题：当用 DefinePlugin 来配置全局变量时，只给依赖中注入了环境变量，也就是src文件夹下面的和依赖的模块。当我们在webpack配置文件中去取 process.env.NODE_ENV 依然是 undefined。</p>\n<blockquote>\n<p>解决：在package.json命令中注入<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"webpack-dev-server NODE_ENV=development --config ./build/webpack.config.js\",</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"6、CSS-Tree-Shaking\"><a href=\"#6、CSS-Tree-Shaking\" class=\"headerlink\" title=\"6、CSS Tree Shaking\"></a>6、CSS Tree Shaking</h3><p>去除项目代码中用不到的 CSS 样式，仅保留被使用的样式代码</p>\n<p>🔥Tip2 问题：当使用 CSS Tree Shaking 的时候，需要把 css-modules 关闭，不然 css 会被全部清除掉。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add glob-all purify-css purifycss-webpack -D</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PurifyCSS = <span class=\"built_in\">require</span>(<span class=\"string\">\"purifycss-webpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">\"glob-all\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> PurifyCSS(&#123;</span><br><span class=\"line\">      paths: glob.sync([</span><br><span class=\"line\">        <span class=\"comment\">// 要做CSS Tree Shaking的路径文件</span></span><br><span class=\"line\">        path.resolve(__dirname, <span class=\"string\">\"../public/*.html\"</span>), <span class=\"comment\">// 请注意，我们同样需要对 html 文件进行 tree shaking</span></span><br><span class=\"line\">        path.resolve(__dirname, <span class=\"string\">\"../src/*.js\"</span>)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、JS-Tree-Shaking\"><a href=\"#7、JS-Tree-Shaking\" class=\"headerlink\" title=\"7、JS Tree Shaking\"></a>7、JS Tree Shaking</h3><p>清除到代码中无用的js代码，只支持import方式引入，不支持commonjs的方式引入</p>\n<p>webpack 4只要在生产模式下， tree shaking就会生效。</p>\n<h3 id=\"8、resolve（解析）\"><a href=\"#8、resolve（解析）\" class=\"headerlink\" title=\"8、resolve（解析）\"></a>8、resolve（解析）</h3><p>能设置模块如何被解析。</p>\n<ul>\n<li>extension: 指定extension之后可以不用在require或是import的时候加文件扩展名,会依次尝试添加扩展名进行匹配</li>\n<li>alias: 配置别名可以加快webpack查找模块的速度</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>],</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'@'</span>: path.join(__dirname, <span class=\"string\">'../src'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9、模块热替换HMR\"><a href=\"#9、模块热替换HMR\" class=\"headerlink\" title=\"9、模块热替换HMR\"></a>9、模块热替换HMR</h3><p>模块热替换也称为HMR，代码更新时只会更新被修改部分都显示。有如下有点</p>\n<ul>\n<li>针对于样式调试更加方便</li>\n<li>只会更新被修改代码的那部分显示，提升开发效率</li>\n<li>保留在完全重新加载页面时丢失的应用程序状态。</li>\n</ul>\n<p>这里我们采用Node.js的方式实现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add express webpack-dev-middleware webpack-hot-middleware react-hot-loader cross-env -D</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">touch dev-server.js</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev-server.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackHotMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack-hot-middleware\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> complier = webpack(config);   <span class=\"comment\">// 编译器，编译器执行一次就会重新打包一下代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();  <span class=\"comment\">// 生成一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> DIST_DIR = path.resolve(__dirname, <span class=\"string\">'../'</span>, <span class=\"string\">'dist'</span>);  <span class=\"comment\">// 设置静态访问文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"built_in\">parseInt</span>(process.env.PORT, <span class=\"number\">10</span>) || <span class=\"number\">8586</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> host = process.env.HOST || <span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> devMiddleware = webpackDevMiddleware(complier, &#123;</span><br><span class=\"line\">  quiet: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  noInfo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  stats: <span class=\"string\">'minimal'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> hotMiddleware = webpackHotMiddleware(complier, &#123;</span><br><span class=\"line\">  log: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  heartbeat: <span class=\"number\">2000</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">app.use(devMiddleware)</span><br><span class=\"line\">app.use(hotMiddleware)</span><br><span class=\"line\"><span class=\"comment\">// 设置访问静态文件的路径</span></span><br><span class=\"line\">app.use(express.static(DIST_DIR))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`App running at: http://<span class=\"subst\">$&#123;host&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>`</span>);</span><br><span class=\"line\">&#125;)  <span class=\"comment\">//监听端口</span></span><br></pre></td></tr></table></figure>\n<p>修改webpack.config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isDev = process.env.NODE_ENV === <span class=\"string\">'development'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    main: [</span><br><span class=\"line\">      <span class=\"string\">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(sc|sa|c)ss$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          isDev ? <span class=\"string\">'style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              modules: &#123;</span><br><span class=\"line\">                localIdentName: <span class=\"string\">'[local]_[hash:base64:5]'</span>,</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              sourceMap: !isDev &amp;&amp; <span class=\"literal\">true</span>, <span class=\"comment\">// 开发时刷新会导致闪屏（样式加载慢一步）</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">'postcss-loader'</span>, <span class=\"comment\">// 使用 postcss 为 css 加上浏览器前缀</span></span><br><span class=\"line\">          <span class=\"string\">'sass-loader'</span>, <span class=\"comment\">// 编译scss</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(), <span class=\"comment\">// 用于启动HMR时可以显示模块的相对路径</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">// 开启HMR(热替换功能,替换更新部分,不重载页面！) 相当于在命令行加 --hot</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改入口文件index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-hot-loader'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;AppContainer&gt;</span><br><span class=\"line\">      &lt;BrowserRouter&gt;</span><br><span class=\"line\">        &lt;Router /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>AppContainer&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 初始化 */</span></span><br><span class=\"line\">render();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 热更新 */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.hot) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.hot.accept(<span class=\"string\">'./router/index.js'</span>, () =&gt; &#123;</span><br><span class=\"line\">    render();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改script命令行<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"start\": \"cross-env NODE_ENV=development node ./build/dev-server.js\",</span><br></pre></td></tr></table></figure></p>\n<p>ok，当我们修改代码时，页面就不需要刷新了，而是直接更新变化的部分。</p>\n<h3 id=\"10、BundleAnalyzerPlugin\"><a href=\"#10、BundleAnalyzerPlugin\" class=\"headerlink\" title=\"10、BundleAnalyzerPlugin\"></a>10、BundleAnalyzerPlugin</h3><p>使用交互式可缩放树形图可视化webpack输出文件的大小，可以方便我们针对代码依赖的大小进行优化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BundleAnalyzerPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class=\"line\">      analyzerMode: <span class=\"string\">'server'</span>,</span><br><span class=\"line\">      analyzerHost: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">      analyzerPort: <span class=\"number\">8889</span>,</span><br><span class=\"line\">      reportFilename: <span class=\"string\">'report.html'</span>,</span><br><span class=\"line\">      defaultSizes: <span class=\"string\">'parsed'</span>,</span><br><span class=\"line\">      openAnalyzer: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      generateStatsFile: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      statsFilename: <span class=\"string\">'stats.json'</span>,</span><br><span class=\"line\">      statsOptions: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      logLevel: <span class=\"string\">'info'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"script\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"analyz\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production npm_config_report=true npm run build\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"webpack分离配置文件\"><a href=\"#webpack分离配置文件\" class=\"headerlink\" title=\"webpack分离配置文件\"></a>webpack分离配置文件</h2><p>针对开发环境和发布环境配置对应的webpack，公共的部分提取出来，再使用 webpack-merge 来将不同环境下的配置合并起来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">touch webpack.base.conf.js</span><br><span class=\"line\">touch webpack.dev.conf.js</span><br><span class=\"line\">touch webpack.prd.conf.js</span><br><span class=\"line\"> </span><br><span class=\"line\">yarn add webpack-merge -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"1、提取公共配置\"><a href=\"#1、提取公共配置\" class=\"headerlink\" title=\"1、提取公共配置\"></a>1、提取公共配置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.base.conf.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isDev = process.env.NODE_ENV === <span class=\"string\">'development'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: [<span class=\"string\">'./src/index.js'</span>],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...同webpack.config.js的modules</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">// 最终创建的文件名</span></span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'../public/index.html'</span>), <span class=\"comment\">// 指定模板路径</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>],</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'@'</span>: path.join(__dirname, <span class=\"string\">'../src'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 代码分割按需加载、提取公共代码</span></span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>, <span class=\"comment\">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  performance: <span class=\"literal\">false</span>, <span class=\"comment\">// 关闭性能提示</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、配置开发环境\"><a href=\"#2、配置开发环境\" class=\"headerlink\" title=\"2、配置开发环境\"></a>2、配置开发环境</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.dev.conf.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> commonConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(commonConfig, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">\"development\"</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'cheap-module-eval-soure-map'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//实现刷新浏览器webpack-hot-middleware/client?noInfo=true&amp;reload=true 是必填的</span></span><br><span class=\"line\">    main: [</span><br><span class=\"line\">      <span class=\"string\">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"../dist\"</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 文件名称</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.[name].[hash].js\"</span>,</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[name].[hash].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// new webpack.DefinePlugin(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// \t'process.env.NODE_ENV': JSON.stringify('development'),</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;),</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    contentBase: path.resolve(__dirname, <span class=\"string\">\"../dist\"</span>),</span><br><span class=\"line\">    host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8586</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">// 该选项的作用所有的404都连接到index.html</span></span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 代理到后端的服务地址</span></span><br><span class=\"line\">      <span class=\"comment\">// \"/api\": \"http://localhost:3000\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、配置发布环境\"><a href=\"#3、配置发布环境\" class=\"headerlink\" title=\"3、配置发布环境\"></a>3、配置发布环境</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.prd.conf.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> commonConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(commonConfig, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'cheap-module-source-map'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// 打包路径</span></span><br><span class=\"line\">    <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 文件名称</span></span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.[name].[hash].js'</span>,</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    usedExports: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>, <span class=\"comment\">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 公共代码打包分组配置</span></span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'vendors'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash].css'</span>,</span><br><span class=\"line\">      chunkFilename: <span class=\"string\">'[id].[hash].css'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// new webpack.DefinePlugin(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   'process.env.NODE_ENV': JSON.stringify('production'),</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;),</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、修改script命令行\"><a href=\"#4、修改script命令行\" class=\"headerlink\" title=\"4、修改script命令行\"></a>4、修改script命令行</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"start\": \"cross-env NODE_ENV=development node ./build/dev-server.js\",</span><br><span class=\"line\">\"build\": \"cross-env NODE_ENV=production webpack --config ./build/webpack.prod.conf.js\",</span><br></pre></td></tr></table></figure>\n<p>写到这里，一个基本的React开发环境也就搭起来了，接下来就可以针对代码或者开发效率进行优化。</p>\n","categories":[],"tags":["随笔","react","webpack"]},{"title":"动手搭建react开发环境一","url":"http://yoursite.com/2019/07/11/动手搭建react开发环境一/","content":"<p>前言：接触webpack从在学校的那会起，也一直在使用它，用的都是别人封装好的，偶尔去修改一点点配置，也没有真正自己从零开始配置一个脚手架，接下来几篇将记录我对webpack以及开发中提升效率的配置，其中遇到的一些坑也会提示出来。</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><ul>\n<li>webpack 4</li>\n<li>Babel 7</li>\n</ul>\n<blockquote>\n<p>本篇主要使用webpack搭建基础的React环境</p>\n</blockquote>\n<h3 id=\"快速浏览：\"><a href=\"#快速浏览：\" class=\"headerlink\" title=\"快速浏览：\"></a>快速浏览：</h3><ul>\n<li><a href=\"http://hjingren.cn/2019/07/12/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">webpack优化篇</a></li>\n</ul>\n<h2 id=\"webpack核心概念\"><a href=\"#webpack核心概念\" class=\"headerlink\" title=\"webpack核心概念\"></a>webpack核心概念</h2><ul>\n<li>entry: 入口起点</li>\n<li>output: 输出</li>\n<li>module: 模块，webpack中一切皆是模块</li>\n<li>loader: 转换工具，webpack 只能理解 JavaScript 和 JSON 文件。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效模块，以供应用程序使用，以及被添加到依赖图中</li>\n<li>plugin: 扩展插件，loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情，比如：打包优化，资源管理，注入环境变量等等</li>\n<li>mode: webpac的打包环境[development, production]</li>\n<li>chunk: 代码库，一个chunk由十多个模块组合而成，用于代码合并与分割</li>\n</ul>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><h3 id=\"1、初始化项目\"><a href=\"#1、初始化项目\" class=\"headerlink\" title=\"1、初始化项目\"></a>1、初始化项目</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir webpack-template</span><br><span class=\"line\">cd webpack-template</span><br><span class=\"line\">mkdir src public build dist</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、安装webpack\"><a href=\"#2、安装webpack\" class=\"headerlink\" title=\"2、安装webpack\"></a>2、安装webpack</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack webpack-cli -D</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">touch webpack.config.js</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单的webpack配置</span></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js初始化内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">\"development\"</span>,  <span class=\"comment\">// 指定环境</span></span><br><span class=\"line\">  entry: [<span class=\"string\">\"./src/index.js\"</span>],  <span class=\"comment\">// 打包入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"../dist\"</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 文件名称</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></span><br><span class=\"line\">  &#125;,  <span class=\"comment\">// 打包输出到 dist/bundle.js.</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>:&#123;&#125;,</span><br><span class=\"line\">  plugins:[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>package.json更改<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"webpack --config ./build/webpack.config.js\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3、HtmlWebpackPlugin\"><a href=\"#3、HtmlWebpackPlugin\" class=\"headerlink\" title=\"3、HtmlWebpackPlugin\"></a>3、HtmlWebpackPlugin</h3><p>将打包的js自动插入到 index.html 里面去。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add html-webpack-plugin -D</span><br><span class=\"line\"><span class=\"built_in\">cd</span> public</span><br><span class=\"line\">touch index.html</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Template<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">// 最终创建的文件名</span></span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'../public/index.html'</span>), <span class=\"comment\">// 指定模板路径</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、配置转义ES6-ES7-JSX\"><a href=\"#4、配置转义ES6-ES7-JSX\" class=\"headerlink\" title=\"4、配置转义ES6/ES7/JSX\"></a>4、配置转义ES6/ES7/JSX</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// @babel/polyfill: 模拟一个es6+的环境,提供es6方法和函数的垫片</span><br><span class=\"line\">// core-js@2：@babel/preset-env实现按需引入polyfill时，声明core-js版本</span><br><span class=\"line\">yarn add @babel/polyfill core-js@2</span><br><span class=\"line\"> </span><br><span class=\"line\">// babel-loader和@babel/core是核心模块</span><br><span class=\"line\">// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript</span><br><span class=\"line\">// @babel/preset-react 转换JSX</span><br><span class=\"line\">yarn add babel-loader @babel/core @babel/preset-env @babel/preset-react @babel/plugin-proposal-class-properties -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建.babelrc文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"comment\">// 将es6的语法翻译成es5语法</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"useBuiltIns\"</span>: <span class=\"string\">\"usage\"</span>, <span class=\"comment\">// 做@babel/polyfill补充时，按需补充，用到什么才补充什么</span></span><br><span class=\"line\">        <span class=\"string\">\"corejs\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>🔥Tip1 问题：Support for the experimental syntax ‘classProperties’ isn’t currently enabled</p>\n<blockquote>\n<p>yarn add @babel/plugin-proposal-class-properties 并在plugins中配置</p>\n</blockquote>\n<p>🔥Tip2 提示：useBuiltIns 和 transform-runtime 不能同时使用，如果使用transform-runtime就不要配useBuiltInsor，一般独立的类库项目才用transform-runtime</p>\n<h3 id=\"5、配置转义Typescript\"><a href=\"#5、配置转义Typescript\" class=\"headerlink\" title=\"5、配置转义Typescript\"></a>5、配置转义Typescript</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add typescript ts-loader -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">\"ts-loader\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建tsconfig.json<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\".\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rootDir\"</span>: <span class=\"string\">\".\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"outDir\"</span>: <span class=\"string\">\"dist\"</span>,</span><br><span class=\"line\">    \"module\": \"esnext\", // 模块引入的方式</span><br><span class=\"line\">    \"target\": \"es6\", // 转换为es6</span><br><span class=\"line\">    \"lib\": [\"dom\", \"es7\"],</span><br><span class=\"line\">    \"jsx\": \"preserve\",</span><br><span class=\"line\">    \"moduleResolution\": \"node\",</span><br><span class=\"line\">    \"sourceMap\": true,</span><br><span class=\"line\">    \"allowJs\": true, // 在typescript中允许引入js文件</span><br><span class=\"line\">    \"forceConsistentCasingInFileNames\": true,</span><br><span class=\"line\">    \"noImplicitReturns\": true,</span><br><span class=\"line\">    \"noImplicitThis\": true,</span><br><span class=\"line\">    \"noImplicitAny\": true,</span><br><span class=\"line\">    \"noUnusedLocals\": true,</span><br><span class=\"line\">    \"noUnusedParameters\": true,</span><br><span class=\"line\">    \"strictNullChecks\": true,</span><br><span class=\"line\">    \"importHelpers\": true,</span><br><span class=\"line\">    \"suppressImplicitAnyIndexErrors\": true,</span><br><span class=\"line\">    \"experimentalDecorators\": true,</span><br><span class=\"line\">    \"downlevelIteration\": true,</span><br><span class=\"line\">    \"allowSyntheticDefaultImports\": true,</span><br><span class=\"line\">    \"paths\": &#123;</span><br><span class=\"line\">      \"@/*\": [\"src/*\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"exclude\": [\"node_modules\", \"dist\", \"build\", \"mock\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6、CleanWebpackPlugin\"><a href=\"#6、CleanWebpackPlugin\" class=\"headerlink\" title=\"6、CleanWebpackPlugin\"></a>6、CleanWebpackPlugin</h3><p>清除 dist 目录下旧版本文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add clean-webpack-plugin -D</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"comment\">//...同上</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、source-map\"><a href=\"#7、source-map\" class=\"headerlink\" title=\"7、source-map\"></a>7、source-map</h3><p>可以帮助我们定位到错误信息位置的文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devtool: <span class=\"string\">\"cheap-module-eval-source-map\"</span>,  <span class=\"comment\">// development</span></span><br><span class=\"line\">devtool: <span class=\"string\">\"cheap-module-source-map\"</span>,  <span class=\"comment\">// production</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8、WebpackDevServer\"><a href=\"#8、WebpackDevServer\" class=\"headerlink\" title=\"8、WebpackDevServer\"></a>8、WebpackDevServer</h3><p>webpack在本地为搭建了一个静态文件服务器，实时打包重加载修改的代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    contentBase: path.resolve(__dirname, <span class=\"string\">\"../dist\"</span>),</span><br><span class=\"line\">    host: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8586</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//  该选项的作用所有的404都连接到index.html</span></span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 代理到后端的服务地址</span></span><br><span class=\"line\">      <span class=\"comment\">// \"/api\": \"http://localhost:3000\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改package.json命令<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"webpack-dev-server --config ./build/webpack.config.js\",</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9、编译css和scss并使用css-modules\"><a href=\"#9、编译css和scss并使用css-modules\" class=\"headerlink\" title=\"9、编译css和scss并使用css-modules\"></a>9、编译css和scss并使用css-modules</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add css-loader style-loader sass-loader node-sass -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(sc|sa|c)ss$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              modules: &#123;</span><br><span class=\"line\">                localIdentName: <span class=\"string\">'[local]_[hash:base64:5]'</span>,</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              <span class=\"comment\">// sourceMap: !isDev &amp;&amp; true,</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">'sass-loader'</span>, <span class=\"comment\">// 编译scss</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>🔥Tip3 问题：当在 css-loader 配置上 sourceMap 时，配合热加载样式会闪屏</p>\n<blockquote>\n<p>sourceMap: !isDev &amp;&amp; true,</p>\n</blockquote>\n<h3 id=\"10、集成postcss\"><a href=\"#10、集成postcss\" class=\"headerlink\" title=\"10、集成postcss\"></a>10、集成postcss</h3><p>为css某些特性自动增加前缀，并做一些兼容处理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(sc|sa|c)ss$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"comment\">//...同上</span></span><br><span class=\"line\">          <span class=\"string\">'postcss-loader'</span>, <span class=\"comment\">// 使用 postcss 为 css 加上浏览器前缀</span></span><br><span class=\"line\">          <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建postcss.config.js文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">  plugins: &#123;</span><br><span class=\"line\">    <span class=\"string\">'postcss-preset-env'</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>新建.browserlistrc文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>% <span class=\"keyword\">in</span> CN</span><br><span class=\"line\">android &gt;= <span class=\"number\">4.4</span></span><br><span class=\"line\">ios &gt;= <span class=\"number\">8</span></span><br><span class=\"line\">not ie &lt;= <span class=\"number\">11</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"11、图片处理\"><a href=\"#11、图片处理\" class=\"headerlink\" title=\"11、图片处理\"></a>11、图片处理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add file-loader url-loader -D</span><br><span class=\"line\"><span class=\"comment\"># file-loader 解决css等文件中引入图片路径的问题</span></span><br><span class=\"line\"><span class=\"comment\"># url-loader 当图片较小的时候会把图片BASE64编码，大于limit参数的时候还是使用file-loader 进行拷贝</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif|svg)/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            outputPath: <span class=\"string\">'images/'</span>,</span><br><span class=\"line\">            limit: <span class=\"number\">10</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12、字体文件处理\"><a href=\"#12、字体文件处理\" class=\"headerlink\" title=\"12、字体文件处理\"></a>12、字体文件处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...同上</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[name]-[hash:5].min.[ext]'</span>,</span><br><span class=\"line\">              limit: <span class=\"number\">5000</span>,</span><br><span class=\"line\">              publicPath: <span class=\"string\">'fonts/'</span>,</span><br><span class=\"line\">              outputPath: <span class=\"string\">'fonts/'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，webpack的基本配置我们已经准备的差不多了，赶紧写点react来试试水。</p>\n<h2 id=\"测试React环境\"><a href=\"#测试React环境\" class=\"headerlink\" title=\"测试React环境\"></a>测试React环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react react-dom react-router react-router-dom</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        hello word~</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;App /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>执行 <code>npm start</code> ，如果页面上能正常显示 <code>hello word~</code> 那表示我们的webapck基础配置成功。</p>\n<p>第一篇webpack基础配置到此结束了，下一篇对webpack进行优化配置。</p>\n","categories":[],"tags":["随笔","react","webpack"]},{"title":"Nginx下升级https","url":"http://yoursite.com/2019/06/11/Nginx下升级https/","content":"<h2 id=\"购买证书\"><a href=\"#购买证书\" class=\"headerlink\" title=\"购买证书\"></a>购买证书</h2><p>可以去阿里云的云盾证书服务<a href=\"https://common-buy.aliyun.com/?spm=5176.2020520163.cas.3.75c3lKQ2lKQ27E&amp;commodityCode=cas#/buy\" target=\"_blank\" rel=\"noopener\">购买</a></p>\n<h2 id=\"下载证书\"><a href=\"#下载证书\" class=\"headerlink\" title=\"下载证书\"></a>下载证书</h2><p>在证书控制台下载 Nginx 版本证书。下载到本地的压缩文件包解压后包含：</p>\n<ul>\n<li><strong>.pem</strong>文件：证书文件</li>\n<li><strong>.key</strong>文件：证书的私钥文件（申请证书时如果没有选择<strong>自动创建CSR</strong>，则没有该文件）</li>\n</ul>\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>1、在 Nginx 的安装目录下创建 cert 目录，并且将下载的全部文件拷贝到 cert 目录中，如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到 cert 目录下。</p>\n<p>2、打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#user  nobody;</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span>  <span class=\"literal\">on</span>;   <span class=\"comment\">#开启gzip</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>; <span class=\"comment\">#低于1kb的资源不压缩</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">3</span>; <span class=\"comment\">#压缩级别【1-9】，越大压缩率越高，同时消耗cpu资源也越多，建议设置在4左右。</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/javascript text/xml text/css;  <span class=\"comment\">#需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片，下面会讲为什么。</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_disable</span> <span class=\"string\">\"MSIE [1-6]\\.\"</span>;  <span class=\"comment\">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_vary</span> <span class=\"literal\">on</span>;  <span class=\"comment\">#是否添加“Vary: Accept-Encoding”响应头</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span> default backlog=<span class=\"number\">2048</span>; <span class=\"comment\">#配置http可用</span></span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl; <span class=\"comment\">#配置https</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate</span>      ../cert/hzzly.pem; <span class=\"comment\">#配置证书文件</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate_key</span>  ../cert/hzzly.key; <span class=\"comment\">#配置私钥文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_cache</span>    shared:SSL:<span class=\"number\">1m</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_timeout</span>  <span class=\"number\">5m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_prefer_server_ciphers</span>  <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   /home/hzzly;</span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># location ^~ /apis/ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#     proxy_set_header Host $host;</span></span><br><span class=\"line\">        <span class=\"comment\">#     proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class=\"line\">        <span class=\"comment\">#     proxy_set_header X-Forwarded-Server $host;</span></span><br><span class=\"line\">        <span class=\"comment\">#     # 匹配任何以 /apis/ 开始的请求，并停止匹配 其它location</span></span><br><span class=\"line\">        <span class=\"comment\">#     proxy_pass http://xxxxxxxxxx/;</span></span><br><span class=\"line\">        <span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># location ^~ /assets/ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#     gzip_static on;</span></span><br><span class=\"line\">        <span class=\"comment\">#     expires max;</span></span><br><span class=\"line\">        <span class=\"comment\">#     add_header Cache-Control public;</span></span><br><span class=\"line\">        <span class=\"comment\"># &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、重启 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\">$ ./nginx -s reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"错误详解\"><a href=\"#错误详解\" class=\"headerlink\" title=\"错误详解\"></a>错误详解</h2><h3 id=\"1、Nginx如果未开启SSL模块，配置Https时提示错误\"><a href=\"#1、Nginx如果未开启SSL模块，配置Https时提示错误\" class=\"headerlink\" title=\"1、Nginx如果未开启SSL模块，配置Https时提示错误\"></a>1、Nginx如果未开启SSL模块，配置Https时提示错误</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx: [emerg] the <span class=\"string\">\"ssl\"</span> parameter requires ngx_http_ssl_module <span class=\"keyword\">in</span> ...</span><br></pre></td></tr></table></figure>\n<p><strong>Nginx开启SSL模块</strong></p>\n<p>切换到源码包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/src/nginx-1.16.0</span><br></pre></td></tr></table></figure>\n<p>修改新的configure参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure>\n<p>配置完成后，运行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make  //这里不要进行make install，否则就是覆盖安装</span><br></pre></td></tr></table></figure>\n<p>备份原有已安装好的nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx.bak</span><br></pre></td></tr></table></figure>\n<p>将刚刚编译好的nginx覆盖掉原有的nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp ./objs/nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin/</span><br></pre></td></tr></table></figure>\n<p>重启 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\">$ ./nginx -s reload</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["随笔","nginx"]},{"title":"图解词法作用域与作用域链","url":"http://yoursite.com/2019/03/04/图解词法作用域与作用域链/","content":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><blockquote>\n<p>作用域是指程序源代码中定义变量的区域。</p>\n<p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p>\n<p>JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。</p>\n<p>想了解更多关于作用域的问题推荐阅读《你不知道的JavaScript上卷》第一章（或第一部分），从编译原理的角度说明什么是作用域。概括的说作用域就是一套设计良好的规则来存储变量，并且之后可以方便地找到这些变量。</p>\n</blockquote>\n<h2 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h2><p>在你不知道的javascript上卷中是这样定义的：<strong>词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变(大部分情况下是这样的)。</strong></p>\n<p>在JS中词法作用域的规则：</p>\n<blockquote>\n<ul>\n<li>函数允许访问函数外部的数据</li>\n<li>整个代码结构中只有函数可以限定作用域</li>\n<li>作用规则首先使用提升规则分析</li>\n<li>如果当前作用域中有了名字了，就不考虑外面的名字</li>\n</ul>\n</blockquote>\n<p>栗1：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure></p>\n<p>栗2：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>只有函数才能制造作用域结构，那么只要是代码，至少有一个作用域，即全局作用域。</p>\n<p>凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域，那么将这样的所有作用域列出来，可以有一个结构：函数内指向函数外的链式结构。</p>\n<p>以上面栗2：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>全局作用域，有三个标识符：foo、bar、a</li>\n<li>bar 所创建的作用域，其中有一个标识符：a</li>\n</ul>\n<p>作用域是由代码写在哪里决定的，并且是逐级包含的。</p>\n<p>我们用级链来表示一下以上代码块：</p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/scope/scope1.png\" alt=\"scope1\"></p>\n<p>从图中我们可以看到：函数foo和bar以及变量 a=2， 在1级链，而bar下又可以展开2级链，2级链上有a=3。程序bar()调用进入中间2级链，而bar中又调用了foo函数，此时程序进入foo的作用域链，按照向上查找的原则，程序会从这一条链向上查找，首先2级链没有a，向上到达1级链，刚好1级链上有a=2，所以就直接使用2，程序最后的结果就是打印2。</p>\n<p>所以无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p><a href=\"https://github.com/mqyqingfeng/Blog/issues/3\" target=\"_blank\" rel=\"noopener\">《JavaScript深入之词法作用域和动态作用域》</a>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">\"global scope\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkscope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scope = <span class=\"string\">\"local scope\"</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">checkscope();</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/scope/scope2.png\" alt=\"scope2\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/3\" target=\"_blank\" rel=\"noopener\">JavaScript深入之词法作用域和动态作用域</a></li>\n</ul>\n","categories":[],"tags":["随笔","JavaScript","js"]},{"title":"gitflow基本操作","url":"http://yoursite.com/2019/03/03/gitflow基本操作/","content":"<blockquote>\n<p>前言：在多组员，多项目等环境进行协同工作时，如果没有统一规范、统一流程，则会导致额外的工作量，甚至会做无用功。所以要减少版本冲突，减轻不必要的工作，就需要规范化的工作流程，本文就gitflow作简要的命令操作。</p>\n</blockquote>\n<h2 id=\"主分支\"><a href=\"#主分支\" class=\"headerlink\" title=\"主分支\"></a>主分支</h2><blockquote>\n<p>master 只负责管理发布的状态。在提交时使用标签记录发布版本号。<br>develop 针对发布的日常开发分支。刚才我们已经讲解过有合并分支的功用。</p>\n</blockquote>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-workflow-1.png\" alt=\"gitflow\"></p>\n<h2 id=\"开发分支\"><a href=\"#开发分支\" class=\"headerlink\" title=\"开发分支\"></a>开发分支</h2><h3 id=\"Git创建Develop分支的命令：\"><a href=\"#Git创建Develop分支的命令：\" class=\"headerlink\" title=\"Git创建Develop分支的命令：\"></a>Git创建Develop分支的命令：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b develop master</span><br></pre></td></tr></table></figure>\n<h3 id=\"将Develop分支发布到Master分支的命令：\"><a href=\"#将Develop分支发布到Master分支的命令：\" class=\"headerlink\" title=\"将Develop分支发布到Master分支的命令：\"></a>将Develop分支发布到Master分支的命令：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到Master分支</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"><span class=\"comment\"># 对Develop分支进行合并(使用了--no-ff参数，生成一个新的节点提交)</span></span><br><span class=\"line\">git merge --no-ff develop</span><br></pre></td></tr></table></figure>\n<h2 id=\"临时性分支\"><a href=\"#临时性分支\" class=\"headerlink\" title=\"临时性分支\"></a>临时性分支</h2><blockquote>\n<p>功能（feature）分支<br>预发布（release）分支<br>修补bug（fixbug）分支</p>\n</blockquote>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-workflow-2.png\" alt=\"gitflow\"></p>\n<h2 id=\"功能分支\"><a href=\"#功能分支\" class=\"headerlink\" title=\"功能分支\"></a>功能分支</h2><h3 id=\"创建一个功能分支：\"><a href=\"#创建一个功能分支：\" class=\"headerlink\" title=\"创建一个功能分支：\"></a>创建一个功能分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b feature-x develop</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发完成后，将功能分支合并到develop分支：\"><a href=\"#开发完成后，将功能分支合并到develop分支：\" class=\"headerlink\" title=\"开发完成后，将功能分支合并到develop分支：\"></a>开发完成后，将功能分支合并到develop分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除feature分支：\"><a href=\"#删除feature分支：\" class=\"headerlink\" title=\"删除feature分支：\"></a>删除feature分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d feature-x</span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">git push origin --delete feature-x</span><br></pre></td></tr></table></figure>\n<h2 id=\"预发布分支\"><a href=\"#预发布分支\" class=\"headerlink\" title=\"预发布分支\"></a>预发布分支</h2><h3 id=\"创建一个预发布分支：\"><a href=\"#创建一个预发布分支：\" class=\"headerlink\" title=\"创建一个预发布分支：\"></a>创建一个预发布分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b release-1.2 develop</span><br></pre></td></tr></table></figure>\n<h3 id=\"确认没有问题后，合并到master分支：\"><a href=\"#确认没有问题后，合并到master分支：\" class=\"headerlink\" title=\"确认没有问题后，合并到master分支：\"></a>确认没有问题后，合并到master分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff release-1.2</span><br><span class=\"line\"><span class=\"comment\"># 对合并生成的新节点，做一个标签</span></span><br><span class=\"line\">git tag -a 1.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"再合并到develop分支：\"><a href=\"#再合并到develop分支：\" class=\"headerlink\" title=\"再合并到develop分支：\"></a>再合并到develop分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后，删除预发布分支：\"><a href=\"#最后，删除预发布分支：\" class=\"headerlink\" title=\"最后，删除预发布分支：\"></a>最后，删除预发布分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d release-1.2</span><br></pre></td></tr></table></figure>\n<h2 id=\"修补bug分支\"><a href=\"#修补bug分支\" class=\"headerlink\" title=\"修补bug分支\"></a>修补bug分支</h2><h3 id=\"创建一个修补bug分支：\"><a href=\"#创建一个修补bug分支：\" class=\"headerlink\" title=\"创建一个修补bug分支：\"></a>创建一个修补bug分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b fixbug-0.1 master</span><br></pre></td></tr></table></figure>\n<h3 id=\"修补结束后，合并到master分支：\"><a href=\"#修补结束后，合并到master分支：\" class=\"headerlink\" title=\"修补结束后，合并到master分支：\"></a>修补结束后，合并到master分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff fixbug-0.1</span><br><span class=\"line\"><span class=\"comment\"># 对合并生成的新节点，做一个标签</span></span><br><span class=\"line\">git tag -a 0.1.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"再合并到develop分支：-1\"><a href=\"#再合并到develop分支：-1\" class=\"headerlink\" title=\"再合并到develop分支：\"></a>再合并到develop分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff fixbug-0.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后，删除修补bug分支：\"><a href=\"#最后，删除修补bug分支：\" class=\"headerlink\" title=\"最后，删除修补bug分支：\"></a>最后，删除修补bug分支：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d fixbug-0.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"取消刚才的合并merge\"><a href=\"#取消刚才的合并merge\" class=\"headerlink\" title=\"取消刚才的合并merge\"></a>取消刚才的合并merge</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD~</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rebase 合并</span></span><br><span class=\"line\">git checkout issue3</span><br><span class=\"line\">git rebase master</span><br><span class=\"line\"><span class=\"comment\"># master 合并</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge issue3</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改冲突后的提交\"><a href=\"#修改冲突后的提交\" class=\"headerlink\" title=\"修改冲突后的提交\"></a>修改冲突后的提交</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --<span class=\"built_in\">continue</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"取消rebase\"><a href=\"#取消rebase\" class=\"headerlink\" title=\"取消rebase\"></a>取消rebase</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --abort</span><br></pre></td></tr></table></figure>\n<h2 id=\"回退\"><a href=\"#回退\" class=\"headerlink\" title=\"回退\"></a>回退</h2><h3 id=\"commit-回退\"><a href=\"#commit-回退\" class=\"headerlink\" title=\"commit 回退\"></a>commit 回退</h3><blockquote>\n<p>commit log</p>\n</blockquote>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-commit-log.png\" alt=\"git-commit-log\"></p>\n<blockquote>\n<p>commit reset</p>\n</blockquote>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-commit-reset.png\" alt=\"git-commit-reset\"></p>\n<h3 id=\"push-回退\"><a href=\"#push-回退\" class=\"headerlink\" title=\"push 回退\"></a>push 回退</h3><blockquote>\n<p>push log</p>\n</blockquote>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-push-log.png\" alt=\"git-push-log\"></p>\n<blockquote>\n<p>push reset</p>\n</blockquote>\n<p><img src=\"https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-push-reset.png\" alt=\"git-push-reset\"></p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><h3 id=\"添加轻标签\"><a href=\"#添加轻标签\" class=\"headerlink\" title=\"添加轻标签\"></a>添加轻标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v2.0</span><br><span class=\"line\"><span class=\"comment\"># 显示标签列表</span></span><br><span class=\"line\">git tag</span><br><span class=\"line\"><span class=\"comment\"># 显示标签列表包含标签资料的历史记录</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --decorate</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加注解标签\"><a href=\"#添加注解标签\" class=\"headerlink\" title=\"添加注解标签\"></a>添加注解标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v3.0</span><br><span class=\"line\">// 或</span><br><span class=\"line\">git tag -am <span class=\"string\">\"注解\"</span> v3.0</span><br><span class=\"line\"><span class=\"comment\"># 显示标签的列表和注解</span></span><br><span class=\"line\">git tag -n</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v2.0</span><br><span class=\"line\">git tag -d v3.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送标签到远程\"><a href=\"#推送标签到远程\" class=\"headerlink\" title=\"推送标签到远程\"></a>推送标签到远程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin v1.5</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git远程仓库地址变更\"><a href=\"#Git远程仓库地址变更\" class=\"headerlink\" title=\"Git远程仓库地址变更\"></a>Git远程仓库地址变更</h2><h3 id=\"查看所有远程仓库\"><a href=\"#查看所有远程仓库\" class=\"headerlink\" title=\"查看所有远程仓库\"></a>查看所有远程仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除远程仓库地址\"><a href=\"#删除远程仓库地址\" class=\"headerlink\" title=\"删除远程仓库地址\"></a>删除远程仓库地址</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改变更后的远程仓库地址\"><a href=\"#修改变更后的远程仓库地址\" class=\"headerlink\" title=\"修改变更后的远程仓库地址\"></a>修改变更后的远程仓库地址</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin http://xxx.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"git问题\"><a href=\"#git问题\" class=\"headerlink\" title=\"git问题\"></a>git问题</h2><h3 id=\"LibreSSL-SSL-read-SSL-ERROR-SYSCALL-errno-60\"><a href=\"#LibreSSL-SSL-read-SSL-ERROR-SYSCALL-errno-60\" class=\"headerlink\" title=\"LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 60\"></a>LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 60</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.postBuffer 1048576000</span><br></pre></td></tr></table></figure>\n<h3 id=\"LibreSSL-SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443\"><a href=\"#LibreSSL-SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443\" class=\"headerlink\" title=\"LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443\"></a>LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</h3><h3 id=\"Empty-reply-from-server\"><a href=\"#Empty-reply-from-server\" class=\"headerlink\" title=\"Empty reply from server\"></a>Empty reply from server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">《Git分支管理策略–阮一峰》</a></li>\n<li><a href=\"https://backlogtool.com/git-tutorial/cn/stepup/stepup1_1.html\" target=\"_blank\" rel=\"noopener\">猴子都能懂的GIT入门</a></li>\n</ul>\n","categories":[],"tags":["git"]},{"title":"dva models一些隐藏的骚操作","url":"http://yoursite.com/2019/02/27/dva models一些隐藏的骚操作/","content":"<blockquote>\n<p><a href=\"https://dvajs.com/guide/getting-started.html\" target=\"_blank\" rel=\"noopener\">dva</a> 是一个基于 redux 和 redux-saga 的数据流方案<br><a href=\"https://redux-saga.js.org/docs/api/\" target=\"_blank\" rel=\"noopener\">redux-saga API</a></p>\n</blockquote>\n<h3 id=\"take-pattern\"><a href=\"#take-pattern\" class=\"headerlink\" title=\"take(pattern)\"></a>take(pattern)</h3><blockquote>\n<p>使用take操作进行事件监听，用来命令 middleware 在 Store 上等待指定的 action。 在发起与 pattern 匹配的 action 之前，Generator 将暂停（eg：下一个请求的参数依赖前一个请求的结果）。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*fetchList(&#123; payload, callback &#125;, &#123; call, put, select, take &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'dict/xxxx'</span>,</span><br><span class=\"line\">    payload: &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> take(<span class=\"string\">'dict/xxxx/@@end'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dictData = <span class=\"keyword\">yield</span> select(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.dict.dicts);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">yield</span> call(getList, &#123;</span><br><span class=\"line\">    xxx: dictData.xxx</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"race-effects\"><a href=\"#race-effects\" class=\"headerlink\" title=\"race(effects)\"></a>race(effects)</h3><blockquote>\n<p>任务的竞争，用来命令 middleware 在多个 Effect 间运行 竞赛（Race）（与 Promise.race([…]) 的行为类似）。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*fetchList(&#123; payload, callback &#125;, &#123; race &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; list, timeout &#125; = <span class=\"keyword\">yield</span> race(&#123;</span><br><span class=\"line\">    list: call(services.fetchList),</span><br><span class=\"line\">    timeout: call(delay, TIMEOUT),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任务的并行执行\"><a href=\"#任务的并行执行\" class=\"headerlink\" title=\"任务的并行执行\"></a>任务的并行执行</h3><blockquote>\n<p>把多个要并行执行的东西放在一个数组里，就可以并行执行，等所有的都结束之后，进入下个环节，类似promise.all的操作。一般有一些集成界面，比如dashboard，其中各组件之间业务关联较小，就可以用这种方式去分别加载数据，此时，整体加载时间只取决于时间最长的那个。</p>\n</blockquote>\n<blockquote>\n<p>之前是 <code>yield []</code>, 后来 dva 升级了 saga 的版本之后就推荐用 <code>yield all([])</code></p>\n</blockquote>\n<ul>\n<li><p>yield []</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*fetchList(&#123; payload, callback &#125;, &#123; &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [xx1_req, xx2_req, xx3_req] = <span class=\"keyword\">yield</span> [</span><br><span class=\"line\">    call(xx1, payload),</span><br><span class=\"line\">    call(xx2, payload),</span><br><span class=\"line\">    call(xx3, payload),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>yield all([])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*fetchList(&#123; payload, callback &#125;, &#123; all &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [xx1_req, xx2_req, xx3_req] = <span class=\"keyword\">yield</span> all([</span><br><span class=\"line\">    call(xx1, payload),</span><br><span class=\"line\">    call(xx2, payload),</span><br><span class=\"line\">    call(xx3, payload),</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":[],"tags":["随笔","JavaScript","React"]},{"title":"折腾一个chrome插件","url":"http://yoursite.com/2019/01/04/折腾一个chrome插件/","content":"<blockquote>\n<p>前言：作为一个开发者，是否有时一个单词不认识或者业务命名而烦恼呢，以至于需要打开浏览器，然后打开google翻译，如此繁琐的打开页面可能一天重复好几遍，而我们开发者对于浏览器标签打开的又多，所以如何简化我们重新打开标签来翻译呢？所以浏览器插件就非常强大了。</p>\n</blockquote>\n<p>chrome浏览器是一个工作、学习和生活的必备工具。除了chrome本身的基本能力（控制台等）外，能大幅提高这个神器的使用体验的是它可扩展能力（插件）以及丰富的插件生态。接下来我们就来折腾一个在线翻译的chrome插件。</p>\n<p><img src=\"https://raw.githubusercontent.com/hzzly/online-translate/master/online-translate.png\" alt=\"online-translate\"></p>\n<p>好了，有了需求我们就得开发了(囧)！</p>\n<h2 id=\"要点：\"><a href=\"#要点：\" class=\"headerlink\" title=\"要点：\"></a>要点：</h2><ul>\n<li>manifest.json  // chrome配置文件</li>\n<li>webpack配置(打包，热编译)</li>\n<li>jsonp</li>\n<li>ajax封装</li>\n</ul>\n<p>开发之前了解一下什么是Chrome插件=&gt;</p>\n<h2 id=\"什么是Chrome插件\"><a href=\"#什么是Chrome插件\" class=\"headerlink\" title=\"什么是Chrome插件\"></a>什么是Chrome插件</h2><p>Chrome插件是一个用Web技术开发、用来增强浏览器功能的软件，它其实就是一个由HTML、CSS、JS、图片等资源组成的一个.crx后缀的压缩包。</p>\n<h2 id=\"核心介绍（manifest-json）\"><a href=\"#核心介绍（manifest-json）\" class=\"headerlink\" title=\"核心介绍（manifest.json）\"></a>核心介绍（manifest.json）</h2><p>这是一个Chrome插件最重要也是必不可少的文件，用来配置所有和插件相关的配置，必须放在需要浏览器打包的根目录。其中，manifest_version、name、version3个是必不可少的，description和icons是推荐的。</p>\n<p>栗子(比较全)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 清单文件的版本，这个必须写，而且必须是2</span></span><br><span class=\"line\">  <span class=\"string\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 插件的名称</span></span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 插件的版本</span></span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 插件描述</span></span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"简单的Chrome扩展demo\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 图标，一般偷懒全部用一个尺寸的也没问题</span></span><br><span class=\"line\">  <span class=\"string\">\"icons\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"16\"</span>: <span class=\"string\">\"img/icon.png\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"48\"</span>: <span class=\"string\">\"img/icon.png\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"128\"</span>: <span class=\"string\">\"img/icon.png\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 会一直常驻的后台JS或后台页面</span></span><br><span class=\"line\">  <span class=\"string\">\"background\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span></span><br><span class=\"line\">    <span class=\"string\">\"page\"</span>: <span class=\"string\">\"background.html\"</span></span><br><span class=\"line\">    <span class=\"comment\">//\"scripts\": [\"js/background.js\"]</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 浏览器右上角图标设置，browser_action、page_action、app必须三选一</span></span><br><span class=\"line\">  <span class=\"string\">\"browser_action\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"default_icon\"</span>: <span class=\"string\">\"img/icon.png\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 图标悬停时的标题，可选</span></span><br><span class=\"line\">    <span class=\"string\">\"default_title\"</span>: <span class=\"string\">\"这是一个示例Chrome插件\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 当某些特定页面打开才显示的图标</span></span><br><span class=\"line\">  <span class=\"comment\">/*\"page_action\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    \"default_icon\": \"img/icon.png\",</span></span><br><span class=\"line\"><span class=\"comment\">    \"default_title\": \"我是pageAction\",</span></span><br><span class=\"line\"><span class=\"comment\">    \"default_popup\": \"popup.html\"</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;,*/</span></span><br><span class=\"line\">  <span class=\"comment\">// 需要直接注入页面的JS</span></span><br><span class=\"line\">  <span class=\"string\">\"content_scripts\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"comment\">//\"matches\": [\"http://*/*\", \"https://*/*\"],</span></span><br><span class=\"line\">    <span class=\"comment\">// \"&lt;all_urls&gt;\" 表示匹配所有地址</span></span><br><span class=\"line\">    <span class=\"string\">\"matches\"</span>: [<span class=\"string\">\"&lt;all_urls&gt;\"</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 多个JS按顺序注入</span></span><br><span class=\"line\">    <span class=\"string\">\"js\"</span>: [<span class=\"string\">\"js/jquery-1.8.3.js\"</span>, <span class=\"string\">\"js/content-script.js\"</span>],</span><br><span class=\"line\">    <span class=\"comment\">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span></span><br><span class=\"line\">    <span class=\"string\">\"css\"</span>: [<span class=\"string\">\"css/custom.css\"</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 代码注入的时间，可选值： \"document_start\", \"document_end\", or \"document_idle\"，最后一个表示页面空闲时，默认document_idle</span></span><br><span class=\"line\">    <span class=\"string\">\"run_at\"</span>: <span class=\"string\">\"document_start\"</span></span><br><span class=\"line\">  &#125;, &#123; <span class=\"comment\">// 这里仅仅是为了演示content-script可以配置多个规则</span></span><br><span class=\"line\">    <span class=\"string\">\"matches\"</span>: [<span class=\"string\">\"*://*/*.png\"</span>, <span class=\"string\">\"*://*/*.jpg\"</span>, <span class=\"string\">\"*://*/*.gif\"</span>, <span class=\"string\">\"*://*/*.bmp\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"js\"</span>: [<span class=\"string\">\"js/show-image-content-size.js\"</span>]</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  <span class=\"comment\">// 权限申请</span></span><br><span class=\"line\">  <span class=\"string\">\"permissions\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"contextMenus\"</span>, <span class=\"comment\">// 右键菜单</span></span><br><span class=\"line\">    <span class=\"string\">\"tabs\"</span>, <span class=\"comment\">// 标签</span></span><br><span class=\"line\">    <span class=\"string\">\"notifications\"</span>, <span class=\"comment\">// 通知</span></span><br><span class=\"line\">    <span class=\"string\">\"webRequest\"</span>, <span class=\"comment\">// web请求</span></span><br><span class=\"line\">    <span class=\"string\">\"webRequestBlocking\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"storage\"</span>, <span class=\"comment\">// 插件本地存储</span></span><br><span class=\"line\">    <span class=\"string\">\"http://*/*\"</span>, <span class=\"comment\">// 需要请求的地址</span></span><br><span class=\"line\">    <span class=\"string\">\"https://*/*\"</span> <span class=\"comment\">// 需要请求的地址</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>介绍完后我们就来开发了(码代码中…)</p>\n<h2 id=\"开发-基于Vue\"><a href=\"#开发-基于Vue\" class=\"headerlink\" title=\"开发(基于Vue)\"></a>开发(基于Vue)</h2><h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir online-translate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> online-translate</span><br><span class=\"line\"></span><br><span class=\"line\">npm init</span><br><span class=\"line\"></span><br><span class=\"line\">// 文件层级</span><br><span class=\"line\">├── chrome  // 浏览器打包的文件夹</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── src  // 源码</span><br><span class=\"line\">└── webpack.config.js  // wepack</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装项目依赖</span><br><span class=\"line\">npm install vue element-ui --save</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装开发依赖</span><br><span class=\"line\">npm install babel-core babel-loader babel-plugin-component babel-preset-env cross-env css-loader file-loader html-webpack-plugin style-loader vue-loader vue-template-compiler webpack webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    popup: <span class=\"string\">'./src/popup.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./chrome'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          loaders: &#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// other vue-loader options go here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'style-loader!css-loader'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(eot|svg|ttf|woff|woff2)(\\?\\S*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg)$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'[name].[ext]?[hash]'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// new webpack.HotModuleReplacementPlugin(),</span></span><br><span class=\"line\">    <span class=\"comment\">// new webpack.NamedModulesPlugin(),</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'./index.html'</span>),</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  performance: &#123;</span><br><span class=\"line\">    hints: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'#eval-source-map'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.devtool = <span class=\"string\">'#source-map'</span></span><br><span class=\"line\">  <span class=\"comment\">// http://vue-loader.vuejs.org/en/workflow/production.html</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.plugins = (<span class=\"built_in\">module</span>.exports.plugins || []).concat([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好了，我们就能愉快的开发了</p>\n<h3 id=\"接下来就是-Vue-的开发了！\"><a href=\"#接下来就是-Vue-的开发了！\" class=\"headerlink\" title=\"接下来就是 Vue 的开发了！\"></a>接下来就是 <code>Vue</code> 的开发了！</h3><p>正常的项目开发…</p>\n<p>详细源码可以看<a href=\"https://github.com/hzzly/online-translate\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>把代码打包到了chrome文件夹内，然后就可以使用chrome扩展进行打包扩展程序，会生成.crx和.pem文件，然后直接发布或者把.crx文件拖进扩展程序内进行内测。</p>\n","categories":[],"tags":["随笔","vue","chrome"]},{"title":"Node 配置文件的定制","url":"http://yoursite.com/2018/11/13/Node-配置文件的定制/","content":"<blockquote>\n<p>在任何一个项目中都缺少不了配置文件<br>具有下面的特点: 数据量不大,信息需要长期保存,容易维护</p>\n</blockquote>\n<p>现在是大前端的时代，Node 的重要性不言而喻。在使用 Node 作为后端或者中间层的技术架构时，往往需要用到一些可配置的变量，比如数据库，在开发时我们会连开发的数据库，生成环境我们需要连生产的数据库，这样我们就需要根据不同的环境加载不一样的配置文件，从而提高我们的开发效率，接下来我们就一起来定制我们的配置文件。</p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>在 Node 中可以通过 <code>process.env</code> 来访问当前的环境变量信息。<br>比如我们在 <code>package.json</code> 中通过 <code>scripts</code> 定义的shell脚本执行对应的命令。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"node ./bin/www\",</span><br><span class=\"line\">    \"dev\": \"NODE_ENV=dev node ./bin/www\",</span><br><span class=\"line\">    \"pro\": \"NODE_ENV=pro node ./bin/www\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，上面有三条条启动命令，一条是默认的 <code>start</code>，另外两条我们通过 <code>NODE_ENV=xxx</code> 来设置了对应的环境，当我们使用 <code>npm run dev</code> 启动项目的时候，通过 <code>process.env.NODE_ENV</code> 就可以取到项目的当前环境。</p>\n<h2 id=\"通过环境变量指定对应的配置文件\"><a href=\"#通过环境变量指定对应的配置文件\" class=\"headerlink\" title=\"通过环境变量指定对应的配置文件\"></a>通过环境变量指定对应的配置文件</h2><p>在上面我们通过shell脚本指定了对应的环境，那我们就可以通过 <code>process.env.NODE_ENV</code> 来加载对应的配置文件了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\">    ...省略</span><br><span class=\"line\">    mongodb: <span class=\"string\">'mongodb://localhost:27017/demo'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    ...省略</span><br><span class=\"line\">    mongodb: <span class=\"string\">'mongodb://127.0.0.0:27017/demo'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mongodb = process.env.NODE_ENV === <span class=\"string\">'dev'</span> ? config.build.mongodb : config.dev.mongodb</span><br></pre></td></tr></table></figure></p>\n<p>这样，我们就可以开开心心的放心的写代码了，但这样\b写还不是很优雅，都写到一个文件里了，不太好维护，接下来我们就真正的动态加载，不需要我们再加判断了。</p>\n<h2 id=\"config-lite\"><a href=\"#config-lite\" class=\"headerlink\" title=\"config-lite\"></a>config-lite</h2><blockquote>\n<p><a href=\"https://github.com/nswbmw/config-lite\" target=\"_blank\" rel=\"noopener\">config-lite</a>： A super simple &amp; flexible &amp; intuitive config module, support yaml &amp; toml.</p>\n</blockquote>\n<p>这一次，我们针对不同的环境，将配置写入不同的配置文件中，在项目根目录下新建config目录，里面新建不同环境的配置文件：default.js、dev.js和pro.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// default.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  session: &#123;</span><br><span class=\"line\">    secret: <span class=\"string\">'config-lite-demo'</span>,</span><br><span class=\"line\">    resave: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    saveUninitialized: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    cookie: &#123;</span><br><span class=\"line\">      maxAge: <span class=\"number\">1000</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dev.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"https://dev.com\"</span>,</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://localhost:27017/test'</span>,</span><br><span class=\"line\">  ...省略</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pro.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"https://pro.com\"</span>,</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://127.0.0.0:27017/test'</span>,</span><br><span class=\"line\">  ...省略</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>好了，配置文件写好了，如何使用呢？这里我们使用的 <code>config-lite</code> 插件，这个插件依旧是依据我们shell脚本指定的对应环境来选择不同的配置文件。</p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i config-lite --save</span><br></pre></td></tr></table></figure>\n<p>当我们使用 <code>npm run dev</code> 启动项目的时候，<code>config-lite</code>会去抓取dev.js配置，并且会与default.js里配置去合并，如果有相同的对象，会覆盖default.js里的配置。同理 <code>npm run pro</code></p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'config-lite'</span>)(__dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1、如果\b运行 npm run dev</span></span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"https://dev.com\"</span>,</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://localhost:27017/test'</span>,</span><br><span class=\"line\">  session: &#123;</span><br><span class=\"line\">    secret: <span class=\"string\">'config-lite-demo'</span>,</span><br><span class=\"line\">    resave: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    saveUninitialized: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    cookie: &#123;</span><br><span class=\"line\">      maxAge: <span class=\"number\">1000</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...省略</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、如果\b运行 npm run pro</span></span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"https://pro.com\"</span>,</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://127.0.0.0:27017/test'</span>,</span><br><span class=\"line\">  session: &#123;</span><br><span class=\"line\">    secret: <span class=\"string\">'config-lite-demo'</span>,</span><br><span class=\"line\">    resave: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    saveUninitialized: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    cookie: &#123;</span><br><span class=\"line\">      maxAge: <span class=\"number\">1000</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b至此，我们就得到了更好维护的动态加载配置文件。还有一个<code>问题</code>（大多数情况下，在windows平台下使用类似于: NODE_ENV=pro的命令行指令会卡住，windows平台与POSIX在使用命令行时有许多区别（例如在POSIX，使用$ENV_VAR,在windows，使用%ENV_VAR%。。。））。那该如何解决呢？👇</p>\n<h2 id=\"cross-env\"><a href=\"#cross-env\" class=\"headerlink\" title=\"cross-env\"></a>cross-env</h2><blockquote>\n<p>cross-env 让这一切变得简单，不同平台使用唯一指令，无需担心跨平台问题</p>\n</blockquote>\n<h3 id=\"Install-1\"><a href=\"#Install-1\" class=\"headerlink\" title=\"Install\"></a>Install</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i cross-env --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"Usage-1\"><a href=\"#Usage-1\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"scripts\": &#123;</span><br><span class=\"line\">    \"start\": \"node ./bin/www\",</span><br><span class=\"line\">    \"dev\": \"cross-env NODE_ENV=dev node ./bin/www\",</span><br><span class=\"line\">    \"pro\": \"cross-env NODE_ENV=pro node ./bin/www\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样 NODE_ENV 便设置成功，无需担心跨平台问题。</p>\n<h2 id=\"egg-配置文件的使用\"><a href=\"#egg-配置文件的使用\" class=\"headerlink\" title=\"egg 配置文件的使用\"></a>egg 配置文件的使用</h2><p>在 config 目录(脚手架生成的)新增 config.dev.js 和 config.pro.js，然后在文件内写我们对应环境的配置。</p>\n<ul>\n<li>配置环境<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"script\": &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"dev\": \"EGG_SERVER_ENV=dev egg-bin dev\",</span><br><span class=\"line\">    \"pro\": \"EGG_SERVER_ENV=pro egg-scripts start\",</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在 egg 中通过 <code>EGG_SERVER_ENV</code> \b来声明对应的环境变量。</p>\n<ul>\n<li>使用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"keyword\">this</span>.app.config <span class=\"comment\">// 得到对应环境的配置文件(也会和 default 进行合并)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>完结，好久没写了，有点生疏了，苦笑！！！</p>\n","categories":[],"tags":["随笔","node"]},{"title":"前端路由的实现原理","url":"http://yoursite.com/2017/09/16/前端路由的实现原理/","content":"<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><blockquote>\n<p>在现代前端开发中，路由是非常重要的一环。但路由到底是什么呢？有些说：路由就是指随着浏览器地址栏的变化，展示给用户的页面也不相同。这是从路由的用途上来解释路由是什么的，还有一种说法是：路由就是URL到函数的映射。这是从路由的实现原理上来解释路由是什么的。这两种说法都很有道理。</p>\n</blockquote>\n<blockquote>\n<p>早期的路由都是后端实现的，直接根据 url 来 reload 页面，页面变得越来越复杂服务器端压力变大，随着 ajax 的出现，页面实现非 reload 就能刷新数据，也给前端路由的出现奠定了基础。我们可以通过记录 url 来记录 ajax 的变化，从而实现前端路由。</p>\n</blockquote>\n<p>前端路由说白了就是监听浏览器路由地址的变化，渲染不同的页面或组件。<br>下面主要讲两种主流方式实现前端路由：</p>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>这里不细说每一个 API 的用法，大家可以看 MDN 的文档：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org…</a></p>\n<p>14年后，因为HTML5标准发布，新增了两个 API，history.pushState 和 history.replaceState，通过这两个 API 可以改变 url 地址且不会发送请求。</p>\n<p>这两个 API 都接收三个参数，分别是</p>\n<ul>\n<li>状态对象（state object） — 一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</li>\n<li>标题（title） — FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</li>\n<li>地址（URL） — 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。<br>相同之处是两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新。</li>\n</ul>\n<p>不同之处在于，pushState会增加一条新的历史记录，而replaceState则会替换当前的历史记录。</p>\n<p>我们拿大百度的控制台举例子（具体说是我的浏览器在百度首页打开控制台。。。）</p>\n<p>我们在控制台输入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"https://www.baidu.com/?name=hzzly\"</span>);</span><br></pre></td></tr></table></figure>\n<p>好，我们观察此时的 url 变成了这样<br><code>https://www.baidu.com/?name=hzzly</code></p>\n<p>我们这里不一一测试，直接给出其它用法，大家自行尝试<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"https://www.baidu.com/name/hzzly\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//url: https://www.baidu.com/name/hzzly</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"?name=hzzly\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//url: https://www.baidu.com?name=hzzly</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"name=hzzly\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//url: https://www.baidu.com/name=hzzly</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"/name/hzzly\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//url: https://www.baidu.com/name/hzzly</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"name/hzzly\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//url: https://www.baidu.com/name/hzzly</span></span><br></pre></td></tr></table></figure></p>\n<p>每次改变 url 页面并没有刷新，同样根据上文所述，浏览器会产生历史记录。</p>\n<p>我们需要一个根据监听history变化触发的事件 —— popstate 事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchAndUpdate</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 匹配路径 做 dom 更新操作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>, matchAndUpdate)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h1><p>我们经常在 url 中看到 #，这个 # 有两种情况，一个是我们所谓的锚点，比如典型的各个标题之间的跳转等，路由里的 # 不叫锚点，我们称之为 hash。</p>\n<p>同样我们需要一个根据监听哈希变化触发的事件 —— hashchange 事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchAndUpdate</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 匹配 hash 做 dom 更新操作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, matchAndUpdate)</span><br></pre></td></tr></table></figure>\n<p>我们用 window.location 处理哈希的改变时不会重新渲染页面，而是当作新页面加到历史记录中，这样我们跳转页面就可以在 hashchange 事件中注册 ajax 从而改变页面内容。</p>\n<h1 id=\"前端路由优缺点\"><a href=\"#前端路由优缺点\" class=\"headerlink\" title=\"前端路由优缺点\"></a>前端路由优缺点</h1><p>优点：<br>1.从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升。<br>2.在某些场合中，用ajax请求，可以让页面无刷新，页面变了但Url没有变化，用户就不能复制到想要的地址，用前端路由做单页面网页就很好的解决了这个问题</p>\n<p>缺点：<br>使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存。</p>\n","categories":[],"tags":["随笔"]},{"title":"在Vue.js中使用Mixins","url":"http://yoursite.com/2017/09/12/在Vue-js中使用Mixins/","content":"<blockquote>\n<p>一个很常见的场景: 有两个非常相似的组件, 它们拥有非常相似的基本功能, 但是它们之间又有足够的不同的地方, 该如何选择呢? 我们是应该将它们分成两个完全不同的组件呢? 还是创建一个基础组件, 然后定义足够多的props以方便区分使用场景?</p>\n</blockquote>\n<p>这两种方式都不是完美的: 如果你将它们分成两个完全不同的组件, 在需求变化(功能变化)时, 可能会增加需要同时修改两个组件的风险, 这违反了”DRY”的前提. 另一方面, 太多的props很快会让人变得凌乱, 并且, 迫使维护人员, 甚至是你自己, 要首先理解这些props的上下文才能使用它, 这会让人非常失望.</p>\n<p>Vue的Mixins是非常实用的编程方式, 因为最终实用的编程是通过不断减少运动部件(moving parts)使代码变得容易理解. (关于这一点, Michael Feathers有一个很好的引用). 一个mixin允许你封装一个功能, 以便你能在整个应用程序中的不同组件中使用它. 如果mixin被正确的创建, 它们是纯粹的–它们不会修改或更改函数的作用范围(scope)之外的内容, 因此, 您可以在多个地方执行它们, 并且只要输入值相同, 总是能非常可靠得得到相同的结果. 这真的非常强大.</p>\n<h1 id=\"认识Mixins\"><a href=\"#认识Mixins\" class=\"headerlink\" title=\"认识Mixins\"></a>认识Mixins</h1><p><a href=\"https://cn.vuejs.org/v2/guide/mixins.html\" target=\"_blank\" rel=\"noopener\">混合 (mixins)</a> 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混合对象可以包含任意组件选项。以组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p>\n<h1 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h1><blockquote>\n<p>假设我们有一些不同的组件, 它们的工作是切换状态boolean, 一个模态(modal)和一个提示(tooltip). 这些tooltips和modals没有很多共同之处, 除了这个功能: 它们看起来不一样, 它们使用起来也不尽相同, 但是它们的逻辑是相似的 .</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//modal</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Modal = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'#modal'</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isShowing: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleShow() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isShowing = !<span class=\"keyword\">this</span>.isShowing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//tooltip</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Tooltip = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'#tooltip'</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isShowing: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleShow() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isShowing = !<span class=\"keyword\">this</span>.isShowing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以从中提取逻辑, 并创建可以复用的部分：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toggle = &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isShowing: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleShow() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isShowing = !<span class=\"keyword\">this</span>.isShowing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> Modal = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'#modal'</span>,</span><br><span class=\"line\">  mixins: [toggle]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> Tooltip = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'#tooltip'</span>,</span><br><span class=\"line\">  mixins: [toggle]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>duang — 一个小而简单的🌰让我们知道了Mixins对于封装一些可复用的功能如此有趣、方便、实用。</p>\n<h1 id=\"项目实践\"><a href=\"#项目实践\" class=\"headerlink\" title=\"项目实践\"></a>项目实践</h1><blockquote>\n<ul>\n<li><a href=\"https://github.com/hzzly/MagicMusic/blob/master/src/common/js/mixin.js\" target=\"_blank\" rel=\"noopener\">MagicMusic</a> star(200+)</li>\n</ul>\n</blockquote>\n","categories":[],"tags":["随笔","vue"]},{"title":"Vue插件的开发(一)","url":"http://yoursite.com/2017/08/25/Vue插件的开发-一/","content":"<blockquote>\n<p>前言：随着 Vue.js 越来越火，Vue.js 的相关插件也在不断的被贡献出来，数不胜数。比如官方推荐的 vue-router、vuex 等，都是非常优秀的插件。但是我们更多的人还只停留在使用的阶段，比较少自己开发。所以接下来通过一个简单的 vue-toast 插件，来了解掌握插件的开发和使用。</p>\n</blockquote>\n<h1 id=\"认识插件\"><a href=\"#认识插件\" class=\"headerlink\" title=\"认识插件\"></a>认识插件</h1><p>想要开发插件，先要认识一个插件是什么样子的。<a href=\"https://cn.vuejs.org/v2/guide/plugins.html\" target=\"_blank\" rel=\"noopener\">官方文档:插件</a></p>\n<p>Vue.js 的插件应当有一个公开方法 install 。这个方法的第一个参数是 Vue 构造器 , 第二个参数是一个可选的选项对象:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">\tVue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 1. 添加全局方法或属性，如: vue-custom-element</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tVue.directive(<span class=\"string\">'my-directive'</span>, &#123;  <span class=\"comment\">// 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch</span></span><br><span class=\"line\">\t\tbind (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tVue.mixin(&#123;</span><br><span class=\"line\">\t\tcreated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 3. 通过全局 mixin方法添加一些组件选项，如: vuex</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tVue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;  <span class=\"comment\">// 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来要讲到的 vue-toast 插件则是通过添加实例方法实现的。我们先来看个小例子。先新建个js文件来编写插件：toast.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// toast.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Toast = &#123;&#125;;</span><br><span class=\"line\">Toast.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">\tVue.prototype.$msg = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure>\n<p>在 main.js 中，需要导入 toast.js 并且通过全局方法 Vue.use() 来使用插件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Toast <span class=\"keyword\">from</span> <span class=\"string\">'./toast.js'</span>;</span><br><span class=\"line\">Vue.use(Toast);</span><br></pre></td></tr></table></figure>\n<p>然后，我们在组件中来获取该插件定义的 $msg 属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.vue</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$msg);         <span class=\"comment\">// Hello World</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，控制台成功的打印出了 Hello World 。既然 $msg 能获取到，那么我们就可以来实现我们的 vue-toast 插件了。</p>\n<h1 id=\"开发-vue-toast-插件\"><a href=\"#开发-vue-toast-插件\" class=\"headerlink\" title=\"开发 vue-toast 插件\"></a>开发 vue-toast 插件</h1><p>需求：在组件中通过调用 <strong>this.$toast(‘网络请求失败’) </strong>来弹出提示，默认在底部显示。可以通过调用 <strong>this.$toast.top()</strong> 或 <strong>this.$toast.center()</strong> 等方法来实现在不同位置显示。</p>\n<p>整理一下思路，弹出提示的时候，我可以在 body 中添加一个 div 用来显示提示信息，不同的位置我通过添加不同的类名来定位，那就可以开始写了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// toast.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Toast = &#123;&#125;;</span><br><span class=\"line\">Toast.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">\tVue.prototype.$toast = <span class=\"function\">(<span class=\"params\">tips</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> toastTpl = Vue.extend(&#123;     <span class=\"comment\">// 1、创建构造器，定义好提示信息的模板</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'&lt;div class=\"vue-toast\"&gt;'</span> + tips + <span class=\"string\">'&lt;/div&gt;'</span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> tpl = <span class=\"keyword\">new</span> toastTpl().$mount().$el;  <span class=\"comment\">// 2、创建实例，挂载到文档以后的地方</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.body.appendChild(tpl);     <span class=\"comment\">// 3、把创建的实例添加到body中</span></span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 4、延迟2.5秒后移除该提示</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.removeChild(tpl);</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">2500</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure>\n<p>好像很简单，我们就实现了 this.$toast() ，接下来显示不同位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// toast.js</span></span><br><span class=\"line\">[<span class=\"string\">'bottom'</span>, <span class=\"string\">'center'</span>, <span class=\"string\">'top'</span>].forEach(<span class=\"function\"><span class=\"params\">type</span> =&gt;</span> &#123;</span><br><span class=\"line\">\tVue.prototype.$toast[type] = <span class=\"function\">(<span class=\"params\">tips</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Vue.prototype.$toast(tips,type)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里把 type 传给 $toast 在该方法里进行不同位置的处理，上面说了通过添加不同的类名(toast-bottom、toast-top、toast-center)来实现，那 $toast 方法需要小小修改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$toast = <span class=\"function\">(<span class=\"params\">tips,type</span>) =&gt;</span> &#123;     <span class=\"comment\">// 添加 type 参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> toastTpl = Vue.extend(&#123;             <span class=\"comment\">// 模板添加位置类</span></span><br><span class=\"line\">\t\ttemplate: <span class=\"string\">'&lt;div class=\"vue-toast toast-'</span>+ type +<span class=\"string\">'\"&gt;'</span> + tips + <span class=\"string\">'&lt;/div&gt;'</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好像差不多了。但是如果我想默认在顶部显示，我每次都要调用 this.$toast.top() 好像就有点多余了，我能不能 this.$toast() 就直接在我想要的地方呢？还有我不想要 2.5s 后才消失呢？这时候注意到 Toast.install(Vue,options) 里的 options 参数，我们可以在 Vue.use() 通过 options 传进我们想要的参数。最后修改插件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Toast = &#123;&#125;;</span><br><span class=\"line\">Toast.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> opt = &#123;</span><br><span class=\"line\">\t\tdefaultType:<span class=\"string\">'bottom'</span>,   <span class=\"comment\">// 默认显示位置</span></span><br><span class=\"line\">\t\tduration:<span class=\"string\">'2500'</span>         <span class=\"comment\">// 持续时间</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> property <span class=\"keyword\">in</span> options)&#123;</span><br><span class=\"line\">\t\topt[property] = options[property];  <span class=\"comment\">// 使用 options 的配置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tVue.prototype.$toast = <span class=\"function\">(<span class=\"params\">tips,type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(type)&#123;</span><br><span class=\"line\">\t\t\topt.defaultType = type;         <span class=\"comment\">// 如果有传type，位置则设为该type</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'vue-toast'</span>).length)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果toast还在，则不再执行</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> toastTpl = Vue.extend(&#123;</span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'&lt;div class=\"vue-toast toast-'</span>+opt.defaultType+<span class=\"string\">'\"&gt;'</span> + tips + <span class=\"string\">'&lt;/div&gt;'</span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> tpl = <span class=\"keyword\">new</span> toastTpl().$mount().$el;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.body.appendChild(tpl);</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.removeChild(tpl);</span><br><span class=\"line\">\t\t&#125;, opt.duration)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t[<span class=\"string\">'bottom'</span>, <span class=\"string\">'center'</span>, <span class=\"string\">'top'</span>].forEach(<span class=\"function\"><span class=\"params\">type</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tVue.prototype.$toast[type] = <span class=\"function\">(<span class=\"params\">tips</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Vue.prototype.$toast(tips,type)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure>\n<p>这样子一个简单的 vue 插件就实现了，并且可以通过 npm 打包发布，下次就可以使用 npm install 来安装了。</p>\n<p>好久没更新博客，逃。。。</p>\n","categories":[],"tags":["随笔","vue"]},{"title":"vue与echarts的可视化","url":"http://yoursite.com/2017/07/09/vue与echarts的可视化/","content":"<p>好久没有更新博客了，但我并没有偷懒哦。因为进入了公司实习，需要熟悉项目需求以及技术栈，公司技术栈用的react与dva，所以需要现学现卖。趁着周末写写vue，美滋滋，哈哈哈。</p>\n<h1 id=\"一、配方\"><a href=\"#一、配方\" class=\"headerlink\" title=\"一、配方\"></a>一、配方</h1><ul>\n<li>vue</li>\n<li>echarts</li>\n</ul>\n<h1 id=\"二、参考案例\"><a href=\"#二、参考案例\" class=\"headerlink\" title=\"二、参考案例\"></a>二、参考案例</h1><ul>\n<li><a href=\"http://gallery.echartsjs.com/explore.html\" target=\"_blank\" rel=\"noopener\">gallery</a> 社区demo</li>\n</ul>\n<h1 id=\"三、实践\"><a href=\"#三、实践\" class=\"headerlink\" title=\"三、实践\"></a>三、实践</h1><h2 id=\"3-1安装-echarts\"><a href=\"#3-1安装-echarts\" class=\"headerlink\" title=\"3.1安装 echarts\"></a>3.1安装 echarts</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install echarts --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2vue-dom-结构\"><a href=\"#3-2vue-dom-结构\" class=\"headerlink\" title=\"3.2vue dom 结构\"></a>3.2vue dom 结构</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"charts\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:300px;width:300px\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3在vue中引入echarts\"><a href=\"#3-3在vue中引入echarts\" class=\"headerlink\" title=\"3.3在vue中引入echarts\"></a>3.3在vue中引入echarts</h2><p>因为ECharts初始化必须绑定dom，所以我们只能在vue的mounted生命周期里初始化。</p>\n<h3 id=\"3-3-1全部引入\"><a href=\"#3-3-1全部引入\" class=\"headerlink\" title=\"3.3.1全部引入\"></a>3.3.1全部引入</h3><p>可以直接在项目代码中 require(‘echarts’) 或 import 得到 ECharts，我这里通过es6的import来引入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">'echarts'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">mounted () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.initChart()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  initChart () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.chart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'charts'</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">      title: &#123; <span class=\"attr\">text</span>: <span class=\"string\">'ECharts 入门示例'</span> &#125;,</span><br><span class=\"line\">      tooltip: &#123;&#125;,</span><br><span class=\"line\">      xAxis: &#123;</span><br><span class=\"line\">        data: [<span class=\"string\">\"衬衫\"</span>,<span class=\"string\">\"羊毛衫\"</span>,<span class=\"string\">\"雪纺衫\"</span>,<span class=\"string\">\"裤子\"</span>,<span class=\"string\">\"高跟鞋\"</span>,<span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      yAxis: &#123;&#125;,</span><br><span class=\"line\">      series: [&#123;</span><br><span class=\"line\">        name: <span class=\"string\">'销量'</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">        data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.chart.setOption(option)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-2按需引入\"><a href=\"#3-3-2按需引入\" class=\"headerlink\" title=\"3.3.2按需引入\"></a>3.3.2按需引入</h3><p>默认使用 require(‘echarts’) 得到的是已经加载了所有图表和组件的 ECharts 包，因此体积会比较大，如果在项目中对体积要求比较苛刻，也可以只按需引入需要的模块。</p>\n<p>例如上面示例代码中只用到了柱状图，提示框和标题组件，因此在引入的时候也只需要引入这些模块，可以有效的将打包后的体积从 400 多 KB 减小到 170 多 KB。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 ECharts 主模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">'echarts/lib/echarts'</span></span><br><span class=\"line\"><span class=\"comment\">// 引入柱状图</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'echarts/lib/chart/bar'</span></span><br><span class=\"line\"><span class=\"comment\">// 引入提示框和标题组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'echarts/lib/component/tooltip'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'echarts/lib/component/title'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 后面的跟上面的就一样了</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3动态改变ECharts的配置-option\"><a href=\"#3-3-3动态改变ECharts的配置-option\" class=\"headerlink\" title=\"3.3.3动态改变ECharts的配置(option)\"></a>3.3.3动态改变ECharts的配置(option)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种 watch options变化 利用vue的深度 watcher，options一有变化就重新setOption</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    handler(options) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chart.setOption(<span class=\"keyword\">this</span>.options)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种 只watch 数据的变化 只有数据变化时触发ECharts</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  seriesData(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setOptions(&#123;<span class=\"attr\">series</span>:val&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4结果\"><a href=\"#3-4结果\" class=\"headerlink\" title=\"3.4结果\"></a>3.4结果</h2><p><img src=\"http://omt3u4bph.bkt.clouddn.com/echarts.png\" alt=\"vue-echarts\"><br>到这我们在页面上就可以显示图表了，实现可视化数据，是不是很酷炫。</p>\n<h1 id=\"四、参考\"><a href=\"#四、参考\" class=\"headerlink\" title=\"四、参考\"></a>四、参考</h1><p><a href=\"http://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts\" target=\"_blank\" rel=\"noopener\">在 webpack 中使用 ECharts</a></p>\n","categories":[],"tags":["随笔","vue","echarts"]},{"title":"基于vue-cli配置proxyTable开发环境的跨域","url":"http://yoursite.com/2017/06/21/基于vue-cli配置proxyTable开发环境的跨域/","content":"<blockquote>\n<p>前言：目前前端项目普遍采用前后端分离的思想来开发，这样在和后端进行数据联调时势必会面临恼人的跨域问题，最近几个基于Vue开发项目时也遇到了这个问题，网上关于跨域的解决方案很多，这里就简单的介绍基于vue-cli配置proxyTable的开发环境来解决跨域。</p>\n</blockquote>\n<p>还不懂前后端分离的可以移步👉：<a href=\"http://hjingren.cn/2017/03/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%B0%9D%E8%AF%95/\" target=\"_blank\" rel=\"noopener\">前后端分离的尝试</a></p>\n<h1 id=\"配置-proxyTable\"><a href=\"#配置-proxyTable\" class=\"headerlink\" title=\"配置 proxyTable\"></a>配置 proxyTable</h1><p>在 config/index.js 中，把 dev 下的 proxytable 里面配置如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxyTable: &#123;</span><br><span class=\"line\">  <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">    target: <span class=\"string\">'http://api.hjingren.cn'</span>,</span><br><span class=\"line\">    changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    pathRewrite: &#123;</span><br><span class=\"line\">      <span class=\"string\">'^/api'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用（请求）\"><a href=\"#使用（请求）\" class=\"headerlink\" title=\"使用（请求）\"></a>使用（请求）</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">'/api/playlist/detail?id=12345'</span>)</span><br></pre></td></tr></table></figure>\n<p>最后：vue-cli的这个配置来自于其使用的插件<a href=\"https://github.com/chimurai/http-proxy-middleware\" target=\"_blank\" rel=\"noopener\">http-proxy-middleware</a>，想进一步了解的可以深入研究。</p>\n","categories":[],"tags":["随笔","vue"]},{"title":"基于vue-cli配置移动端自适应","url":"http://yoursite.com/2017/06/16/基于vue-cli配置移动端自适应/","content":"<blockquote>\n<p>之前写过一篇关于移动端屏幕适配：<a href=\"http://hjingren.cn/2017/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E8%A7%A3%E5%86%B3/\" target=\"_blank\" rel=\"noopener\">移动端屏幕适配的解决</a>，今天来聊一聊基于vue-cli配置的移动端屏幕适配问题。</p>\n</blockquote>\n<p>配方还是一样：手淘的 <a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"noopener\">lib-flexible</a> + rem</p>\n<h1 id=\"配置-flexible\"><a href=\"#配置-flexible\" class=\"headerlink\" title=\"配置 flexible\"></a>配置 flexible</h1><h2 id=\"安装-lib-flexible\"><a href=\"#安装-lib-flexible\" class=\"headerlink\" title=\"安装 lib-flexible\"></a>安装 lib-flexible</h2><p>在命令行中运行如下安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lib-flexible --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"引入-lib-flexible\"><a href=\"#引入-lib-flexible\" class=\"headerlink\" title=\"引入 lib-flexible\"></a>引入 lib-flexible</h2><p>在项目入口文件 main.js 里 引入 lib-flexible</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'lib-flexible'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-meta-标签\"><a href=\"#添加-meta-标签\" class=\"headerlink\" title=\"添加 meta 标签\"></a>添加 meta 标签</h2><p>在项目根目录的 index.html 中添加如下 meta</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"px-转-rem\"><a href=\"#px-转-rem\" class=\"headerlink\" title=\"px 转 rem\"></a>px 转 rem</h1><p>实际开发中，我们通过设计稿得到的值单位是 px，所以要将 px 转换成 rem 再写进样式中。<br>将 px 转换成 rem 我们将使用 px2rem 这个工具，它有 webpack 的 loader：<a href=\"https://github.com/Jinjiang/px2rem-loader\" target=\"_blank\" rel=\"noopener\">px2rem-loader</a></p>\n<h2 id=\"安装-px2rem-loader\"><a href=\"#安装-px2rem-loader\" class=\"headerlink\" title=\"安装 px2rem-loader\"></a>安装 px2rem-loader</h2><p>在命令行中运行如下安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i px2rem-loade --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-px2rem-loade\"><a href=\"#配置-px2rem-loade\" class=\"headerlink\" title=\"配置 px2rem-loade\"></a>配置 px2rem-loade</h2><p>在 vue-cli 生成的 webpack 配置中，vue-loader 的 options 和其他样式文件 loader 最终是都是由 build/utils.js 里的一个方法生成的。</p>\n<p>我们只需在 cssLoader 后再加上一个 px2remLoader 即可，px2rem-loader 的 remUnit 选项意思是 1rem=多少像素，结合 lib-flexible 的方案，我们将 px2remLoader 的 options.remUnit 设置成设计稿宽度的 1/10，这里我们假设设计稿宽为 750px。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cssLoader = &#123;</span><br><span class=\"line\">  loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    minimize: process.env.NODE_ENV === <span class=\"string\">'production'</span>,</span><br><span class=\"line\">    sourceMap: options.sourceMap</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> px2remLoader = &#123;</span><br><span class=\"line\">  loader: <span class=\"string\">'px2rem-loader'</span>,</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    remUnit: <span class=\"number\">75</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>并放进 loaders 数组中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateLoaders</span>(<span class=\"params\">loader, loaderOptions</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> loaders = [cssLoader, px2remLoader]</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>修改配置后需要重启，然后我们在组件中写单位直接写 px，设计稿量多少就可以写多少了，舒服多了。</p>\n","categories":[],"tags":["随笔","vue"]},{"title":"Nginx与Node的纠缠","url":"http://yoursite.com/2017/06/11/Nginx与Node的纠缠/","content":"<blockquote>\n<p>前言：前几天面试被问到：“nginx的好处？nginx和node的比较”，所以在这里总结一波。</p>\n</blockquote>\n<h1 id=\"nginx的好处\"><a href=\"#nginx的好处\" class=\"headerlink\" title=\"nginx的好处\"></a>nginx的好处</h1><ul>\n<li>热部署</li>\n<li>高并发连接</li>\n<li>处理响应请求很快</li>\n<li>具有很高的可靠性</li>\n</ul>\n<h2 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h2><p>在不停止服务的情况下修改配置文件，更换日志文件等功能。</p>\n<h2 id=\"高并发连接\"><a href=\"#高并发连接\" class=\"headerlink\" title=\"高并发连接\"></a>高并发连接</h2><p>高并发：是指在同一个时间点，有很多用户同时的访问URL地址，比如：淘宝的双11，双12，就会产生高并发。</p>\n<p>这是一个很重要的一个特性！在这一个 互联网 快速发展， 互联网 用户数量不断增加，一些大公司、网站都需要面对高并发请求，如果有一个能够在峰值顶住10万以上并发请求的Server，肯定会得到大家的青睐。理论上，Nginx支持的并发连接上限取决于你的内存，10万远未封顶。</p>\n<h1 id=\"Nginx能做什么\"><a href=\"#Nginx能做什么\" class=\"headerlink\" title=\"Nginx能做什么\"></a>Nginx能做什么</h1><ul>\n<li>反向代理</li>\n<li>负载均衡</li>\n<li>HTTP服务器（包含动静分离）</li>\n<li>正向代理</li>\n</ul>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>反向代理应该是Nginx做的最多的一件事了，什么是反向代理呢，以下是百度百科的说法：反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。 </p>\n<p>下面贴上一段简单的实现反向代理的代码：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;  </span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">proxy_pass</span> http://localhost:8081;</span><br><span class=\"line\">\t\t<span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>:<span class=\"variable\">$server_port</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们访问localhost的时候，就相当于访问localhost:8081了</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>负载均衡可以把用户的请求分摊到多个服务器上进行处理，从而实现了对海量用户的访问支持。负载均衡的架构如图所示：</p>\n<p>简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">server</span> localhost:<span class=\"number\">8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server</span> localhost:<span class=\"number\">8081</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>       <span class=\"number\">81</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">proxy_pass</span> http://test;</span><br><span class=\"line\">\t\t<span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>:<span class=\"variable\">$server_port</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTTP服务器\"><a href=\"#HTTP服务器\" class=\"headerlink\" title=\"HTTP服务器\"></a>HTTP服务器</h2><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>   /home/hzzly;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">\t<span class=\"comment\">#</span></span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。</p>\n<h1 id=\"node的特点\"><a href=\"#node的特点\" class=\"headerlink\" title=\"node的特点\"></a>node的特点</h1><ul>\n<li>它是一个javascript运行环境</li>\n<li>依赖于Chrome V8引擎进行代码解释</li>\n<li>事件驱动</li>\n<li>非阻塞I/O</li>\n<li>轻量、可伸缩，适于实时数据交互应用</li>\n<li>并发连接（高并发）</li>\n</ul>\n<h2 id=\"node应用场景\"><a href=\"#node应用场景\" class=\"headerlink\" title=\"node应用场景\"></a>node应用场景</h2><p>NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景。（RESTful API，聊天）</p>\n<h2 id=\"Event-Loop、消息队列、事件轮询\"><a href=\"#Event-Loop、消息队列、事件轮询\" class=\"headerlink\" title=\"Event Loop、消息队列、事件轮询\"></a>Event Loop、消息队列、事件轮询</h2><p>通过回调函数（Callback）和异步机制来实现非阻塞。<br>通过事件队列和事件循环来实现并发连接。</p>\n<p>异步函数在执行结束后，会在事件队列中添加一个事件（回调函数）(遵循先进先出原则)，主线程中的代码执行完毕后（即一次循环结束），下一次循环开始就在事件队列中“读取”事件，然后调用它所对应的回调函数。这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）</p>\n<h1 id=\"nginx和node的比较\"><a href=\"#nginx和node的比较\" class=\"headerlink\" title=\"nginx和node的比较\"></a>nginx和node的比较</h1><ul>\n<li>一个更专业，一个更全面。</li>\n<li>Nginx 采用C编写，性能更高，但是它仅适合于做web服务器，用于反向代理或者负载均衡等服务。</li>\n<li>NodeJs高性能平台，web服务只是其中一块，NodeJs在处理业务层用的是JS编写,采用的是异步编程方式和思维方式。</li>\n<li>Node.js发展方向不再单独是一个Web服务器，而是一个面向网络的平台，它甚至可以是TCP服务器，或者变身为远端服务器的客户端。</li>\n</ul>\n<h1 id=\"nginx与node的完美搭配\"><a href=\"#nginx与node的完美搭配\" class=\"headerlink\" title=\"nginx与node的完美搭配\"></a>nginx与node的完美搭配</h1><p>node自己本身可以作为服务器进行驱动，但是node本身对文件的处理能力并不是很好，所以当我们的生产环境中应尽量使用nginx来处理静态的资源以及反向代理，同时也解决了node分布式以及负载均衡的相关问题。</p>\n","categories":[],"tags":["随笔","nginx","node"]},{"title":"js实现图片懒加载","url":"http://yoursite.com/2017/06/09/js实现图片懒加载/","content":"<blockquote>\n<p>前言：最近面试都被问到了这个问题，所以在这里整理一波。</p>\n</blockquote>\n<h1 id=\"懒加载的意义\"><a href=\"#懒加载的意义\" class=\"headerlink\" title=\"懒加载的意义\"></a>懒加载的意义</h1><blockquote>\n<p>懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数，对服务器缓压。</p>\n</blockquote>\n<p><strong>预加载:</strong>提前加载好，缓存到本地，当需要的时候直接读取缓存，对服务器增压</p>\n<h1 id=\"懒加载实现方式\"><a href=\"#懒加载实现方式\" class=\"headerlink\" title=\"懒加载实现方式\"></a>懒加载实现方式</h1><ul>\n<li><p>第一种是纯粹的延迟加载，使用setTimeOut或setInterval进行加载延迟</p>\n</li>\n<li><p>第二种是条件加载，符合某些条件，或触发了某些事件才开始异步下载</p>\n</li>\n<li><p>第三种是可视区加载，即仅加载用户可以看到的区域，这个主要由监控滚动条来实现，一般会在距用户看到某图片前一定距离遍开始加载，这样能保证用户拉下时正好能看到图片</p>\n</li>\n</ul>\n<p>Web 图片的懒加载就是通过读取img元素，然后获得img元素的data-src（也可以约定为其他属性名）属性的值，并赋予img的src，从而实现动态加载图片的机制</p>\n<h2 id=\"1、懒加载HTML约定\"><a href=\"#1、懒加载HTML约定\" class=\"headerlink\" title=\"1、懒加载HTML约定\"></a>1、懒加载HTML约定</h2><p>我们首先需要给准备实施懒加载的img元素添加指定的class 这里为m-lazyload ,同时将img src赋值给 data-src属性。<br>具体示例为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-lazyload\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"imgUrl\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、懒加载JavaScript实现\"><a href=\"#2、懒加载JavaScript实现\" class=\"headerlink\" title=\"2、懒加载JavaScript实现\"></a>2、懒加载JavaScript实现</h2><p>动态加载总共分为以下几个步骤:<br>1、添加页面滚动监听事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBoxList.addEventListener(<span class=\"string\">'scroll'</span>, debounce(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  _loadImage();</span><br><span class=\"line\">&#125;, <span class=\"number\">200</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 简单的防抖函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、当触发监听事件时会执行 _loadImage 函数，该函数负责加载图片<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_loadImage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> domOffsetHeight = imgBoxList.offsetHeight;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> imgs = imgBoxList.querySelectorAll(<span class=\"string\">'img[data-src]'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = imgs[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_isShow(el, domOffsetHeight)) &#123;</span><br><span class=\"line\">      el.src = el.getAttribute(<span class=\"string\">'data-src'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3、判断该图片是否在当前窗口的可视区域内<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_isShow</span>(<span class=\"params\">el, domHeight</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect = el.getBoundingClientRect();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rect.top &lt;= domHeight + <span class=\"number\">200</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到这一个简单的图片懒加载就写成了</p>\n<blockquote>\n<p>当网页滚动的事件被触发 -&gt; 执行加载图片操作 -&gt; 判断图片是否在可视区域内 -&gt; 在，则动态将data-src的值赋予该图片。</p>\n</blockquote>\n","categories":[],"tags":["随笔","JavaScript"]},{"title":"DIY一个自己的音乐播放器2.0来袭","url":"http://yoursite.com/2017/06/05/DIY一个自己的音乐播放器2-0来袭/","content":"<blockquote>\n<p>前言：之前做的第一版播放器功能做出来了，但发现结构不是很优雅以及后端api很不稳定，所以进行了一次小升级。此次升级 <strong>功能更全，体验更好，api更稳定，技术栈更多，收获也更多</strong>👍。</p>\n</blockquote>\n<p>[温馨提示：pc浏览f12手机模式最佳,手机建议wifi下访问,低版本浏览器可能有兼容性问题]</p>\n<h2 id=\"预览地址：-http-hzzly-net-magic-music\"><a href=\"#预览地址：-http-hzzly-net-magic-music\" class=\"headerlink\" title=\"预览地址： http://hzzly.net/magic-music\"></a>预览地址： <a href=\"http://hzzly.net/magic-music\" target=\"_blank\" rel=\"noopener\">http://hzzly.net/magic-music</a></h2><h2 id=\"Github地址：-https-github-com-hzzly-MagicMusic\"><a href=\"#Github地址：-https-github-com-hzzly-MagicMusic\" class=\"headerlink\" title=\"Github地址： https://github.com/hzzly/MagicMusic\"></a>Github地址： <a href=\"https://github.com/hzzly/MagicMusic\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/MagicMusic</a></h2><p>欢迎大家的star和fork😄~</p>\n<h2 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h2><ul>\n<li><strong>首页</strong><ul>\n<li>轮播</li>\n<li>个性推荐[流行、古典、轻音乐、流行]</li>\n<li>歌曲操作（动画）</li>\n</ul>\n</li>\n<li><strong>底部播放控件</strong><ul>\n<li>播放、暂停、下一曲</li>\n<li>实时播放进度条</li>\n</ul>\n</li>\n<li><strong>播放页</strong><ul>\n<li>上一曲、播放、暂停、下一曲</li>\n<li>播放进度条（弧形进度条）</li>\n<li>歌词滚动、歌词高亮</li>\n</ul>\n</li>\n<li><strong>播放列表</strong><ul>\n<li>播放歌曲高亮</li>\n<li>切歌(单击切歌)</li>\n<li>删歌(点击右侧小X)</li>\n<li>清空播放列表</li>\n<li>本地缓存播放列表</li>\n</ul>\n</li>\n<li><strong>排行榜</strong><ul>\n<li>排行榜列表</li>\n<li>排行榜里的歌曲(单击播放)、全部播放</li>\n</ul>\n</li>\n<li><strong>音乐搜索</strong><ul>\n<li>搜索单曲、歌手</li>\n<li>搜索历史记录</li>\n</ul>\n</li>\n<li><strong>侧边栏</strong></li>\n</ul>\n<h2 id=\"未实现的功能\"><a href=\"#未实现的功能\" class=\"headerlink\" title=\"未实现的功能\"></a>未实现的功能</h2><ul>\n<li>喜欢、分享、下载、切换播放模式</li>\n</ul>\n<h2 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h2><p><img src=\"http://hzzly.net/magic-music/screenshots/music.gif\" alt=\"http://hzzly.net/magic-music/screenshots/music.gif\"></p>\n<p><strong>更多预览👉</strong><a href=\"http://hzzly.net/magic-music/screenshots/\" target=\"_blank\" rel=\"noopener\">更多</a></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><p>1、<code>Vue全家桶(vue2、vue-router、vuex)</code> 快速开发SPA神器<br>2、<code>Axios</code> vue作者推荐的数据请求方案<br>3、<code>ES6</code> 全面过度es6的写法 趋势<br>4、<code>Webpack2</code> 脚手架已经配置好了，超贴心<br>5、<code>Promise</code> 把请求封装在promise中，方便的可以使用.then回调<br>6、<code>flex布局</code> 对于移动端可以放心大胆的使用<br>7、<code>移动端屏幕适配</code> 采用手淘的flexible+rem方案<br>8、<code>本地存储(sessionStorage、localStorage)</code> 避免重复资源请求，快速读取<br>9、<code>图片懒加载</code> vue-lazyload 提升用户体验</p>\n<h2 id=\"本次更新日志\"><a href=\"#本次更新日志\" class=\"headerlink\" title=\"本次更新日志\"></a>本次更新日志</h2><ul>\n<li>后端api采用pm2来部署，防止断开后数据无法请求的尴尬。</li>\n<li>把监听audio加载完数据事件统一管理起来，避免重复监听，优化代码结构。</li>\n<li>更新axios请求，让请求更加优美。</li>\n<li>修改播放页面，优化用户体验。</li>\n<li>添加加载音乐loading等待，提升用户体验。</li>\n<li>添加播放全部，避免一个一个添加。</li>\n<li>本地缓存播放列表与清空。</li>\n<li>修改首页tab切换动效</li>\n</ul>\n<p><a href=\"http://hjingren.cn/2017/04/27/%E2%80%99DIY%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/\" target=\"_blank\" rel=\"noopener\">DIY一个自己的音乐播放器1.0</a></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>MagicMusic还在不断努力的改进，觉得还行的可以点个star，<strong>你的star是我继续开源创作的动力</strong>，谢谢！！！当然有建议可以在issues里提。<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/MagicMusic\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/MagicMusic</a><br>欢迎大家的star啦~</p>\n<h2 id=\"求实习\"><a href=\"#求实习\" class=\"headerlink\" title=\"求实习\"></a>求实习</h2><p>本人大三，求一个前端实习：<a href=\"http://hzzly.net/resume/\" target=\"_blank\" rel=\"noopener\">简历</a></p>\n","categories":[],"tags":["随笔","vue","vuex"]},{"title":"CentOS 7 Nginx的折腾","url":"http://yoursite.com/2017/06/05/CentOS-7-Nginx的折腾/","content":"<h2 id=\"CentOS-7-下安装-Nginx\"><a href=\"#CentOS-7-下安装-Nginx\" class=\"headerlink\" title=\"CentOS 7 下安装 Nginx\"></a><strong>CentOS 7 下安装 Nginx</strong></h2><h3 id=\"查看centos版本\"><a href=\"#查看centos版本\" class=\"headerlink\" title=\"查看centos版本\"></a>查看centos版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/redhat-release</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-gcc-安装\"><a href=\"#一-gcc-安装\" class=\"headerlink\" title=\"一. gcc 安装\"></a>一. gcc 安装</h3><blockquote>\n<p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install gcc-c++</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-pcre-pcre-devel-安装\"><a href=\"#二-pcre-pcre-devel-安装\" class=\"headerlink\" title=\"二. pcre pcre-devel 安装\"></a>二. pcre pcre-devel 安装</h3><blockquote>\n<p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-zlib-安装\"><a href=\"#三-zlib-安装\" class=\"headerlink\" title=\"三. zlib 安装\"></a>三. zlib 安装</h3><blockquote>\n<p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-OpenSSL-安装\"><a href=\"#四-OpenSSL-安装\" class=\"headerlink\" title=\"四. OpenSSL 安装\"></a>四. OpenSSL 安装</h3><blockquote>\n<p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、官网下载\"><a href=\"#五、官网下载\" class=\"headerlink\" title=\"五、官网下载\"></a>五、官网下载</h3><blockquote>\n<ul>\n<li>打开<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a></li>\n<li>找到Stable version下的 <a href=\"http://nginx.org/download/nginx-1.12.0.tar.gz\" target=\"_blank\" rel=\"noopener\">nginx-1.12.0</a></li>\n<li>右键 复制链接</li>\n<li>使用wget命令下载</li>\n</ul>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">$ wget -c http://nginx.org/download/nginx-1.12.0.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -zxvf nginx-1.12.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-1.12.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><blockquote>\n<p>使用默认配置</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br><span class=\"line\">$ make install</span><br></pre></td></tr></table></figure>\n<p>查找安装路径：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ whereis nginx</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动、停止nginx\"><a href=\"#启动、停止nginx\" class=\"headerlink\" title=\"启动、停止nginx\"></a>启动、停止nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin/</span><br><span class=\"line\">$ ./nginx </span><br><span class=\"line\">$ ./nginx -s stop      //此方式相当于先查出nginx进程id再使用<span class=\"built_in\">kill</span>命令强制杀掉进程。</span><br><span class=\"line\">$ ./nginx -s quit      //此方式停止步骤是待nginx进程处理任务完毕进行停止。</span><br><span class=\"line\">$ ./nginx -s reload    //重启，当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 ngin x再启动 nginx 即可将配置信息在 nginx 中生效</span><br></pre></td></tr></table></figure>\n<h3 id=\"检验是否安装成功\"><a href=\"#检验是否安装成功\" class=\"headerlink\" title=\"检验是否安装成功\"></a>检验是否安装成功</h3><p>打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。</p>\n<h3 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h3><p>即在rc.local增加启动代码就可以了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/rc.local</span><br></pre></td></tr></table></figure></p>\n<p>增加一行 /usr/local/nginx/sbin/nginx</p>\n<p>设置执行权限：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod 755 /etc/rc.local</span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":["随笔","nginx"]},{"title":"Fetch学习笔记","url":"http://yoursite.com/2017/05/20/Fetch学习笔记/","content":"<blockquote>\n<p>前言: 前几天面试问到 Ajax和Fetch的区别，因为以前也用过这两个东西，所以也没难倒我，现在回头整理一遍。</p>\n</blockquote>\n<h1 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h1><blockquote>\n<p>与XMLHttpRequest(XHR)类似，fetch()方法允许你发出AJAX请求。区别在于Fetch API使用Promise，因此是一种简洁明了的API，比XMLHttpRequest更加简单易用。</p>\n</blockquote>\n<p>如果还不了解<code>Promise</code>，可以移步👉<a href=\"https://hzzly.github.io/2017/03/25/%E6%B5%85%E8%B0%88Promise/\" target=\"_blank\" rel=\"noopener\">浅谈Promise</a>这篇博客</p>\n<h2 id=\"比较XMLHttpRequest（传统Ajax）\"><a href=\"#比较XMLHttpRequest（传统Ajax）\" class=\"headerlink\" title=\"比较XMLHttpRequest（传统Ajax）\"></a>比较XMLHttpRequest（传统Ajax）</h2><p>创建步骤：</p>\n<blockquote>\n<ul>\n<li>创建<code>XMLHttpRequest</code>对象，也就是创建一个异步调用对象</li>\n<li>创建一个新的<code>HTTP</code>请求，并指定该<code>HTTP</code>请求的方法、<code>URL</code>及验证信息</li>\n<li>发送<code>HTTP</code>请求</li>\n<li>处理响应，获取异步调用返回的数据</li>\n</ul>\n</blockquote>\n<p>可以发现，主要的不同点在于：传统Ajax使用事件处理器，而不是Promise对象，并且请求的发起完全依赖于xhr对象所提供的方法。</p>\n<p>想详细了解 Ajax的封装可以查看我上一篇博客，一步步教你 Ajax的封装👉<a href=\"https://hzzly.github.io/2017/05/17/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">Ajax学习笔记</a></p>\n<h2 id=\"fetch语法\"><a href=\"#fetch语法\" class=\"headerlink\" title=\"fetch语法\"></a>fetch语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> response.json();</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 ES6 的 <code>箭头函数</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\">\t.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>async/await</code> 来做最终优化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> data = response.json();</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>使用 await 后，<strong>写异步代码就像写同步代码一样爽</strong>。await 后面可以跟 Promise 对象，表示等待 Promise resolve() 才会继续向下执行，如果 Promise 被 reject() 或抛出异常则会被外面的 try…catch 捕获。</p>\n<p>如果还不了解<code>async/await</code>，可以移步👉<a href=\"https://hzzly.github.io/2017/05/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Async%E5%87%BD%E6%95%B0/\" target=\"_blank\" rel=\"noopener\">es6Async</a>这篇博客</p>\n<h2 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">\"GET\"</span>, <span class=\"comment\">//默认</span></span><br><span class=\"line\">    headers:&#123;</span><br><span class=\"line\">    \t<span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json, text/plain, */*\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</span><br></pre></td></tr></table></figure>\n<h2 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">    \t<span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json, text/plain, */*\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Content-type\"</span>:<span class=\"string\">\"application:/x-www-form-urlencoded; charset=UTF-8\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    body: <span class=\"string\">\"name=hzzly&amp;age=22\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Fetch请求发送凭证\"><a href=\"#使用Fetch请求发送凭证\" class=\"headerlink\" title=\"使用Fetch请求发送凭证\"></a>使用Fetch请求发送凭证</h2><blockquote>\n<p>要使用Fetch发送带有诸如cookie之类的凭证的请求。你可以在选项对象中将credentials属性值设置为“include”：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url,&#123;</span><br><span class=\"line\">\tcredentials: <span class=\"string\">\"include\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"封装POST请求\"><a href=\"#封装POST请求\" class=\"headerlink\" title=\"封装POST请求\"></a>封装POST请求</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将对象拼接成 name=hzzly&amp;age=22 的字符串形式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">params</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = <span class=\"string\">''</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">\t\tresult += <span class=\"string\">`&amp;<span class=\"subst\">$&#123;item&#125;</span>=<span class=\"subst\">$&#123;obj[item]&#125;</span>`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(result) &#123;</span><br><span class=\"line\">\t\tresult = result.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">url, paramsObj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = fetch(url, &#123;</span><br><span class=\"line\">\t\tmethods: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">\t\tcredentials: <span class=\"string\">\"include\"</span></span><br><span class=\"line\">\t\theaders: &#123;</span><br><span class=\"line\">\t    \t<span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json, text/plain, */*\"</span>,</span><br><span class=\"line\">\t        <span class=\"string\">\"Content-type\"</span>:<span class=\"string\">\"application:/x-www-form-urlencoded; charset=UTF-8\"</span></span><br><span class=\"line\">\t    &#125;,</span><br><span class=\"line\">\t    body: params(paramsObj)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'hzzly'</span>,</span><br><span class=\"line\">\tage: <span class=\"number\">22</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">post(url, obj)</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\">\t.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</span><br></pre></td></tr></table></figure>","categories":[],"tags":["随笔","JavaScript","Fetch"]},{"title":"Ajax学习笔记","url":"http://yoursite.com/2017/05/17/Ajax学习笔记/","content":"<blockquote>\n<p>在上一个外包项目中，因为用到了前后端分离的思路，所以都要通过Ajax来请求数据然后把数据渲染到页面上，一开始想过直接引用Jquery，但感觉就使用Jquery的Ajax函数，有点太浪费，所以就自己撸了一个Ajax函数。本文由浅入深，一步一步带你封装属于自己的Ajax库。</p>\n</blockquote>\n<h2 id=\"Ajax简介\"><a href=\"#Ajax简介\" class=\"headerlink\" title=\"Ajax简介\"></a>Ajax简介</h2><blockquote>\n<ul>\n<li>Asynchronous Javascript And XML （异步的JavaScript和XML）</li>\n<li>它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</li>\n<li>Ajax是一种用于创建快速动态网页的技术。在前台与后台进行数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，实现局部更新。</li>\n</ul>\n</blockquote>\n<h3 id=\"1、优点\"><a href=\"#1、优点\" class=\"headerlink\" title=\"1、优点\"></a>1、优点</h3><blockquote>\n<ul>\n<li>页面无刷新，用户体验好。</li>\n<li>异步通信，更加快的响应能力。</li>\n<li>减少冗余请求，减轻了服务器负担。</li>\n<li>基于标准化的并被广泛支持的技术</li>\n</ul>\n</blockquote>\n<h3 id=\"2、应用场景\"><a href=\"#2、应用场景\" class=\"headerlink\" title=\"2、应用场景\"></a>2、应用场景</h3><blockquote>\n<ul>\n<li>场景 1. 数据验证</li>\n<li>场景 2. 按需取数据</li>\n<li>场景 3. 自动更新页面</li>\n<li>…</li>\n</ul>\n</blockquote>\n<p>说了这么多，接下来来点干货。</p>\n<h2 id=\"创建ajax的步骤\"><a href=\"#创建ajax的步骤\" class=\"headerlink\" title=\"创建ajax的步骤\"></a>创建ajax的步骤</h2><blockquote>\n<p>Ajax的原理简单来说通过<code>XMLHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。原生创建ajax可分为以下四步</p>\n</blockquote>\n<h3 id=\"1、创建XMLHttpRequest对象\"><a href=\"#1、创建XMLHttpRequest对象\" class=\"headerlink\" title=\"1、创建XMLHttpRequest对象\"></a>1、创建XMLHttpRequest对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRequest</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//IE6以上</span></span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xhr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、准备请求\"><a href=\"#2、准备请求\" class=\"headerlink\" title=\"2、准备请求\"></a>2、准备请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(method,url,<span class=\"keyword\">async</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>第一个参数表示请求类型的字符串，其值可以是<code>GET</code>或者<code>POST</code><br><code>GET</code>请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,demo.php?name=hzzly&amp;age=<span class=\"number\">21</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p><code>POST</code>请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>,demo.php,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二个参数是要作为请求发送目标的URL。</p>\n</li>\n<li>第三个参数是true或false，表示请求是以异步还是同步的模式发出。（默认为true，一般不建议为false）</li>\n</ul>\n<h3 id=\"3、发送请求\"><a href=\"#3、发送请求\" class=\"headerlink\" title=\"3、发送请求\"></a>3、发送请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>GET</code>请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,demo.php?name=hzzly&amp;age=<span class=\"number\">21</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>POST</code>请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>,demo.php,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeder(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span>);</span><br><span class=\"line\">xhr.send(param)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4、处理响应\"><a href=\"#4、处理响应\" class=\"headerlink\" title=\"4、处理响应\"></a>4、处理响应</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>onreadystatechange</code>：当处理过程发生变化的时候执行下面的函数</li>\n<li><code>readyState</code>：ajax处理过程<ul>\n<li>0：请求未初始化（还没有调用 <code>open()</code>）</li>\n<li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）</li>\n<li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）</li>\n<li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成</li>\n<li>4：响应已完成；您可以获取并使用服务器的响应了</li>\n</ul>\n</li>\n<li><code>status</code>属性:<ul>\n<li>200: “OK”</li>\n<li>404: 未找到页面</li>\n</ul>\n</li>\n<li><code>responseText</code>：获得字符串形式的响应数据，可以用<code>JSON.parse(xhr.responseText)</code>转化为<code>JSON</code>对象</li>\n</ul>\n</blockquote>\n<h2 id=\"封装例子\"><a href=\"#封装例子\" class=\"headerlink\" title=\"封装例子\"></a>封装例子</h2><blockquote>\n<p>1.get请求函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个简单的get请求</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125;   url     请求地址,文件名</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; fnSucc  请求成功时执行的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; fnFaild 请求失败执行的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Get</span>(<span class=\"params\">url, fnSucc, fnFaild</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.创建ajax对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined.</span></span><br><span class=\"line\"><span class=\"comment\">         * 进入else若直接使用XMLHttpRequest在不支持的情况下会报错</span></span><br><span class=\"line\"><span class=\"comment\">         **/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//IE6以上</span></span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2.连接服务器</span></span><br><span class=\"line\">    <span class=\"comment\">//open(方法,url,是否异步)</span></span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">//3.发送请求</span></span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">    <span class=\"comment\">//4.接收返回</span></span><br><span class=\"line\">    <span class=\"comment\">//OnRedayStateChange事件</span></span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xhr.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//alert(\"成功\" + xhr.responseText);</span></span><br><span class=\"line\">                fnSucc(xhr.responseText);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//alert(\"服务器响应失败!\");</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fnFaild) &#123;</span><br><span class=\"line\">                    fnFaild();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.get与post结合的请求函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * AJAX函数封装</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; url     请求地址（必须）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;object&#125; options 发送请求的选项参数</span></span><br><span class=\"line\"><span class=\"comment\"> *   @config &#123;string&#125; [options.type] 请求发送的类型。默认为GET。</span></span><br><span class=\"line\"><span class=\"comment\"> *   @config &#123;Object&#125; [options.data] 需要发送的数据。</span></span><br><span class=\"line\"><span class=\"comment\"> *   @config &#123;Function&#125; [options.onsuccess] 请求成功时触发。（必须）</span></span><br><span class=\"line\"><span class=\"comment\"> *   @config &#123;Function&#125; [options.onfail] 请求失败时触发。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AJAX</span>(<span class=\"params\">url, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.创建ajax对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined,进入else</span></span><br><span class=\"line\"><span class=\"comment\">         * 若直接使用XMLHttpRequest,在不支持的情况下会报错</span></span><br><span class=\"line\"><span class=\"comment\">         **/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//IE6以上</span></span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2.连接服务器</span></span><br><span class=\"line\">    <span class=\"comment\">//open(方法,url,是否异步)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> param = <span class=\"string\">\"\"</span>; <span class=\"comment\">//请求参数。</span></span><br><span class=\"line\">    <span class=\"comment\">//只有data存在，且为对象使才执行</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = options.data ? options.data : <span class=\"number\">-1</span>; <span class=\"comment\">//缓存data</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (data) === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data) &#123; <span class=\"comment\">//请求参数拼接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                param += <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;data[key]&#125;</span>&amp;`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        param.replace(<span class=\"regexp\">/&amp;$/</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        param = <span class=\"string\">\"timestamp=\"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//3.发送请求</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = options.type ? options.type.toUpperCase() : <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"GET\"</span>) &#123;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;param&#125;</span>`</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">\"POST\"</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        xhr.setRequestHeder(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span>);</span><br><span class=\"line\">        xhr.send(param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//4.接收返回</span></span><br><span class=\"line\">    <span class=\"comment\">//OnRedayStateChange事件</span></span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xhr.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//请求成功。形参为获取到的字符串形式的响应数据</span></span><br><span class=\"line\">                options.onsuccess(xhr.responseText);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//先判断是否存在请求失败函数</span></span><br><span class=\"line\">                <span class=\"comment\">//存在时，形参为XMLHttpRequest对象，便于进行错误进行处理</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (options.onfail) &#123;</span><br><span class=\"line\">                    options.onfail(xhr);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":["随笔","JavaScript"]},{"title":"读书笔记-es6编程风格","url":"http://yoursite.com/2017/05/15/读书笔记-es6编程风格/","content":"<h1 id=\"编程风格\"><a href=\"#编程风格\" class=\"headerlink\" title=\"编程风格\"></a><strong>编程风格</strong></h1><h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><blockquote>\n<ul>\n<li>let 取代 var</li>\n</ul>\n</blockquote>\n<p>ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。</p>\n<blockquote>\n<ul>\n<li>全局常量和线程安全</li>\n</ul>\n</blockquote>\n<p>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// best</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure></p>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6let%E4%B8%8Econst/\" target=\"_blank\" rel=\"noopener\">let与const</a></p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><blockquote>\n<ul>\n<li>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">\"foobar\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">'foo'</span> + a + <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"comment\">// acceptable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">`foobar`</span>;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'foobar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">`foo<span class=\"subst\">$&#123;a&#125;</span>bar`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">'foobar'</span>;</span><br></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/04/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/\" target=\"_blank\" rel=\"noopener\">字符串的扩展</a></p>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><blockquote>\n<ul>\n<li>使用数组成员对变量赋值时，优先使用解构赋值。</li>\n<li>函数的参数如果是对象的成员，优先使用解构赋值。</li>\n<li>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = arr;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/04/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/\" target=\"_blank\" rel=\"noopener\">解构赋值</a></p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><blockquote>\n<ul>\n<li>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">k1</span>: v1, <span class=\"attr\">k2</span>: v2 &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;</span><br><span class=\"line\">  k1: v1,</span><br><span class=\"line\">  k2: v2,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ref = <span class=\"string\">'some value'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> atom = &#123;</span><br><span class=\"line\">  ref,</span><br><span class=\"line\">  value: <span class=\"number\">1</span>,</span><br><span class=\"line\">  addValue(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> atom.value + value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/\" target=\"_blank\" rel=\"noopener\">对象的扩展</a></p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<ul>\n<li>使用扩展运算符（…）拷贝数组。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>使用Array.from方法，将类似数组的对象转为数组。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodes = <span class=\"built_in\">Array</span>.from(foo);</span><br><span class=\"line\"><span class=\"comment\">//或者扩展运算符(...)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/\" target=\"_blank\" rel=\"noopener\">数组的扩展</a></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote>\n<ul>\n<li>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。</li>\n<li>使用rest运算符（…）代替参数</li>\n<li>使用默认值语法设置函数参数的默认值。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">concatenateAll</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleThings</span>(<span class=\"params\">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/\" target=\"_blank\" rel=\"noopener\">函数的扩展</a></p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><blockquote>\n<ul>\n<li>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。</li>\n<li>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(contents = []) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getA() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getB() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Class/\" target=\"_blank\" rel=\"noopener\">Class</a></p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><blockquote>\n<ul>\n<li>使用import取代require。</li>\n<li>使用export取代module.exports。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; func1, func2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'moduleA'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Module/\" target=\"_blank\" rel=\"noopener\">Module</a></p>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6Module","url":"http://yoursite.com/2017/05/14/读书笔记-es6Module/","content":"<h1 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a><strong>Module</strong></h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CommonJS模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; stat, exists, readFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> stat = _fs.stat;</span><br><span class=\"line\"><span class=\"keyword\">let</span> exists = _fs.exists;</span><br><span class=\"line\"><span class=\"keyword\">let</span> readfile = _fs.readfile;</span><br></pre></td></tr></table></figure>\n<p>上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p>\n<blockquote>\n<p>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; stat, exists, readFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br></pre></td></tr></table></figure>\n<p>上面代码的实质是从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。</p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><blockquote>\n<p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。</p>\n</blockquote>\n<p>严格模式主要有以下限制:</p>\n<blockquote>\n<ul>\n<li>变量必须声明后再使用</li>\n<li>函数的参数不能有同名属性，否则报错</li>\n<li>不能使用with语句</li>\n<li>不能对只读属性赋值，否则报错</li>\n<li>不能使用前缀0表示八进制数，否则报错</li>\n<li>不能删除不可删除的属性，否则报错</li>\n<li>不能删除变量delete prop，会报错，只能删除属性delete global[prop]</li>\n<li>eval不会在它的外层作用域引入变量</li>\n<li>eval和arguments不能被重新赋值</li>\n<li>arguments不会自动反映函数参数的变化</li>\n<li>不能使用arguments.callee</li>\n<li>不能使用arguments.caller</li>\n<li>禁止this指向全局对象</li>\n<li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li>\n<li>增加了保留字（比如protected、static和interface）</li>\n</ul>\n</blockquote>\n<h2 id=\"export-命令\"><a href=\"#export-命令\" class=\"headerlink\" title=\"export 命令\"></a>export 命令</h2><blockquote>\n<p>export命令用于规定模块的对外接口</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"><span class=\"comment\">//或者简写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;;</span><br><span class=\"line\"><span class=\"comment\">//输出函数或类（class）</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"import-命令\"><a href=\"#import-命令\" class=\"headerlink\" title=\"import 命令\"></a>import 命令</h2><blockquote>\n<p>import命令用于输入其他模块提供的功能，import命令具有提升效果，会提升到整个模块的头部，首先执行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;firstName, lastName, year&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  element.textContent = firstName + <span class=\"string\">' '</span> + lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>as关键字</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为输入的变量重新取一个名字</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; lastName <span class=\"keyword\">as</span> surname &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span>;</span><br><span class=\"line\"><span class=\"comment\">//模块整体加载</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"export-default-命令\"><a href=\"#export-default-命令\" class=\"headerlink\" title=\"export default 命令\"></a>export default 命令</h2><blockquote>\n<p>为模块指定默认输出</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">'./export-default'</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h2><p>一个 vuex 模块（module）实例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//com.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> types <span class=\"keyword\">from</span> <span class=\"string\">'../types'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    showLoading: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    setShowLoading(&#123; commit &#125;, status) &#123;</span><br><span class=\"line\">        commit(types.COM_SHOW_LOADING, status)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">    showLoading: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.showLoading,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    [types.COM_SHOW_LOADING](state, status) &#123;</span><br><span class=\"line\">        state.showLoading = status</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    state,</span><br><span class=\"line\">    actions,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">    mutations</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//serach.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//mapGetters(map: Array&lt;string&gt; | Object): Object,创建组件的计算属性返回 getter 的返回值</span></span><br><span class=\"line\">\t<span class=\"comment\">//使用对象展开运算符将 getters 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">        <span class=\"string\">'showLoading'</span></span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6Class的继承","url":"http://yoursite.com/2017/05/13/读书笔记-es6Class的继承/","content":"<h2 id=\"Class的继承\"><a href=\"#Class的继承\" class=\"headerlink\" title=\"Class的继承\"></a><strong>Class的继承</strong></h2><h3 id=\"一、基本用法\"><a href=\"#一、基本用法\" class=\"headerlink\" title=\"一、基本用法\"></a>一、基本用法</h3><blockquote>\n<p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, color) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(x, y); <span class=\"comment\">// 调用父类的constructor(x, y)</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color + <span class=\"string\">' '</span> + <span class=\"keyword\">super</span>.toString(); <span class=\"comment\">// 调用父类的toString()</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>\n<blockquote>\n<p>ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>\n</blockquote>\n<p>在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有super方法才能返回父类实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, color) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是生成子类实例的代码，这与ES5的行为完全一致。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">25</span>, <span class=\"number\">8</span>, <span class=\"string\">'green'</span>);</span><br><span class=\"line\">cp <span class=\"keyword\">instanceof</span> ColorPoint <span class=\"comment\">// true</span></span><br><span class=\"line\">cp <span class=\"keyword\">instanceof</span> Point <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、类的prototype属性和proto属性\"><a href=\"#二、类的prototype属性和proto属性\" class=\"headerlink\" title=\"二、类的prototype属性和proto属性\"></a>二、类的prototype属性和<strong>proto</strong>属性</h3><blockquote>\n<p>大多数浏览器的ES5实现之中，每一个对象都有<strong>proto</strong>属性，指向对应的构造函数的prototype属性。Class作为构造函数的语法糖，同时有prototype属性和<strong>proto</strong>属性，因此同时存在两条继承链。<br>1）子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。<br>2）子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B.__proto__ === A <span class=\"comment\">// true</span></span><br><span class=\"line\">B.prototype.__proto__ === A.prototype <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、Object-getPrototypeOf\"><a href=\"#三、Object-getPrototypeOf\" class=\"headerlink\" title=\"三、Object.getPrototypeOf()\"></a>三、Object.getPrototypeOf()</h3><blockquote>\n<p>Object.getPrototypeOf方法可以用来从子类上获取父类。可以使用这个方法判断，一个类是否继承了另一个类。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(ColorPoint) === Point</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"四、super-关键字\"><a href=\"#四、super-关键字\" class=\"headerlink\" title=\"四、super 关键字\"></a>四、super 关键字</h3><blockquote>\n<p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。<br>1) super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B，因此super()在这里相当于A.prototype.constructor.call(this)。</p>\n<blockquote>\n<p>2) super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  p() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.p()); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">//super.p() 相当于 A.prototype.p()</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br></pre></td></tr></table></figure>\n<p>由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.p = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  get m() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">b.m <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>如果属性定义在父类的原型对象上，super就可以取到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\">A.prototype.x = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ES6 规定，通过super调用父类的方法时，super会绑定子类的this。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.print();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">b.m() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()会绑定子类B的this，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。</p>\n<h3 id=\"五、实例的proto属性\"><a href=\"#五、实例的proto属性\" class=\"headerlink\" title=\"五、实例的proto属性\"></a>五、实例的<strong>proto</strong>属性</h3><blockquote>\n<p>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">p2.__proto__ === p1.__proto__ <span class=\"comment\">// false</span></span><br><span class=\"line\">p2.__proto__.__proto__ === p1.__proto__ <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>因此，通过子类实例的<strong>proto</strong>.<strong>proto</strong>属性，可以修改父类实例的行为。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p2.__proto__.__proto__.printName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ha'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">p1.printName() <span class=\"comment\">// \"Ha\"</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码在ColorPoint的实例p2上向Point类添加方法，结果影响到了Point的实例p1。</p>\n<h3 id=\"六、原生构造函数的继承\"><a href=\"#六、原生构造函数的继承\" class=\"headerlink\" title=\"六、原生构造函数的继承\"></a>六、原生构造函数的继承</h3><blockquote>\n<ul>\n<li>Boolean()</li>\n<li>Number()</li>\n<li>String()</li>\n<li>Array()</li>\n<li>Date()</li>\n<li>Function()</li>\n<li>RegExp()</li>\n<li>Error()</li>\n<li>Object()</li>\n</ul>\n</blockquote>\n<p>以前，这些原生构造函数是无法继承的，比如，不能自己定义一个Array的子类。ES6可以自定义原生数据结构（比如Array、String等）的子类，这是ES5无法做到的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VersionedArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.history = [[]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  commit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.history.push(<span class=\"keyword\">this</span>.slice());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  revert() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.splice(<span class=\"number\">0</span>, <span class=\"keyword\">this</span>.length, ...this.history[<span class=\"keyword\">this</span>.history.length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> VersionedArray();</span><br><span class=\"line\">x.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">x.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">x <span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\">x.history <span class=\"comment\">// [[]]</span></span><br><span class=\"line\">x.commit();</span><br><span class=\"line\">x.history <span class=\"comment\">// [[], [1, 2]]</span></span><br><span class=\"line\">x.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">x <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">x.revert();</span><br><span class=\"line\">x <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6Class","url":"http://yoursite.com/2017/05/11/读书笔记-es6Class/","content":"<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a><strong>Class</strong></h2><h3 id=\"一、Class基本语法\"><a href=\"#一、Class基本语法\" class=\"headerlink\" title=\"一、Class基本语法\"></a>一、Class基本语法</h3><p>传统方法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure></p>\n<p>ES6:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ES6的类，完全可以看作构造函数的另一种写法:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> Point <span class=\"comment\">// \"function\"</span></span><br><span class=\"line\">Point === Point.prototype.constructor <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toValue()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">Point.prototype = &#123;</span><br><span class=\"line\">  toString()&#123;&#125;,</span><br><span class=\"line\">  toValue()&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在类的实例上面调用方法，其实就是调用原型上的方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">b.constructor === B.prototype.constructor <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Point.prototype, &#123;</span><br><span class=\"line\">  toString()&#123;&#125;,</span><br><span class=\"line\">  toValue()&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//prototype对象的constructor属性，直接指向“类”的本身，这与ES5的行为是一致的。</span></span><br><span class=\"line\">Point.prototype.constructor === Point <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>类的内部所有定义的方法，都是不可枚举的（non-enumerable）。<strong>这一点与ES5的行为不一致</strong>。</p>\n</blockquote>\n<h3 id=\"二、constructor方法\"><a href=\"#二、constructor方法\" class=\"headerlink\" title=\"二、constructor方法\"></a>二、constructor方法</h3><blockquote>\n<p>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。</p>\n</blockquote>\n<h3 id=\"三、类的实例对象\"><a href=\"#三、类的实例对象\" class=\"headerlink\" title=\"三、类的实例对象\"></a>三、类的实例对象</h3><blockquote>\n<p>生成类的实例对象的写法，与ES5完全一样，也是使用new命令。如果忘记加上new，像函数那样调用Class，将会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = Point(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">point.toString() <span class=\"comment\">// (2, 3)</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'x'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'y'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">point.__proto__.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，x和y都是实例对象point自身的属性（因为定义在this变量上），所以hasOwnProperty方法返回true，而toString是原型对象的属性（因为定义在Point类上），所以hasOwnProperty方法返回false。这些都与ES5的行为保持一致。</p>\n<blockquote>\n<p>与ES5一样，类的所有实例共享一个原型对象。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">p1.__proto__ === p2.__proto__   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，p1和p2都是Point的实例，它们的原型都是Point.prototype，所以<strong>proto</strong>属性是相等的。</p>\n<p>这也意味着，可以通过实例的<strong>proto</strong>属性为Class添加方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">p1.__proto__.printName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'Oops'</span> &#125;;</span><br><span class=\"line\">p1.printName() <span class=\"comment\">// \"Oops\"</span></span><br><span class=\"line\">p2.printName() <span class=\"comment\">// \"Oops\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> Point(<span class=\"number\">4</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">p3.printName() <span class=\"comment\">// \"Oops\"</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码在p1的原型上添加了一个printName方法，由于p1的原型就是p2的原型，因此p2也可以调用这个方法。而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的<strong>proto</strong>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变Class的原始定义，影响到所有实例。</p>\n<h3 id=\"四、不存在变量提升\"><a href=\"#四、不存在变量提升\" class=\"headerlink\" title=\"四、不存在变量提升\"></a>四、不存在变量提升</h3><blockquote>\n<p>Class不存在变量提升（hoist），这一点与ES5完全不同。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Foo(); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、Class表达式\"><a href=\"#五、Class表达式\" class=\"headerlink\" title=\"五、Class表达式\"></a>五、Class表达式</h3><blockquote>\n<p>采用Class表达式，可以写出立即执行的Class。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sayName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;(<span class=\"string\">'张三'</span>);</span><br><span class=\"line\">person.sayName(); <span class=\"comment\">// \"张三\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、私有方法\"><a href=\"#六、私有方法\" class=\"headerlink\" title=\"六、私有方法\"></a>六、私有方法</h3><blockquote>\n<p>私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。</p>\n</blockquote>\n<p>在命名上加以区别:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 公有方法</span></span><br><span class=\"line\">  foo (baz) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._bar(baz);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 私有方法</span></span><br><span class=\"line\">  _bar(baz) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.snaf = baz;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，_bar方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。</p>\n<h3 id=\"七、this的指向\"><a href=\"#七、this的指向\" class=\"headerlink\" title=\"七、this的指向\"></a>七、this的指向</h3><blockquote>\n<p>类的方法内部如果含有this，它默认指向类的实例</p>\n</blockquote>\n<h3 id=\"八、Class的取值函数（getter）和存值函数（setter）\"><a href=\"#八、Class的取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"八、Class的取值函数（getter）和存值函数（setter）\"></a>八、Class的取值函数（getter）和存值函数（setter）</h3><blockquote>\n<p>与ES5一样，在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  get prop() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'getter'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  set prop(value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter: '</span>+value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">inst.prop = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// setter: 123</span></span><br><span class=\"line\">inst.prop</span><br><span class=\"line\"><span class=\"comment\">// 'getter'</span></span><br></pre></td></tr></table></figure>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/learn-es6</a></p>\n<p>文章来源<a href=\"https://hzzly.github.io/\" target=\"_blank\" rel=\"noopener\">hzzly博客技术分享</a></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6Async函数栗子","url":"http://yoursite.com/2017/05/10/读书笔记-es6Async函数栗子/","content":"<h2 id=\"async函数栗子\"><a href=\"#async函数栗子\" class=\"headerlink\" title=\"async函数栗子\"></a><strong>async函数栗子</strong></h2><h3 id=\"栗子一：从豆瓣-API-获取数据\"><a href=\"#栗子一：从豆瓣-API-获取数据\" class=\"headerlink\" title=\"栗子一：从豆瓣 API 获取数据\"></a>栗子一：从豆瓣 API 获取数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fetchDoubanApi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> response;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            response = <span class=\"built_in\">JSON</span>.parse(xhr.responseText);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (response) &#123;</span><br><span class=\"line\">            resolve(response, xhr.status, xhr);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          reject(xhr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'https://api.douban.com/v2/user/aisk'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.setRequestHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/plain\"</span>);</span><br><span class=\"line\">    xhr.send(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> fetchDoubanApi();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"栗子二：根据电影文件名，自动下载对应的海报\"><a href=\"#栗子二：根据电影文件名，自动下载对应的海报\" class=\"headerlink\" title=\"栗子二：根据电影文件名，自动下载对应的海报\"></a>栗子二：根据电影文件名，自动下载对应的海报</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">'path'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> movieDir = __dirname + <span class=\"string\">'/movies'</span>,</span><br><span class=\"line\">    exts     = [<span class=\"string\">'.mkv'</span>, <span class=\"string\">'.avi'</span>, <span class=\"string\">'.mp4'</span>, <span class=\"string\">'.rm'</span>, <span class=\"string\">'.rmvb'</span>, <span class=\"string\">'.wmv'</span>];</span><br><span class=\"line\"><span class=\"comment\">// 读取文件列表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFiles = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        fs.readdir(movieDir, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, files</span>) </span>&#123;</span><br><span class=\"line\">            resolve(files.filter(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> exts.includes(path.parse(v).ext)));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 获取海报</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getPoster = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">movieName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = <span class=\"string\">`https://api.douban.com/v2/movie/search?q=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURI</span>(movieName)&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        request(&#123;<span class=\"attr\">url</span>: url, <span class=\"attr\">json</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</span><br><span class=\"line\">            resolve(body.subjects[<span class=\"number\">0</span>].images.large);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 保存海报</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> savePoster = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">movieName, url</span>) </span>&#123;</span><br><span class=\"line\">    request.get(url).pipe(fs.createWriteStream(path.join(movieDir, movieName + <span class=\"string\">'.jpg'</span>)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> files = <span class=\"keyword\">await</span> readFiles();</span><br><span class=\"line\">    <span class=\"comment\">// await只能使用在原生语法</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> file <span class=\"keyword\">of</span> files) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> name = path.parse(file).name;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`正在获取【<span class=\"subst\">$&#123;name&#125;</span>】的海报`</span>);</span><br><span class=\"line\">        savePoster(name, <span class=\"keyword\">await</span> getPoster(name));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'=== 获取海报完成 ==='</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6Async函数","url":"http://yoursite.com/2017/05/09/读书笔记-es6Async函数/","content":"<h2 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a><strong>async 函数</strong></h2><blockquote>\n<p>async 函数，使得异步操作变得更加方便。它是 Generator 函数的语法糖。</p>\n</blockquote>\n<p>Generator 函数，依次读取两个文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error) reject(error);</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>写成async函数，就是下面这样:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>async函数对 Generator 函数的改进，体现在以下四点:</strong></p>\n<blockquote>\n<p>1）内置执行器</p>\n</blockquote>\n<p>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = asyncReadFile();</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码调用了asyncReadFile函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用next方法，或者用co模块，才能真正执行，得到最后结果。</p>\n<blockquote>\n<p>2）更好的语义</p>\n</blockquote>\n<p>async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</p>\n<blockquote>\n<p>3）更广的适用性</p>\n</blockquote>\n<p>co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>\n<blockquote>\n<p>4）返回值是 Promise</p>\n</blockquote>\n<p>async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。</p>\n<p>进一步说，async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p>\n<h3 id=\"一、基本用法\"><a href=\"#一、基本用法\" class=\"headerlink\" title=\"一、基本用法\"></a>一、基本用法</h3><blockquote>\n<p>async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(resolve, ms);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> timeout(ms);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">asyncPrint(<span class=\"string\">'hello world'</span>, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n<p>上面代码指定5000毫秒以后，输出hello world。</p>\n<p>由于async函数返回的是 Promise 对象，可以作为await命令的参数。所以，上面的例子也可以写成下面的形式:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(resolve, ms);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> timeout(ms);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">asyncPrint(<span class=\"string\">'hello world'</span>, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><strong>async 函数多种使用形式</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数声明</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 对象的方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"keyword\">async</span> foo() &#123;&#125; &#125;;</span><br><span class=\"line\">obj.foo().then(...)</span><br><span class=\"line\"><span class=\"comment\">// Class 的方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Storage</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cachePromise = caches.open(<span class=\"string\">'avatars'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> getAvatar(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cache = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.cachePromise;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache.match(<span class=\"string\">`/avatars/<span class=\"subst\">$&#123;name&#125;</span>.jpg`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> storage = <span class=\"keyword\">new</span> Storage();</span><br><span class=\"line\">storage.getAvatar(<span class=\"string\">'hzzly'</span>).then(…);</span><br><span class=\"line\"><span class=\"comment\">// 箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">async</span> () =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、语法\"><a href=\"#二、语法\" class=\"headerlink\" title=\"二、语法\"></a>二、语法</h3><blockquote>\n<p>async函数的语法规则总体上比较简单，难点是错误处理机制。</p>\n</blockquote>\n<p><strong>返回 Promise 对象</strong></p>\n<blockquote>\n<p>async函数返回一个 Promise 对象。async函数内部return语句返回的值，会成为then方法回调函数的参数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f().then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v))</span><br><span class=\"line\"><span class=\"comment\">// \"hello world\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>Promise 对象的状态变化</strong></p>\n<blockquote>\n<p>async函数返回的 Promise 对象，必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTitle</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> html = <span class=\"keyword\">await</span> response.text();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> html.match(<span class=\"regexp\">/&lt;title&gt;([\\s\\S]+)&lt;\\/title&gt;/i</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getTitle(<span class=\"string\">'https://tc39.github.io/ecma262/'</span>).then(<span class=\"built_in\">console</span>.log)</span><br><span class=\"line\"><span class=\"comment\">// \"ECMAScript 2017 Language Specification\"</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数getTitle内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行then方法里面的console.log。</p>\n<h3 id=\"三、使用注意点\"><a href=\"#三、使用注意点\" class=\"headerlink\" title=\"三、使用注意点\"></a>三、使用注意点</h3><blockquote>\n<ul>\n<li>await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try…catch代码块中。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> somethingThatReturnsAPromise();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 另一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> somethingThatReturnsAPromise()</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//异步操作（即互不依赖），被写成继发关系。这样比较耗时，因为只有getFoo完成以后，才会执行getBar，完全可以让它们同时触发。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">await</span> getFoo();</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"keyword\">await</span> getBar();</span><br><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, bar] = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([getFoo(), getBar()]);</span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fooPromise = getFoo();</span><br><span class=\"line\"><span class=\"keyword\">let</span> barPromise = getBar();</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">await</span> fooPromise;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"keyword\">await</span> barPromise;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>await命令只能用在async函数之中，如果用在普通函数，就会报错。</li>\n</ul>\n</blockquote>\n<p>下一节将介绍 async 函数的栗子(🌰)，敬请期待。。。</p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6Generator函数","url":"http://yoursite.com/2017/05/08/读书笔记-es6Generator函数/","content":"<h2 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a><strong>Generator函数</strong></h2><blockquote>\n<p>从语法上，可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。<br>调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象(遍历器对象)。<br>Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。<br>Generator 函数也不能跟new命令一起用，会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'hello', done: false &#125;</span></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'world', done: false &#125;</span></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 'ending', done: true &#125;</span></span><br><span class=\"line\">hw.next()</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p>\n</blockquote>\n<p><strong>写法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">foo</span>(<span class=\"params\">x, y</span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\">x, y</span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x, y</span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>*<span class=\"title\">foo</span>(<span class=\"params\">x, y</span>) </span>&#123; ··· &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一、yield-表达式\"><a href=\"#一、yield-表达式\" class=\"headerlink\" title=\"一、yield 表达式\"></a>一、yield 表达式</h3><blockquote>\n<p>由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。</p>\n</blockquote>\n<p>遍历器对象的next方法的运行逻辑如下:<br>1）遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。<br>2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。<br>3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。<br>4）如果该函数没有return语句，则返回的对象的value属性值为undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>  <span class=\"number\">123</span> + <span class=\"number\">456</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen()</span><br><span class=\"line\">gen.next()</span><br><span class=\"line\"><span class=\"comment\">//&#123; value: 579, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"二、for…of-循环\"><a href=\"#二、for…of-循环\" class=\"headerlink\" title=\"二、for…of 循环\"></a>二、for…of 循环</h3><blockquote>\n<p>for…of循环可以自动遍历 Generator 函数时生成的Iterator对象，且此时不再需要调用next方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>\n<p>这里需要注意，一旦next方法的返回对象的done属性为true，for…of循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的6，不包括在for…of循环之中。</p>\n<blockquote>\n<p>除了for…of循环以外，扩展运算符（…）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">numbers</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 扩展运算符</span></span><br><span class=\"line\">[...numbers()] <span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// Array.from 方法</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(numbers()) <span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// 解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = numbers();</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// for...of 循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n <span class=\"keyword\">of</span> numbers()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、作为对象属性的Generator函数\"><a href=\"#三、作为对象属性的Generator函数\" class=\"headerlink\" title=\"三、作为对象属性的Generator函数\"></a>三、作为对象属性的Generator函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  * myGeneratorMethod() &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  myGeneratorMethod: <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ···</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、应用\"><a href=\"#四、应用\" class=\"headerlink\" title=\"四、应用\"></a>四、应用</h3><blockquote>\n<p>1）异步操作的同步化表达</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loadUI</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  showLoadingScreen();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> loadUIDataAsynchronously();</span><br><span class=\"line\">  hideLoadingScreen();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> loader = loadUI();</span><br><span class=\"line\"><span class=\"comment\">// 加载UI</span></span><br><span class=\"line\">loader.next()</span><br><span class=\"line\"><span class=\"comment\">// 卸载UI</span></span><br><span class=\"line\">loader.next()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> request(<span class=\"string\">\"http://some.url\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse(result);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(resp.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  makeAjaxCall(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">    it.next(response);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = main();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2）控制流管理</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</span><br><span class=\"line\">  step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</span><br><span class=\"line\">    step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</span><br><span class=\"line\">      step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do something with value4</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>采用 Promise 改写上面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(step1)</span><br><span class=\"line\">  .then(step2)</span><br><span class=\"line\">  .then(step3)</span><br><span class=\"line\">  .then(step4)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something with value4</span></span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .done();</span><br></pre></td></tr></table></figure></p>\n<p>Generator 函数可以进一步改善代码运行流程。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">longRunningTask</span>(<span class=\"params\">value1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = <span class=\"keyword\">yield</span> step1(value1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value3 = <span class=\"keyword\">yield</span> step2(value2);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value4 = <span class=\"keyword\">yield</span> step3(value3);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value5 = <span class=\"keyword\">yield</span> step4(value4);</span><br><span class=\"line\">    <span class=\"comment\">// Do something with value4</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scheduler(longRunningTask(initialValue));</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scheduler</span>(<span class=\"params\">task</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> taskObj = task.next(task.value);</span><br><span class=\"line\">  <span class=\"comment\">// 如果Generator函数未结束，就继续调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!taskObj.done) &#123;</span><br><span class=\"line\">    task.value = taskObj.value</span><br><span class=\"line\">    scheduler(task);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6Set和Map数据结构","url":"http://yoursite.com/2017/05/07/读书笔记-es6Set和Map数据结构/","content":"<h2 id=\"Set和Map数据结构\"><a href=\"#Set和Map数据结构\" class=\"headerlink\" title=\"Set和Map数据结构\"></a><strong>Set和Map数据结构</strong></h2><h3 id=\"一、Set\"><a href=\"#一、Set\" class=\"headerlink\" title=\"一、Set\"></a>一、Set</h3><blockquote>\n<p>它类似于数组，但是成员的值都是唯一的，没有重复的值。Set 本身是一个构造函数，用来生成 Set 数据结构。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>].forEach(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> s.add(x));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2 3 5 4</span></span><br></pre></td></tr></table></figure>\n<p>Set 函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\">[...set]</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"comment\">// 例二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">items.size <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 例三</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divs</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...document.querySelectorAll(<span class=\"string\">'div'</span>)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(divs());</span><br><span class=\"line\">set.size <span class=\"comment\">// 56</span></span><br><span class=\"line\"><span class=\"comment\">// 类似于</span></span><br><span class=\"line\">divs().forEach(<span class=\"function\"><span class=\"params\">div</span> =&gt;</span> set.add(div));</span><br><span class=\"line\">set.size <span class=\"comment\">// 56</span></span><br></pre></td></tr></table></figure>\n<p>去除数组重复成员的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 去除数组的重复成员</span></span><br><span class=\"line\">[...new <span class=\"built_in\">Set</span>(array)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、Set-实例的属性和方法\"><a href=\"#二、Set-实例的属性和方法\" class=\"headerlink\" title=\"二、Set 实例的属性和方法\"></a>二、Set 实例的属性和方法</h3><blockquote>\n<ul>\n<li>属性<ul>\n<li>Set.prototype.constructor：构造函数，默认就是Set函数。</li>\n<li>Set.prototype.size：返回Set实例的成员总数。</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>add(value)：添加某个值，返回Set结构本身。</li>\n<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li>\n<li>has(value)：返回一个布尔值，表示该值是否为Set的成员。</li>\n<li>clear()：清除所有成员，没有返回值。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"三、遍历操作\"><a href=\"#三、遍历操作\" class=\"headerlink\" title=\"三、遍历操作\"></a>三、遍历操作</h3><blockquote>\n<ul>\n<li>keys()：返回键名的遍历器</li>\n<li>values()：返回键值的遍历器</li>\n<li>entries()：返回键值对的遍历器</li>\n<li>forEach()：使用回调函数遍历每个成员</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"red\", \"red\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"green\", \"green\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"blue\", \"blue\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">set.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(value * <span class=\"number\">2</span>) )</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...set].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 返回Set结构：&#123;2, 4, 6&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...set].filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> (x % <span class=\"number\">2</span>) == <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"comment\">// 返回Set结构：&#123;2, 4&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> unique = [...new <span class=\"built_in\">Set</span>(arr)];</span><br><span class=\"line\"><span class=\"comment\">// [3, 5, 2]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"四、Map\"><a href=\"#四、Map\" class=\"headerlink\" title=\"四、Map\"></a>四、Map</h3><blockquote>\n<p>它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">'name'</span>, <span class=\"string\">'张三'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'title'</span>, <span class=\"string\">'Author'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\">map.size <span class=\"comment\">// 2</span></span><br><span class=\"line\">map.has(<span class=\"string\">'name'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">map.get(<span class=\"string\">'name'</span>) <span class=\"comment\">// \"张三\"</span></span><br><span class=\"line\">map.has(<span class=\"string\">'title'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">map.get(<span class=\"string\">'title'</span>) <span class=\"comment\">// \"Author\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"五、Map-实例的属性和方法\"><a href=\"#五、Map-实例的属性和方法\" class=\"headerlink\" title=\"五、Map 实例的属性和方法\"></a>五、Map 实例的属性和方法</h3><blockquote>\n<ul>\n<li>属性<ul>\n<li>Map.prototype.constructor：构造函数，默认就是Map函数。</li>\n<li>Map.prototype.size：返回Map实例的成员总数。</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>set(key, value)：set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。可以采用链式写法。</li>\n<li>get(key)：get方法读取key对应的键值，如果找不到key，返回undefined。</li>\n<li>has(key)：has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li>\n<li>delete(key)：delete方法删除某个键，返回true。如果删除失败，返回false。</li>\n<li>clear(): clear方法清除所有成员，没有返回值。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"六、遍历操作\"><a href=\"#六、遍历操作\" class=\"headerlink\" title=\"六、遍历操作\"></a>六、遍历操作</h3><p>和 Set 一样</p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6对象的扩展","url":"http://yoursite.com/2017/05/06/读书笔记-es6对象的扩展/","content":"<h2 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a><strong>对象的扩展</strong></h2><h3 id=\"一、属性和方法的简洁表示法\"><a href=\"#一、属性和方法的简洁表示法\" class=\"headerlink\" title=\"一、属性和方法的简洁表示法\"></a>一、属性和方法的简洁表示法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = &#123;foo&#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &#123;foo: \"bar\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = &#123;<span class=\"attr\">foo</span>: foo&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  method() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//如果某个方法的值是一个Generator函数，前面需要加上星号。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  * m()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用于函数的返回值，将会非常方便</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPoint</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;x, y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getPoint()</span><br><span class=\"line\"><span class=\"comment\">// &#123;x:1, y:10&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CommonJS模块输出变量，就非常合适使用简洁写法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ms = &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getItem</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> ms ? ms[key] : <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setItem</span> (<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  ms[key] = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ms = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; getItem, setItem, clear &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  getItem: getItem,</span><br><span class=\"line\">  setItem: setItem,</span><br><span class=\"line\">  clear: clear</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、Object-is\"><a href=\"#二、Object-is\" class=\"headerlink\" title=\"二、Object.is()\"></a>二、Object.is()</h3><blockquote>\n<p>Object.is它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>\n</blockquote>\n<h3 id=\"三、Object-assign\"><a href=\"#三、Object-assign\" class=\"headerlink\" title=\"三、Object.assign()\"></a>三、Object.assign()</h3><blockquote>\n<p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\">obj1.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.a.b <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">d</span>: <span class=\"string\">'e'</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: <span class=\"string\">'hello'</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source)</span><br><span class=\"line\"><span class=\"comment\">// &#123; a: &#123; b: 'hello' &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>Object.assign常见用途</strong></p>\n<blockquote>\n<p>1）为对象添加属性</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;x, y&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面方法通过Object.assign方法，将x属性和y属性添加到Point类的对象实例。</p>\n<blockquote>\n<p>2）为对象添加方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class=\"line\">  someMethod(arg1, arg2) &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  anotherMethod() &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></span><br><span class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>3）克隆对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。</p>\n<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>4）合并多个对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge =</span><br><span class=\"line\">  (target, ...sources) =&gt; <span class=\"built_in\">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure>\n<p>如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge =</span><br><span class=\"line\">  (...sources) =&gt; <span class=\"built_in\">Object</span>.assign(&#123;&#125;, ...sources);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、属性的遍历\"><a href=\"#四、属性的遍历\" class=\"headerlink\" title=\"四、属性的遍历\"></a>四、属性的遍历</h3><blockquote>\n<p>1）for…in</p>\n</blockquote>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。</p>\n<blockquote>\n<p>2）Object.keys(obj)</p>\n</blockquote>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</p>\n<blockquote>\n<p>3）Object.getOwnPropertyNames(obj)</p>\n</blockquote>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</p>\n<blockquote>\n<p>4）Object.getOwnPropertySymbols(obj)</p>\n</blockquote>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。</p>\n<blockquote>\n<p>5）Reflect.ownKeys(obj)</p>\n</blockquote>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(&#123; [<span class=\"built_in\">Symbol</span>()]:<span class=\"number\">0</span>, <span class=\"attr\">b</span>:<span class=\"number\">0</span>, <span class=\"number\">10</span>:<span class=\"number\">0</span>, <span class=\"number\">2</span>:<span class=\"number\">0</span>, <span class=\"attr\">a</span>:<span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// ['2', '10', 'b', 'a', Symbol()]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"五、Object-keys-，Object-values-，Object-entries\"><a href=\"#五、Object-keys-，Object-values-，Object-entries\" class=\"headerlink\" title=\"五、Object.keys()，Object.values()，Object.entries()\"></a>五、Object.keys()，Object.values()，Object.entries()</h3><blockquote>\n<ul>\n<li>Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</li>\n<li>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。Object.values只返回对象自身的可遍历属性。Object.values会过滤属性名为 Symbol 值的属性。如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。</li>\n<li>Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。如果原对象的属性名是一个 Symbol 值，该属性会被忽略。Object.entries的基本用途是遍历对象的属性。另一个用处是，将对象转为真正的Map结构。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"foo\", \"baz\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"bar\", 42]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">100</span>: <span class=\"string\">'a'</span>, <span class=\"number\">2</span>: <span class=\"string\">'b'</span>, <span class=\"number\">7</span>: <span class=\"string\">'c'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"b\", \"c\", \"a\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.entries(obj)</span><br><span class=\"line\"><span class=\"comment\">// [ [\"foo\", \"bar\"], [\"baz\", 42] ]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;keys, values, entries&#125; = <span class=\"built_in\">Object</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> keys(obj)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 'a', 'b', 'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> values(obj)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 1, 2, 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> entries(obj)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log([key, value]); <span class=\"comment\">// ['a', 1], ['b', 2], ['c', 3]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"六、对象的扩展运算符\"><a href=\"#六、对象的扩展运算符\" class=\"headerlink\" title=\"六、对象的扩展运算符\"></a>六、对象的扩展运算符</h3><blockquote>\n<p>扩展运算符（…）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> z = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n = &#123; ...z &#125;;</span><br><span class=\"line\">n <span class=\"comment\">// &#123; a: 3, b: 4 &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> aClone = &#123; ...a &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> aClone = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a);</span><br><span class=\"line\"><span class=\"comment\">//合并两个对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ab = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a, b);</span><br></pre></td></tr></table></figure>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/learn-es6</a></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6函数的扩展","url":"http://yoursite.com/2017/05/05/读书笔记-es6函数的扩展/","content":"<h2 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a><strong>函数的扩展</strong></h2><h3 id=\"一、函数参数的默认值\"><a href=\"#一、函数参数的默认值\" class=\"headerlink\" title=\"一、函数参数的默认值\"></a>一、函数参数的默认值</h3><blockquote>\n<ul>\n<li>参数变量是默认声明的，所以不能用let或const再次声明</li>\n<li>通常情况下，定义了默认值的参数，应该是函数的尾参数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">'China'</span>) <span class=\"comment\">// Hello China</span></span><br><span class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">''</span>) <span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、与解构赋值默认值结合使用\"><a href=\"#二、与解构赋值默认值结合使用\" class=\"headerlink\" title=\"二、与解构赋值默认值结合使用\"></a>二、与解构赋值默认值结合使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">&#123;x, y = <span class=\"number\">5</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(&#123;&#125;) <span class=\"comment\">// undefined, 5</span></span><br><span class=\"line\">foo(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;) <span class=\"comment\">// 1, 5</span></span><br><span class=\"line\">foo(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;) <span class=\"comment\">// 1, 2</span></span><br><span class=\"line\">foo() <span class=\"comment\">// TypeError: Cannot read property 'x' of undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、rest参数\"><a href=\"#三、rest参数\" class=\"headerlink\" title=\"三、rest参数\"></a>三、rest参数</h3><blockquote>\n<p>ES6 引入 rest 参数（形式为“…变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>\n<ul>\n<li>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</span><br><span class=\"line\">  items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    array.push(item);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">push(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、扩展运算符-…\"><a href=\"#四、扩展运算符-…\" class=\"headerlink\" title=\"四、扩展运算符(…)\"></a>四、扩展运算符(…)</h3><blockquote>\n<p>它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。<br>扩展运算符内部调用的是数据结构的Iterator接口</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\">[...document.querySelectorAll(<span class=\"string\">'div'</span>)]</span><br><span class=\"line\"><span class=\"comment\">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</span><br><span class=\"line\">  array.push(...items);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</span><br><span class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n<p>栗子：</p>\n<blockquote>\n<ul>\n<li>替代数组的apply方法</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>合并数组</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\"><span class=\"comment\">// ES5的合并数组</span></span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class=\"line\"><span class=\"comment\">// ES6的合并数组</span></span><br><span class=\"line\">[...arr1, ...arr2, ...arr3]</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>与解构赋值结合</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [];</span><br><span class=\"line\">first <span class=\"comment\">// undefined</span></span><br><span class=\"line\">rest  <span class=\"comment\">// []:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">\"foo\"</span>];</span><br><span class=\"line\">first  <span class=\"comment\">// \"foo\"</span></span><br><span class=\"line\">rest   <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"五、箭头函数\"><a href=\"#五、箭头函数\" class=\"headerlink\" title=\"五、箭头函数\"></a>五、箭头函数</h3><blockquote>\n<p>箭头函数可以让this指向固定化，这种特性很有利于封装回调函数</p>\n</blockquote>\n<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</p>\n<p>（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</span><br><span class=\"line\"><span class=\"comment\">//等同于：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li>箭头函数简化回调函数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常函数写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 箭头函数写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>箭头函数可以让setTimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.s1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.s2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 箭头函数</span></span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.s1++, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 普通函数</span></span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.s2++;</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'s1: '</span>, timer.s1), <span class=\"number\">3100</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'s2: '</span>, timer.s2), <span class=\"number\">3100</span>);</span><br><span class=\"line\"><span class=\"comment\">// s1: 3</span></span><br><span class=\"line\"><span class=\"comment\">// s2: 0</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>因为所有的内层函数都是箭头函数，都没有自己的this，它们的this其实都是最外层foo函数的this</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'id:'</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = foo.call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> t1 = f.call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>&#125;)()(); <span class=\"comment\">// id: 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t2 = f().call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>&#125;)(); <span class=\"comment\">// id: 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t3 = f()().call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>&#125;); <span class=\"comment\">// id: 1</span></span><br></pre></td></tr></table></figure>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/learn-es6</a></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6数组的扩展","url":"http://yoursite.com/2017/05/04/读书笔记-es6数组的扩展/","content":"<h2 id=\"数组的扩展\"><a href=\"#数组的扩展\" class=\"headerlink\" title=\"数组的扩展\"></a><strong>数组的扩展</strong></h2><h3 id=\"一、Array-from\"><a href=\"#一、Array-from\" class=\"headerlink\" title=\"一、Array.from()\"></a>一、Array.from()</h3><blockquote>\n<p>将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类似数组的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">    <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [].slice.call(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"built_in\">Array</span>.from(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"comment\">// NodeList对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ps = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(ps).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// arguments对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>扩展运算符（…）也可以将某些数据结构转为数组</p>\n</blockquote>\n<h3 id=\"二、Array-of\"><a href=\"#二、Array-of\" class=\"headerlink\" title=\"二、Array.of()\"></a>二、Array.of()</h3><blockquote>\n<p>用于将一组值，转换为数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、数组实例的copyWithin\"><a href=\"#三、数组实例的copyWithin\" class=\"headerlink\" title=\"三、数组实例的copyWithin()\"></a>三、数组实例的copyWithin()</h3><blockquote>\n<p>在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组</p>\n<ul>\n<li>target（必需）：从该位置开始替换数据。</li>\n<li>start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。</li>\n<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 5, 3, 4, 5]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"comment\">// -2相当于3号位，-1相当于4号位</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"四、数组实例的find-和findIndex\"><a href=\"#四、数组实例的find-和findIndex\" class=\"headerlink\" title=\"四、数组实例的find()和findIndex()\"></a>四、数组实例的find()和findIndex()</h3><blockquote>\n<ul>\n<li>find方法，用于找出第一个符合条件的<strong>数组成员</strong>。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。</li>\n<li>findIndex返回第一个符合条件的数组成员的<strong>位置</strong>，如果所有成员都不符合条件，则返回-1。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">-5</span>, <span class=\"number\">10</span>].find(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// -5</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 10</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"五、数组实例的fill\"><a href=\"#五、数组实例的fill\" class=\"headerlink\" title=\"五、数组实例的fill()\"></a>五、数组实例的fill()</h3><blockquote>\n<p>使用给定值，填充一个数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br><span class=\"line\"><span class=\"comment\">//从1号位开始，向原数组填充7，到2号位之前结束</span></span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、数组实例的entries-，keys-和values\"><a href=\"#六、数组实例的entries-，keys-和values\" class=\"headerlink\" title=\"六、数组实例的entries()，keys()和values()\"></a>六、数组实例的entries()，keys()和values()</h3><blockquote>\n<p>keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 'a'</span></span><br><span class=\"line\"><span class=\"comment\">// 'b'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// 1 \"b\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"七、数组实例的includes\"><a href=\"#七、数组实例的includes\" class=\"headerlink\" title=\"七、数组实例的includes()\"></a>七、数组实例的includes()</h3><blockquote>\n<p>返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似,方法的第二个参数表示搜索的起始位置，默认为0</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"八、数组的空位\"><a href=\"#八、数组的空位\" class=\"headerlink\" title=\"八、数组的空位\"></a>八、数组的空位</h3><blockquote>\n<ul>\n<li>forEach(), filter(), every() 和some()都会跳过空位</li>\n<li>map()会跳过空位，但会保留这个值</li>\n<li>join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].forEach(<span class=\"function\">(<span class=\"params\">x,i</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(i)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// filter方法</span></span><br><span class=\"line\">[<span class=\"string\">'a'</span>,,<span class=\"string\">'b'</span>].filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"literal\">true</span>) <span class=\"comment\">// ['a','b']</span></span><br><span class=\"line\"><span class=\"comment\">// every方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].every(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x===<span class=\"string\">'a'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// some方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].some(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x !== <span class=\"string\">'a'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// map方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">1</span>) <span class=\"comment\">// [,1]</span></span><br><span class=\"line\"><span class=\"comment\">// join方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>].join(<span class=\"string\">'#'</span>) <span class=\"comment\">// \"#a##\"</span></span><br><span class=\"line\"><span class=\"comment\">// toString方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>].toString() <span class=\"comment\">// \",a,,\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ES6则是明确将空位转为undefined。尽量建议避免出现空位。</p>\n</blockquote>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6数值的扩展","url":"http://yoursite.com/2017/05/03/读书笔记-es6数值的扩展/","content":"<h2 id=\"数值的扩展\"><a href=\"#数值的扩展\" class=\"headerlink\" title=\"数值的扩展\"></a><strong>数值的扩展</strong></h2><h3 id=\"一、Number-isFinite-Number-isNaN\"><a href=\"#一、Number-isFinite-Number-isNaN\" class=\"headerlink\" title=\"一、Number.isFinite(), Number.isNaN()\"></a>一、Number.isFinite(), Number.isNaN()</h3><blockquote>\n<ul>\n<li>Number.isFinite()  检查一个数值是否为有限的（finite）</li>\n<li>Number.isNaN()  检查一个值是否为NaN</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Number.isFinite()</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">15</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">0.8</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">NaN</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">Infinity</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(-<span class=\"literal\">Infinity</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"string\">'foo'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"string\">'15'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">true</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">//Number.isNaN()</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">15</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">'15'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">true</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">9</span>/<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">'true'</span>/<span class=\"number\">0</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">'true'</span>/<span class=\"string\">'true'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、Number-parseInt-Number-parseFloat\"><a href=\"#二、Number-parseInt-Number-parseFloat\" class=\"headerlink\" title=\"二、Number.parseInt(), Number.parseFloat()\"></a>二、Number.parseInt(), Number.parseFloat()</h3><blockquote>\n<p>全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.parseInt === <span class=\"built_in\">parseInt</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.parseFloat === <span class=\"built_in\">parseFloat</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、Number-isInteger\"><a href=\"#三、Number-isInteger\" class=\"headerlink\" title=\"三、Number.isInteger()\"></a>三、Number.isInteger()</h3><blockquote>\n<p>判断一个值是否为整数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">25</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">25.0</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">25.1</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"string\">\"15\"</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"literal\">true</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"四、安全整数和Number-isSafeInteger\"><a href=\"#四、安全整数和Number-isSafeInteger\" class=\"headerlink\" title=\"四、安全整数和Number.isSafeInteger()\"></a>四、安全整数和Number.isSafeInteger()</h3><blockquote>\n<p>JavaScript能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。Number.isSafeInteger() 用来判断一个整数是否落在这个范围之内</p>\n</blockquote>\n<h3 id=\"五、Math-trunc\"><a href=\"#五、Math-trunc\" class=\"headerlink\" title=\"五、Math.trunc()\"></a>五、Math.trunc()</h3><blockquote>\n<p>去除一个数的小数部分，返回整数部分</p>\n</blockquote>\n<h3 id=\"六、Math-sign\"><a href=\"#六、Math-sign\" class=\"headerlink\" title=\"六、Math.sign()\"></a>六、Math.sign()</h3><blockquote>\n<p>判断一个数到底是正数、负数、还是零</p>\n<ul>\n<li>参数为正数，返回+1；</li>\n<li>参数为负数，返回-1；</li>\n<li>参数为0，返回0；</li>\n<li>参数为-0，返回-0;</li>\n<li>其他值，返回NaN。</li>\n</ul>\n</blockquote>\n<h3 id=\"七、Math-signbit\"><a href=\"#七、Math-signbit\" class=\"headerlink\" title=\"七、Math.signbit()\"></a>七、Math.signbit()</h3><blockquote>\n<p>判断一个数的符号位是否设置了</p>\n<ul>\n<li>如果参数是NaN，返回false</li>\n<li>如果参数是-0，返回true</li>\n<li>如果参数是负值，返回true</li>\n<li>其他情况返回false</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">2</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">-2</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">0</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">-0</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"八、指数运算符\"><a href=\"#八、指数运算符\" class=\"headerlink\" title=\"八、指数运算符( ** )\"></a>八、指数运算符( ** )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/learn-es6</a></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"DIY一个自己的音乐播放器","url":"http://yoursite.com/2017/04/27/DIY一个自己的音乐播放器/","content":"<blockquote>\n<p>前言：在最近的一个外包项目<a href=\"http://www.zblmchina.com/#/post\" target=\"_blank\" rel=\"noopener\">中包联盟</a>(PC端)中使用到了video，遇到了好多坑。突发奇想来踩一踩audio的坑😀，果然一入深似海，👇下面将分享我的DIY之路-Vue音乐播放器。<br>注：本项目为开源项目，不能用于商业应用，仅供学习。有问题或建议发我邮箱：<a href=\"mailto:hjingren@aliyun.com\" target=\"_blank\" rel=\"noopener\">hjingren@aliyun.com</a></p>\n</blockquote>\n<p>[温馨提示：pc浏览f12手机模式最佳,手机建议wifi下访问]</p>\n<h3 id=\"预览地址：-http-hzzly-net-magic-music\"><a href=\"#预览地址：-http-hzzly-net-magic-music\" class=\"headerlink\" title=\"预览地址： http://hzzly.net/magic-music\"></a><strong>预览地址：</strong> <a href=\"http://hzzly.net/magic-music\" target=\"_blank\" rel=\"noopener\">http://hzzly.net/magic-music</a></h3><h3 id=\"Github地址：-https-github-com-hzzly-MagicMusic\"><a href=\"#Github地址：-https-github-com-hzzly-MagicMusic\" class=\"headerlink\" title=\"Github地址： https://github.com/hzzly/MagicMusic\"></a><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/MagicMusic\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/MagicMusic</a></h3><p>欢迎大家的star啦😄~</p>\n<p>先来个预览：</p>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/magic-music1.gif\" alt=\"magic-music1\"></p>\n<p>更多预览：<a href=\"http://hjingren.cn/magic-music/pic.html\" target=\"_blank\" rel=\"noopener\">更多</a></p>\n<p>👉老铁们，准备发车(技能点)：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue文档</a></li>\n<li><a href=\"https://router.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vue-router文档</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vuex文档</a> 不想看文档的可以看看我这篇博客<a href=\"https://hzzly.github.io/2017/04/04/vuex%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">vuex学习实践笔记</a></li>\n<li><a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios文档</a> 或者这篇博客 <a href=\"https://blog.ygxdxx.com/2017/02/01/Vuex2&amp;Axios-Develop/\" target=\"_blank\" rel=\"noopener\">Vuex2 与 Axios 开发</a>(我也是参考这篇，感谢作者😁)</li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">es6(阮一峰的es6入门)</a> 可以参考<a href=\"https://hzzly.github.io/tags/es6/\" target=\"_blank\" rel=\"noopener\">我的es6之路</a>(还在继续,轻喷)</li>\n<li><a href=\"https://hzzly.github.io/2017/03/03/Web%E7%9A%84Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B/\" target=\"_blank\" rel=\"noopener\">flex (Web的flex弹性盒模型)</a></li>\n<li><a href=\"https://hzzly.github.io/2017/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E8%A7%A3%E5%86%B3/\" target=\"_blank\" rel=\"noopener\">移动端屏幕适配的解决 (flexible+rem)</a></li>\n<li><a href=\"https://hzzly.github.io/2017/04/26/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8sessionStorage%E4%B8%8ElocalStorage/\" target=\"_blank\" rel=\"noopener\">本地存储(sessionStorage、localStorage)</a></li>\n<li><a href=\"https://github.com/hilongjw/vue-lazyload?from=gold\" target=\"_blank\" rel=\"noopener\">图片懒加载</a></li>\n</ul>\n</blockquote>\n<p>👉坐好，出发</p>\n<h3 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h3><h4 id=\"1、首页\"><a href=\"#1、首页\" class=\"headerlink\" title=\"1、首页\"></a>1、首页</h4><blockquote>\n<ul>\n<li>[x] 轮播</li>\n<li>[x] 个性推荐[流行、古典、轻音乐、流行]</li>\n<li>[x] 歌曲操作<ul>\n<li>[x] 加入播放列表</li>\n<li>[ ] 喜欢</li>\n<li>[ ] 分享</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"2、底部播放控件\"><a href=\"#2、底部播放控件\" class=\"headerlink\" title=\"2、底部播放控件\"></a>2、底部播放控件</h4><blockquote>\n<ul>\n<li>[x] 播放</li>\n<li>[x] 暂停</li>\n<li>[x] 下一曲</li>\n<li>[x] 播放进度条</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"3、播放页面\"><a href=\"#3、播放页面\" class=\"headerlink\" title=\"3、播放页面\"></a>3、播放页面</h4><blockquote>\n<ul>\n<li>[x] 上一曲</li>\n<li>[x] 播放</li>\n<li>[x] 暂停</li>\n<li>[x] 下一曲</li>\n<li>[x] 播放进度条[弧形进度条]</li>\n<li>[x] 歌词滚动</li>\n<li>[x] 播放的歌词高亮</li>\n<li>[ ] 播放模式[单曲循环、列表循环、随机播放]</li>\n</ul>\n</blockquote>\n<h4 id=\"4、播放列表\"><a href=\"#4、播放列表\" class=\"headerlink\" title=\"4、播放列表\"></a>4、播放列表</h4><blockquote>\n<ul>\n<li>[x] 播放歌曲高亮</li>\n<li>[x] 切歌(单击切歌)</li>\n<li>[x] 删歌(点击右侧小X)</li>\n<li>[ ] 清空播放列表</li>\n<li>[ ] 本地缓存播放列表</li>\n</ul>\n</blockquote>\n<h4 id=\"5、排行榜\"><a href=\"#5、排行榜\" class=\"headerlink\" title=\"5、排行榜\"></a>5、排行榜</h4><blockquote>\n<ul>\n<li>[x] 热门排行榜</li>\n<li>[x] 排行榜里的歌曲(单击播放)</li>\n</ul>\n</blockquote>\n<h4 id=\"6、音乐搜索\"><a href=\"#6、音乐搜索\" class=\"headerlink\" title=\"6、音乐搜索\"></a>6、音乐搜索</h4><p>输入搜索关键词，点击<code>放大镜</code>图标</p>\n<blockquote>\n<ul>\n<li>[x] 单曲(单击或点击歌曲操作(…)添加至音乐播放列表，部分音乐会存在版权问题无法播放)</li>\n<li>[x] 歌手</li>\n<li>[x] 专辑</li>\n<li>[x] 歌单</li>\n<li>[x] 用户</li>\n<li>[x] 本地缓存搜索列表</li>\n</ul>\n</blockquote>\n<h4 id=\"7、侧边栏\"><a href=\"#7、侧边栏\" class=\"headerlink\" title=\"7、侧边栏\"></a>7、侧边栏</h4><blockquote>\n<ul>\n<li>[x] 头像</li>\n<li>[x] 菜单<ul>\n<li>[x] 个人中心</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>感谢作者把api整理的这么好(点个赞👍)</p>\n<blockquote>\n<p><a href=\"https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=%e6%90%9c%e7%b4%a2%e9%9f%b3%e4%b9%90\" target=\"_blank\" rel=\"noopener\">网易云音乐 NodeJS 版 API</a></p>\n</blockquote>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——MagicMusic/</span><br><span class=\"line\">|   |——build/</span><br><span class=\"line\">|   |——confg/</span><br><span class=\"line\">|   |——node_modules/</span><br><span class=\"line\">|   |——src/</span><br><span class=\"line\">|   |   |——assets/                 //静态文件</span><br><span class=\"line\">|   |   |——components/             //公共组件</span><br><span class=\"line\">|   |   |——api/</span><br><span class=\"line\">|   |   |   |——index.js            //axios封装与api</span><br><span class=\"line\">|   |   |——pages/                  //存放项目页面</span><br><span class=\"line\">|   |   |   |——classical.vue       //古典歌曲页面</span><br><span class=\"line\">|   |   |   |——collection.vue      //排行榜</span><br><span class=\"line\">|   |   |   |——home.vue            //首页</span><br><span class=\"line\">|   |   |   |——light.vue           //轻音乐歌曲页面</span><br><span class=\"line\">|   |   |   |——login.vue           //登录页面</span><br><span class=\"line\">|   |   |   |——popular.vue         //流行歌曲页面</span><br><span class=\"line\">|   |   |   |——radio.vue           //电台歌曲页面</span><br><span class=\"line\">|   |   |   |——rank.vue            //排行榜列表</span><br><span class=\"line\">|   |   |   |——search.vue          //搜索页</span><br><span class=\"line\">|   |   |   |——user.vue            //用户</span><br><span class=\"line\">|   |   |——router/                 </span><br><span class=\"line\">|   |   |   |——index.js            //页面路由</span><br><span class=\"line\">|   |   |——util                    //公用方法</span><br><span class=\"line\">|   |   |——vuex /                  //存放vuex代码</span><br><span class=\"line\">|   |   |   |——modules /           //数据模块</span><br><span class=\"line\">|   |   |   |——store.js            //vuex主入口</span><br><span class=\"line\">|   |   |   |——types.js            //vuex的types文件</span><br><span class=\"line\">|   |   |——App.vue                 //父组件</span><br><span class=\"line\">|   |   |——main.js                 //入口文件</span><br><span class=\"line\">|   |——static/</span><br><span class=\"line\">|   |——.babelrc</span><br><span class=\"line\">|   |——.editorconfig</span><br><span class=\"line\">|   |——.gitgnore</span><br><span class=\"line\">|   |——index.html</span><br><span class=\"line\">|   |——package.json</span><br><span class=\"line\">|   |——README.md</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发心得与总结\"><a href=\"#开发心得与总结\" class=\"headerlink\" title=\"开发心得与总结\"></a>开发心得与总结</h3><h4 id=\"1、轮播图\"><a href=\"#1、轮播图\" class=\"headerlink\" title=\"1、轮播图\"></a>1、轮播图</h4><p>首先感谢作者<a href=\"https://github.com/ShanaMaid/vue-image-scroll\" target=\"_blank\" rel=\"noopener\">ShanaMaid/vue-image-scroll</a>开源的代码，我把代码copy下来自己进行了一点修改(没有手指滑动效果)，因为这是移动端，少不了的手指滑动切换，所以添加了<a href=\"https://github.com/vuejs/vue-touch#next\" target=\"_blank\" rel=\"noopener\">vue-touch</a>(偷偷告诉你，vue-touch的next分支还是支持vue2.0的😜)。<a href=\"https://github.com/hzzly/MagicMusic/blob/master/src/components/banner.vue\" target=\"_blank\" rel=\"noopener\">代码传送门</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) in image\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[move[index]]\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">v-touch</span> <span class=\"attr\">class</span>=<span class=\"string\">\"vuetouch\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-on:swipeleft</span>=<span class=\"string\">\"nextPic\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-on:swiperight</span>=<span class=\"string\">\"prePic\"</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">v-touch</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    nextPic(event) &#123;</span><br><span class=\"line\">        let temp = this.move.pop()</span><br><span class=\"line\">        this.move.unshift(temp)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    prePic(event) &#123;</span><br><span class=\"line\">        let temp = this.move.shift()</span><br><span class=\"line\">        this.move.push(temp)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2、歌曲操作-喜欢，分享，加入播放列表-动画、播放列表展开与删除歌曲动画\"><a href=\"#2、歌曲操作-喜欢，分享，加入播放列表-动画、播放列表展开与删除歌曲动画\" class=\"headerlink\" title=\"2、歌曲操作(喜欢，分享，加入播放列表)动画、播放列表展开与删除歌曲动画\"></a>2、歌曲操作(喜欢，分享，加入播放列表)动画、播放列表展开与删除歌曲动画</h4><blockquote>\n<p><code>Vue</code>提供了<code>transition</code>的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过渡</p>\n<ul>\n<li>条件渲染 （使用 v-if）</li>\n<li>条件展示 （使用 v-show）</li>\n<li>动态组件</li>\n<li>组件根节点</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition name=<span class=\"string\">\"move\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"menu\"</span> v-show=<span class=\"string\">\"item.menuShow\"</span>&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>transition&gt;</span><br><span class=\"line\">&lt;transition-group name=<span class=\"string\">\"slide\"</span> tag=<span class=\"string\">\"div\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"list-wrapper\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item\"</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item, index) in listenLists\"</span> :key=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>transition-group&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>transition-group</code>一组过度动画，这里有个小坑的，之前看官网列表过渡的栗子，给每一项设置唯一的key值，一般都会用index。所以在做的时候就把index传给key，结果过渡老是不对，后来换成对应的<code>item</code>就正常了(生无可恋脸)。</p>\n</blockquote>\n<h4 id=\"3、直线进度条、弧形进度条\"><a href=\"#3、直线进度条、弧形进度条\" class=\"headerlink\" title=\"3、直线进度条、弧形进度条\"></a>3、直线进度条、弧形进度条</h4><blockquote>\n<p>西班牙建筑大师曾说过：“直线属于人类，曲线则归于上帝”。在这里我大胆的使用了弧形来作为进度条，(几大热门音乐APP貌似还没有弧形进度条😄)。</p>\n</blockquote>\n<p>这里我用到了Vue的<strong>绑定内联样式</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直线进度条</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"play\"</span></span><br><span class=\"line\">        :style=<span class=\"string\">\"&#123;width: (now / duration).toFixed(3)*100 + '%'&#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/弧形进度条</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/因为用到了弧形，所以我这里用到了`border-radius`来使它变成一个大圆，然后平移`translateX`居中，其它不要的部分`overflow: hidden`。</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/这里用两个div来表示进度条，一条固定的进度条，一条慢慢增加。</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div class=\"process\" @click=\"showToast\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div class=\"line\"&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"pro\"</span> :style=<span class=\"string\">\"&#123;transform: `translateX($&#123;translateX&#125;) rotate($&#123;deg*1 + 56.5*((now / size).toFixed(3))&#125;deg)`&#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4、本地存储\"><a href=\"#4、本地存储\" class=\"headerlink\" title=\"4、本地存储\"></a>4、本地存储</h4><blockquote>\n<p>将一些数据缓存到localStorage，可以减少Http请求，从而优化页面加载时间。</p>\n</blockquote>\n<p>在这个项目中首页歌曲列表以及搜索历史用到了本地缓存，拿搜索历史来举栗：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!localStorage.searchHistory) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> searchHistory = [<span class=\"string\">'前端'</span>, <span class=\"string\">'童话镇'</span>, <span class=\"string\">'刚好遇见你'</span>]</span><br><span class=\"line\">        localStorage.searchHistory = <span class=\"built_in\">JSON</span>.stringify(searchHistory)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    _search(keywords) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断搜索列表中是否已存在</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> searchHistory = <span class=\"built_in\">JSON</span>.parse(localStorage.searchHistory)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> find = searchHistory.findIndex(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val === keywords</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        find === <span class=\"number\">-1</span> ? localStorage.searchHistory = <span class=\"built_in\">JSON</span>.stringify([keywords, ...searchHistory]) : <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5、图片懒加载\"><a href=\"#5、图片懒加载\" class=\"headerlink\" title=\"5、图片懒加载\"></a>5、图片懒加载</h4><p>使用了<a href=\"https://github.com/hilongjw/vue-lazyload?from=gold\" target=\"_blank\" rel=\"noopener\">vue-lazyload</a>插件<br>用法👉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install vue-lazyload</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueLazyLoad <span class=\"keyword\">from</span> <span class=\"string\">'vue-lazyload'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> def_lazy_img <span class=\"keyword\">from</span> <span class=\"string\">'../static/img/loading.gif'</span> <span class=\"comment\">//懒加载的默认图片</span></span><br><span class=\"line\">Vue.use(VueLazyLoad,&#123;</span><br><span class=\"line\">    loading: def_lazy_img</span><br><span class=\"line\">&#125;) <span class=\"comment\">//使用懒加载组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在使用img标签的地方使用</span></span><br><span class=\"line\">&lt;img v-lazy=<span class=\"string\">\"item.al.picUrl\"</span> alt=<span class=\"string\">\"\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、歌词滚动与高亮\"><a href=\"#6、歌词滚动与高亮\" class=\"headerlink\" title=\"6、歌词滚动与高亮\"></a>6、歌词滚动与高亮</h4><p>因为api提供的歌词包括时间，如：<code>[03:57.280]原谅我这一生不羁放纵爱自由</code><br>所以首先要进行字符串切割：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"lyric\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"roll-lyric\"</span> v-html=<span class=\"string\">\"lyrics\"</span> ref=<span class=\"string\">\"lyric\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    lyrics() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        let lyrics = ''</span></span><br><span class=\"line\"><span class=\"regexp\">        this.lyricArr = []</span></span><br><span class=\"line\"><span class=\"regexp\">        if (this.lyric) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            let arr = this.lyric.split('\\n')</span></span><br><span class=\"line\"><span class=\"regexp\">            for (let item of arr) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                if (item) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    let arr2 = item.split(']')</span></span><br><span class=\"line\"><span class=\"regexp\">                    this.lyricArr.push(arr2[0].substring(1,3)*60+arr2[0].substring(4)*1)</span></span><br><span class=\"line\"><span class=\"regexp\">                    if (arr2) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                        lyrics += `&lt;p class='lyrichook' style='margin: 10px 0'&gt;$&#123;arr2[1]&#125;&lt;/</span>p&gt;<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"string\">            lyrics = '暂无歌词~'</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        return lyrics</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后在播放的监听事件中与播放的当前做对比：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$refs.myAudio.addEventListener(<span class=\"string\">'play'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pDOM = [...document.querySelectorAll(<span class=\"string\">'.lyrichook'</span>)]</span><br><span class=\"line\">    timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.now = audioDOM.currentTime</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lyricArr.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(item) == <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.now)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.pDOM.forEach(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    p.style.color = <span class=\"string\">'rgba(255,255,255,.8)'</span> <span class=\"comment\">//其它歌词清除高亮</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.pDOM[index].style.color = <span class=\"string\">'#f12c61'</span> <span class=\"comment\">//歌词高亮</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$refs.lyric.style.transform = <span class=\"string\">`translateY(-<span class=\"subst\">$&#123;(index<span class=\"number\">-2</span>)*<span class=\"number\">25</span>&#125;</span>px)`</span> <span class=\"comment\">//歌词滚动</span></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>到这就ok了😜</p>\n<h4 id=\"7、vuex状态管理\"><a href=\"#7、vuex状态管理\" class=\"headerlink\" title=\"7、vuex状态管理\"></a>7、vuex状态管理</h4><p>推荐官方调试工具 <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">devtools extension</a></p>\n<blockquote>\n<p>想进一步理解vuex，可以看这篇博客<a href=\"https://hzzly.github.io/2017/04/04/vuex%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">vuex学习实践笔记</a></p>\n</blockquote>\n<p>之前看到好多人写的vuex，把整个项目的数据放到了一个state里，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。</p>\n<blockquote>\n<p>所以我建议(个人见解，轻喷)：将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters。这样方便管理与后期的维护。</p>\n</blockquote>\n<p>车已到站✌️。</p>\n<p>不知不觉写了这么多，老铁们凑合这看吧😁，觉得还行的可以点个star，<strong>你的star是我继续开源创作的动力</strong>，谢谢！！！</p>\n<p><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/MagicMusic\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/MagicMusic</a><br>欢迎大家的star啦~</p>\n","categories":[],"tags":["随笔","vue","vuex"]},{"title":"本地存储sessionStorage与localStorage","url":"http://yoursite.com/2017/04/26/本地存储sessionStorage与localStorage/","content":"<blockquote>\n<ul>\n<li>sessionStorage 数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时， 之前的存储已经被清除。</li>\n<li>localStorage 是一个持久化的存储，它并不局限于会话。除非主动删除数据，否则数据是永远不会过期的。</li>\n</ul>\n</blockquote>\n<h3 id=\"一、localStorage和sessionStorage操作\"><a href=\"#一、localStorage和sessionStorage操作\" class=\"headerlink\" title=\"一、localStorage和sessionStorage操作\"></a>一、localStorage和sessionStorage操作</h3><blockquote>\n<p>localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等</p>\n</blockquote>\n<h3 id=\"1-setItem存储value\"><a href=\"#1-setItem存储value\" class=\"headerlink\" title=\"1.setItem存储value\"></a>1.setItem存储value</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.setItem(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"hzzly\"</span>);</span><br><span class=\"line\">localStorage.setItem(<span class=\"string\">\"blog\"</span>, <span class=\"string\">\"hzzly.github.io\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-getItem获取value\"><a href=\"#2-getItem获取value\" class=\"headerlink\" title=\"2.getItem获取value\"></a>2.getItem获取value</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = sessionStorage.getItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> blog = localStorage.getItem(<span class=\"string\">\"blog\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-removeItem删除key\"><a href=\"#3-removeItem删除key\" class=\"headerlink\" title=\"3.removeItem删除key\"></a>3.removeItem删除key</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"blog\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-clear清除所有的key-value\"><a href=\"#4-clear清除所有的key-value\" class=\"headerlink\" title=\"4.clear清除所有的key/value\"></a>4.clear清除所有的key/value</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.clear();</span><br><span class=\"line\">localStorage.clear();</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-其他操作方法：点操作和\"><a href=\"#5-其他操作方法：点操作和\" class=\"headerlink\" title=\"5.其他操作方法：点操作和[]\"></a>5.其他操作方法：点操作和[]</h3><blockquote>\n<p>web Storage不但可以用自身的setItem,getItem等方便存取，也可以像普通对象一样用点(.)操作符，及[]的方式进行数据存储及读取，像如下的代码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存</span></span><br><span class=\"line\">localStorage.name = <span class=\"string\">\"hzzly\"</span>; </span><br><span class=\"line\">localStorage[<span class=\"string\">\"age\"</span>] = <span class=\"string\">\"21\"</span>; </span><br><span class=\"line\">sessionStorage.name = <span class=\"string\">\"hzzly\"</span>; </span><br><span class=\"line\">sessionStorage[<span class=\"string\">\"age\"</span>] = <span class=\"string\">\"21\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//取</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name1 = localStorage.name</span><br><span class=\"line\"><span class=\"keyword\">let</span> age1 = localStorage[<span class=\"string\">\"age\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> name2 = sessionStorage.name</span><br><span class=\"line\"><span class=\"keyword\">let</span> age2 = sessionStorage[<span class=\"string\">\"age\"</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-localStorage和sessionStorage的key和length属性实现遍历\"><a href=\"#6-localStorage和sessionStorage的key和length属性实现遍历\" class=\"headerlink\" title=\"6.localStorage和sessionStorage的key和length属性实现遍历\"></a>6.localStorage和sessionStorage的key和length属性实现遍历</h3><blockquote>\n<p>sessionStorage和localStorage提供的key()和length可以方便的实现存储的数据遍历，例如下面的代码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> storage = <span class=\"built_in\">window</span>.localStorage; </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len = storage.length; i  &lt;  len; i++)&#123;     </span><br><span class=\"line\">\t<span class=\"keyword\">let</span> key = storage.key(i);     </span><br><span class=\"line\">\t<span class=\"keyword\">let</span> value = storage.getItem(key);     </span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">\"=\"</span> + value); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、实例\"><a href=\"#二、实例\" class=\"headerlink\" title=\"二、实例\"></a>二、实例</h3><blockquote>\n<p>storage只能存储字符串的数据，对于JS中常用的数组或对象却不能直接存储，可以用下面两个方法进行转换：</p>\n<ul>\n<li>JSON.stringify() 用于从一个对象解析出字符串</li>\n<li>JSON.parse() 用于从一个字符串中解析出json对象</li>\n</ul>\n</blockquote>\n<h3 id=\"1-localStorage-sessionStorage存取数组\"><a href=\"#1-localStorage-sessionStorage存取数组\" class=\"headerlink\" title=\"1.localStorage/sessionStorage存取数组\"></a>1.localStorage/sessionStorage存取数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> language = [<span class=\"string\">'HTML/HTML5'</span>, <span class=\"string\">'CSS/CSS3'</span>, <span class=\"string\">'JavaScript'</span>, <span class=\"string\">'Vue'</span>, <span class=\"string\">'React'</span>]</span><br><span class=\"line\">localStorage.language = <span class=\"built_in\">JSON</span>.stringify(language)</span><br><span class=\"line\">sessionStorag.language = <span class=\"built_in\">JSON</span>.stringify(language)</span><br><span class=\"line\"><span class=\"comment\">//取</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> storageLanguage = <span class=\"built_in\">JSON</span>.parse(localStorage.language)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-localStorage存取对象\"><a href=\"#2-localStorage存取对象\" class=\"headerlink\" title=\"2.localStorage存取对象\"></a>2.localStorage存取对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myInfo = &#123;</span><br><span class=\"line\">\t<span class=\"string\">'name'</span>: <span class=\"string\">'hzzly'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'age'</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">\t<span class=\"string\">'school'</span>: <span class=\"string\">'ECUT'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'city'</span>: <span class=\"string\">'NanChang'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">localStorage.myInfo = <span class=\"built_in\">JSON</span>.stringify(myInfo)</span><br><span class=\"line\">sessionStorag.myInfo = <span class=\"built_in\">JSON</span>.stringify(myInfo)</span><br><span class=\"line\"><span class=\"comment\">//取</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> storageLanguage = <span class=\"built_in\">JSON</span>.parse(localStorage.myInfo)</span><br></pre></td></tr></table></figure>","categories":[],"tags":["随笔"]},{"title":"读书笔记-es6字符串的扩展","url":"http://yoursite.com/2017/04/22/读书笔记-es6字符串的扩展/","content":"<h2 id=\"字符串的扩展\"><a href=\"#字符串的扩展\" class=\"headerlink\" title=\"字符串的扩展\"></a><strong>字符串的扩展</strong></h2><h3 id=\"一、字符串的遍历器接口\"><a href=\"#一、字符串的遍历器接口\" class=\"headerlink\" title=\"一、字符串的遍历器接口\"></a>一、字符串的遍历器接口</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> codePoint <span class=\"keyword\">of</span> <span class=\"string\">'foo'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(codePoint)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"f\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、at\"><a href=\"#二、at\" class=\"headerlink\" title=\"二、at\"></a>二、at</h3><p>返回字符串给定位置的字符<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.charAt(<span class=\"number\">0</span>) <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.at(<span class=\"number\">0</span>) <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、indexOf-includes-startsWith-endsWith\"><a href=\"#三、indexOf-includes-startsWith-endsWith\" class=\"headerlink\" title=\"三、indexOf(), includes(), startsWith(), endsWith()\"></a>三、indexOf(), includes(), startsWith(), endsWith()</h3><blockquote>\n<ul>\n<li>indexOf() 确定一个字符串是否包含在另一个字符串中(es5)</li>\n<li>includes() 返回布尔值，表示是否找到了参数字符串。</li>\n<li>startsWith() 返回布尔值，表示参数字符串是否在源字符串的头部。</li>\n<li>endsWith()返回布尔值，表示参数字符串是否在源字符串的尾部。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>支持第二个参数，表示开始搜索的位置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p>\n</blockquote>\n<h3 id=\"四、repeat\"><a href=\"#四、repeat\" class=\"headerlink\" title=\"四、repeat()\"></a>四、repeat()</h3><blockquote>\n<p>返回一个新字符串，表示将原字符串重复n次。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></span><br><span class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"五、padStart-，padEnd\"><a href=\"#五、padStart-，padEnd\" class=\"headerlink\" title=\"五、padStart()，padEnd()\"></a>五、padStart()，padEnd()</h3><blockquote>\n<p>字符串补全长度</p>\n<ul>\n<li>padStart() 头部补全</li>\n<li>padEnd() 尾部补全<br>第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。如果省略第二个参数，默认使用空格补全长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'ababx'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'abax'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xabab'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xaba'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、模板字符串\"><a href=\"#六、模板字符串\" class=\"headerlink\" title=\"六、模板字符串\"></a>六、模板字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"hzzly\"</span>, time = <span class=\"string\">\"today\"</span>;</span><br><span class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>, how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></figure>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/learn-es6</a></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6变量的解构赋值","url":"http://yoursite.com/2017/04/21/读书笔记-es6变量的解构赋值/","content":"<h2 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a><strong>变量的解构赋值</strong></h2><blockquote>\n<p>这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n</blockquote>\n<h3 id=\"一、数组的解构赋值\"><a href=\"#一、数组的解构赋值\" class=\"headerlink\" title=\"一、数组的解构赋值\"></a>一、数组的解构赋值</h3><p>数组的元素是按次序排列的，变量的取值由它的位置决定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">c <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>默认值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"栗子：\"><a href=\"#栗子：\" class=\"headerlink\" title=\"栗子：\"></a>栗子：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、对象的解构赋值\"><a href=\"#二、对象的解构赋值\" class=\"headerlink\" title=\"二、对象的解构赋值\"></a>二、对象的解构赋值</h3><p>对象的属性没有次序，变量必须与属性同名，才能取到正确的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>默认值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"栗子：-1\"><a href=\"#栗子：-1\" class=\"headerlink\" title=\"栗子：\"></a>栗子：</h4><blockquote>\n<ul>\n<li>将现有对象的方法，赋值到某个变量。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span>    </span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>提取json数据</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、字符串的解构赋值\"><a href=\"#三、字符串的解构赋值\" class=\"headerlink\" title=\"三、字符串的解构赋值\"></a>三、字符串的解构赋值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hzzly'</span></span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"z\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"z\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"y\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"四、函数参数的解构赋值\"><a href=\"#四、函数参数的解构赋值\" class=\"headerlink\" title=\"四、函数参数的解构赋值\"></a>四、函数参数的解构赋值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/learn-es6</a></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"读书笔记-es6let与const","url":"http://yoursite.com/2017/04/09/读书笔记-es6let与const/","content":"<h2 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a><strong>let和const</strong></h2><blockquote>\n<p>两种新的声明变量的方法</p>\n</blockquote>\n<h3 id=\"一、let\"><a href=\"#一、let\" class=\"headerlink\" title=\"一、let\"></a>一、let</h3><p>用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>\n<blockquote>\n<ul>\n<li>1.块级作用域</li>\n<li>2.不存在变量提升</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var 的情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// let 的情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>3.暂时性死区</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p>\n<blockquote>\n<ul>\n<li>4.不允许重复声明</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、const\"><a href=\"#二、const\" class=\"headerlink\" title=\"二、const\"></a>二、const</h3><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const一旦声明变量，就必须立即初始化，不能留到以后赋值。<br>只在声明所在的块级作用域内有效。</p>\n<blockquote>\n<p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br><span class=\"line\">foo.prop <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></span><br><span class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p>\n</blockquote>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/learn-es6</a></p>\n<p>文章来源<a href=\"https://hzzly.github.io/\" target=\"_blank\" rel=\"noopener\">hzzly博客技术分享</a></p>\n","categories":[],"tags":["随笔","JavaScript","es6"]},{"title":"vuex学习实践笔记","url":"http://yoursite.com/2017/04/04/vuex学习实践笔记/","content":"<h3 id=\"Vuex是什么？\"><a href=\"#Vuex是什么？\" class=\"headerlink\" title=\"Vuex是什么？\"></a><strong>Vuex是什么？</strong></h3><blockquote>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n</blockquote>\n<p>栗如(travel store)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> types <span class=\"keyword\">from</span> <span class=\"string\">'../types'</span></span><br><span class=\"line\"><span class=\"comment\">//数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    travelsList: [],</span><br><span class=\"line\">    searchKey: &#123;</span><br><span class=\"line\">        page: <span class=\"number\">0</span>,</span><br><span class=\"line\">        limit: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    scroll: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//用户行为(可以处理异步),触发 mutations 来改变 state</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取约跑步列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    getTravelsList(&#123; commit &#125;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state.scroll) &#123;</span><br><span class=\"line\">            commit(types.GET_TRAVELS_PAGE_NUM)</span><br><span class=\"line\">            commit(types.COM_LOADING_STATUS, <span class=\"literal\">true</span>),</span><br><span class=\"line\">            commit(types.GET_TRAVELS_SCORLL_STATUS, <span class=\"literal\">false</span>)</span><br><span class=\"line\">            api.TravelsList()</span><br><span class=\"line\">                .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">                    commit(types.COM_LOADING_STATUS, <span class=\"literal\">false</span>),</span><br><span class=\"line\">                    commit(types.GET_TRAVELS_SCORLL_STATUS, <span class=\"literal\">true</span>)</span><br><span class=\"line\">                    commit(types.GET_TRAVELS_LIST, res)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 参加</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    joinTravel(&#123; commit &#125;, id) &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以过滤 state 中的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">    travelsList: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.travelsList,</span><br><span class=\"line\">    travelListIndex: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.travelsList.slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//唯一能改变 state 的方法(纯函数)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    [types.GET_TRAVELS_LIST](state, res) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state.searchKey.page &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            state.travelsList = res.data</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            state.travelsList = state.travelsList.concat(res.data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [types.GET_TRAVELS_SEARCH_KEY](state, params) &#123;</span><br><span class=\"line\">        state.searchKey = params</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [types.GET_TRAVELS_PAGE_NUM](state) &#123;</span><br><span class=\"line\">        state.searchKey[<span class=\"string\">'page'</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [types.GET_TRAVELS_SCORLL_STATUS](state, status) &#123;</span><br><span class=\"line\">        state.scroll = status</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//导出一个 travel store 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    state,</span><br><span class=\"line\">    actions,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">    mutations</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每一个 Vuex 应用的核心就是 store（仓库）。”store” 基本上就是一个容器，它包含着你的应用中大部分的状态(state)数据。</p>\n<blockquote>\n<ul>\n<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>\n<li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交(commit) mutations。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>\n</ul>\n</blockquote>\n<p>用一张图来理解一下<br><img src=\"http://omt3u4bph.bkt.clouddn.com/vuex2.jpg\" alt=\"vuex\"></p>\n<blockquote>\n<p>客户端(Client) -&gt; action -&gt; mutations -&gt; state -&gt; 客户端</p>\n</blockquote>\n<p>可以看出在vuex中数据是单一流向的：视图(view)触发action，action提交(commit)到mutations，mutations改变state(数据)，state的改变，相应的组件也会相应的更新。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-State\"><a href=\"#1-State\" class=\"headerlink\" title=\"1.State\"></a><strong>1.State</strong></h3><blockquote>\n<p>单一状态树，唯一数据源，能够直接清晰的读懂数据的结构。</p>\n</blockquote>\n<h4 id=\"1-1在-Vue-组件中获得数据\"><a href=\"#1-1在-Vue-组件中获得数据\" class=\"headerlink\" title=\"1.1在 Vue 组件中获得数据\"></a>1.1在 Vue 组件中获得数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    travelsList: [],</span><br><span class=\"line\">    searchKey: &#123;</span><br><span class=\"line\">        page: <span class=\"number\">0</span>,</span><br><span class=\"line\">        limit: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    scroll: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在view中直接获取</span></span><br><span class=\"line\">data () &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    \tscroll: <span class=\"keyword\">this</span>.$store.state.scroll</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2mapState-辅助函数\"><a href=\"#1-2mapState-辅助函数\" class=\"headerlink\" title=\"1.2mapState 辅助函数\"></a>1.2mapState 辅助函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">\t<span class=\"comment\">// 映射 this.scroll 为 this.$store.state.scroll</span></span><br><span class=\"line\">\t<span class=\"string\">'scroll'</span></span><br><span class=\"line\">])</span><br><span class=\"line\"><span class=\"comment\">//或对象展开运算符</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">\t...mapState(&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'scroll'</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Getters\"><a href=\"#2-Getters\" class=\"headerlink\" title=\"2.Getters\"></a><strong>2.Getters</strong></h3><blockquote>\n<p>对state数据进行过滤或直接返回</p>\n</blockquote>\n<h4 id=\"2-1在-Vue-组件中获得Getters数据\"><a href=\"#2-1在-Vue-组件中获得Getters数据\" class=\"headerlink\" title=\"2.1在 Vue 组件中获得Getters数据\"></a>2.1在 Vue 组件中获得Getters数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//store</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">    travelsList: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.travelsList,</span><br><span class=\"line\">    travelListIndex: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.travelsList.slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在view中直接获取</span></span><br><span class=\"line\">data () &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        travelListIndex: <span class=\"keyword\">this</span>.$store.getters.travelListIndex</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2mapGetters-辅助函数\"><a href=\"#2-2mapGetters-辅助函数\" class=\"headerlink\" title=\"2.2mapGetters 辅助函数\"></a>2.2mapGetters 辅助函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapGetters([</span><br><span class=\"line\">    <span class=\"comment\">// 映射 this.travelListIndex 为 this.$store.state.travelListIndex</span></span><br><span class=\"line\">    <span class=\"string\">'travelListIndex'</span></span><br><span class=\"line\">])</span><br><span class=\"line\"><span class=\"comment\">//或对象展开运算符</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    ...mapGetters(&#123;</span><br><span class=\"line\">        <span class=\"string\">'travelListIndex'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Mutations\"><a href=\"#3-Mutations\" class=\"headerlink\" title=\"3.Mutations\"></a><strong>3.Mutations</strong></h3><blockquote>\n<p>要更改 Vuex 的 store 中的数据，唯一方法是提交 mutation。每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行数据更改的地方。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用常量替代 Mutation 事件类型</span></span><br><span class=\"line\">    [types.GET_TRAVELS_LIST](state, res) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state.searchKey.page &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            state.travelsList = res.data</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            state.travelsList = state.travelsList.concat(res.data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当我们在这改变数据时，其它引用此state数据的 Vue 组件也会自动得到更新。</p>\n</blockquote>\n<h3 id=\"4-Actions\"><a href=\"#4-Actions\" class=\"headerlink\" title=\"4.Actions\"></a><strong>4.Actions</strong></h3><blockquote>\n<p>用户的一些行为，来提交到mutations改变数据。可在这进行异步操作。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//es6的参数解构</span></span><br><span class=\"line\">    getTravelsList(&#123; commit &#125;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state.scroll) &#123;</span><br><span class=\"line\">            commit(types.GET_TRAVELS_PAGE_NUM)</span><br><span class=\"line\">            commit(types.COM_LOADING_STATUS, <span class=\"literal\">true</span>),</span><br><span class=\"line\">            commit(types.GET_TRAVELS_SCORLL_STATUS, <span class=\"literal\">false</span>)</span><br><span class=\"line\">            api.TravelsList()</span><br><span class=\"line\">                .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">                    commit(types.COM_LOADING_STATUS, <span class=\"literal\">false</span>),</span><br><span class=\"line\">                    commit(types.GET_TRAVELS_SCORLL_STATUS, <span class=\"literal\">true</span>)</span><br><span class=\"line\">                    commit(types.GET_TRAVELS_LIST, res)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    joinTravel(&#123; commit &#125;, id) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-1分发-Action\"><a href=\"#4-1分发-Action\" class=\"headerlink\" title=\"4.1分发 Action\"></a>4.1分发 Action</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.travelListIndex.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'getTravelsList'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2mapActions-辅助函数\"><a href=\"#4-2mapActions-辅助函数\" class=\"headerlink\" title=\"4.2mapActions 辅助函数\"></a>4.2mapActions 辅助函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'getTravelsList'</span> <span class=\"comment\">// 映射 this.getTravelsList() 为 this.$store.dispatch('getTravelsList')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-Modules\"><a href=\"#5-Modules\" class=\"headerlink\" title=\"5.Modules\"></a><strong>5.Modules</strong></h3><blockquote>\n<p>当应用变得很大时，store 对象会变得臃肿不堪。为了解决这个问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-项目实践\"><a href=\"#6-项目实践\" class=\"headerlink\" title=\"6.项目实践\"></a><strong>6.项目实践</strong></h3><blockquote>\n<ul>\n<li><a href=\"https://hzzly.github.io/2017/03/08/%E8%BF%9B%E9%98%B6vue%E5%85%A8%E5%AE%B6%E6%A1%B6/\" target=\"_blank\" rel=\"noopener\">进阶vue全家桶</a></li>\n<li><a href=\"https://hzzly.github.io/2017/04/27/%E2%80%99DIY%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/\" target=\"_blank\" rel=\"noopener\">DIY一个自己的音乐播放器</a></li>\n</ul>\n</blockquote>\n","categories":[],"tags":["随笔","vuex"]},{"title":"读书笔记-es5Array对象","url":"http://yoursite.com/2017/03/30/读书笔记-es5Array对象/","content":"<h3 id=\"1-创建-Array-对象的语法：\"><a href=\"#1-创建-Array-对象的语法：\" class=\"headerlink\" title=\"1.创建 Array 对象的语法：\"></a>1.创建 Array 对象的语法：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(element0, element1, ..., elementn)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2.属性\"></a>2.属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>constructor</td>\n<td style=\"text-align:right\">返回对创建此对象的数组函数的引用</td>\n</tr>\n<tr>\n<td>length</td>\n<td style=\"text-align:right\">设置或返回数组中元素的数目</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td style=\"text-align:right\">允许向对象添加属性和方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3.常用方法\"></a>3.常用方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>concat()</td>\n<td style=\"text-align:right\">连接两个或更多的数组，并返回结果</td>\n</tr>\n<tr>\n<td>join()</td>\n<td style=\"text-align:right\">把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td style=\"text-align:right\">删除并返回数组的最后一个元素</td>\n</tr>\n<tr>\n<td>push()</td>\n<td style=\"text-align:right\">向数组的末尾添加一个或更多元素，并返回新的长度</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td style=\"text-align:right\">颠倒数组中元素的顺序</td>\n</tr>\n<tr>\n<td>shift()</td>\n<td style=\"text-align:right\">删除并返回数组的第一个元素，会修改原数组</td>\n</tr>\n<tr>\n<td>unshift()</td>\n<td style=\"text-align:right\">向数组的开头添加一个或更多元素，并返回新的长度</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td style=\"text-align:right\">从某个已有的数组返回选定的元素，不修改原数组</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td style=\"text-align:right\">对数组的元素进行排序</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td style=\"text-align:right\">删除元素，并向数组添加新元素，返回删除的元素，会修改原数组</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td style=\"text-align:right\">返回某个字符串对象的原始值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-循环\"><a href=\"#4-循环\" class=\"headerlink\" title=\"4.循环\"></a>4.循环</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>entries()</td>\n<td style=\"text-align:right\">返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)</td>\n</tr>\n<tr>\n<td>every()</td>\n<td style=\"text-align:right\">使用指定函数检测数组中的所有元素是否都符合指定条件（通过函数提供）。如果数组中检测到有一个元素不满足，则返回 false ，且剩余的元素不会再进行检测，如果所有元素都满足条件，则返回 true，不会改变原始数组</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td style=\"text-align:right\">检查指定数组中符合条件的所有元素，并返回符合条件所有元素的数组(新数组)，不会改变原始数组</td>\n</tr>\n<tr>\n<td>find()</td>\n<td style=\"text-align:right\">返回通过测试（函数内判断）的数组的第一个元素的值。当数组中的元素在测试条件时返回 true 时，返回符合条件的元素，之后的值不会再调用执行函数，如果没有符合条件的元素返回 undefined ，不会改变原始数组</td>\n</tr>\n<tr>\n<td>findIndex()</td>\n<td style=\"text-align:right\">返回传入一个测试条件（函数）符合条件的数组第一个元素位置。当数组中的元素在测试条件时返回 true 时，返回符合条件的元素的索引位置，之后的值不会再调用执行函数，如果没有符合条件的元素返回 -1 ，不会改变原始数组</td>\n</tr>\n<tr>\n<td>forEach()</td>\n<td style=\"text-align:right\">对数组的每个元素执行一次提供的函数，但总是返回undefined</td>\n</tr>\n<tr>\n<td>map()</td>\n<td style=\"text-align:right\">数组中的每个元素都调用一次提供的函数后返回处理过的结果。返回值是一个新的数组，不会改变原始数组</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-栗子\"><a href=\"#4-栗子\" class=\"headerlink\" title=\"4.栗子\"></a>4.栗子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//concat()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.concat(<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">//[1,2,3,4,5]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//join()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.join() <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//shift()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">a.shift() <span class=\"comment\">//1</span></span><br><span class=\"line\">a <span class=\"comment\">//[2,3,4]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//unshift()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">a.unshift(<span class=\"number\">6</span>) <span class=\"comment\">//5</span></span><br><span class=\"line\">a <span class=\"comment\">//[6,1,2,3,4]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//slice()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.slice(<span class=\"number\">1</span>) <span class=\"comment\">//[2,3]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//[2]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//splice()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">a.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>) <span class=\"comment\">//[2]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">a.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">'hzzly'</span>) <span class=\"comment\">//[2]</span></span><br><span class=\"line\">a <span class=\"comment\">//[1, \"hzzly\", 3, 4, 5]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//entries()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = [<span class=\"string\">\"Banana\"</span>, <span class=\"string\">\"Orange\"</span>, <span class=\"string\">\"Apple\"</span>, <span class=\"string\">\"Mango\"</span>]</span><br><span class=\"line\">fruits.entries()</span><br><span class=\"line\"><span class=\"comment\">//[0, \"Banana\"]</span></span><br><span class=\"line\"><span class=\"comment\">//[1, \"Orange\"]</span></span><br><span class=\"line\"><span class=\"comment\">//[2, \"Apple\"]</span></span><br><span class=\"line\"><span class=\"comment\">//[3, \"Mango\"]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//every()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\">ages.every(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> val &gt;= <span class=\"number\">18</span>)  <span class=\"comment\">//false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//filter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\">ages.filter(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> val &gt;= <span class=\"number\">18</span>) <span class=\"comment\">//[32, 33, 40]</span></span><br><span class=\"line\">ages.filter(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> val &gt;= <span class=\"number\">18</span>).length  <span class=\"comment\">//3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//find()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\">ages.find(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> val &gt;= <span class=\"number\">18</span>)  <span class=\"comment\">//32</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//findIndex()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\">ages.findIndex(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> val &gt;= <span class=\"number\">18</span>) <span class=\"comment\">//0</span></span><br><span class=\"line\">ages.findIndex(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> val === <span class=\"number\">16</span>) <span class=\"comment\">//2</span></span><br><span class=\"line\">ages.findIndex(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> val &gt; <span class=\"number\">40</span>) <span class=\"comment\">//-1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//forEach()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = ages.forEach(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(val)  <span class=\"comment\">//可遍历到所有数组元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> val + <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//arr: 总是返回undefined</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ages = [<span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">16</span>, <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = ages.map(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(val)  <span class=\"comment\">//可遍历到所有数组元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> val + <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// arr: [42, 43, 26, 50]</span></span><br></pre></td></tr></table></figure>","categories":[],"tags":["随笔","JavaScript","es5"]},{"title":"读书笔记-es5String对象","url":"http://yoursite.com/2017/03/29/读书笔记-es5String对象/","content":"<h3 id=\"1-创建-String-对象的语法：\"><a href=\"#1-创建-String-对象的语法：\" class=\"headerlink\" title=\"1.创建 String 对象的语法：\"></a>1.创建 String 对象的语法：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(s);</span><br><span class=\"line\"><span class=\"built_in\">String</span>(s);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2.属性\"></a>2.属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>constructor</td>\n<td style=\"text-align:right\">对创建该对象的函数的引用</td>\n</tr>\n<tr>\n<td>length</td>\n<td style=\"text-align:right\">字符串的长度</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td style=\"text-align:right\">允许向对象添加属性和方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3.常用方法\"></a>3.常用方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>charAt()</td>\n<td style=\"text-align:right\">返回在指定位置的字符</td>\n</tr>\n<tr>\n<td>concat()</td>\n<td style=\"text-align:right\">连接字符串</td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td style=\"text-align:right\">检索字符串</td>\n</tr>\n<tr>\n<td>lastIndexOf()</td>\n<td style=\"text-align:right\">从后向前搜索字符串</td>\n</tr>\n<tr>\n<td>match()</td>\n<td style=\"text-align:right\">找到一个或多个正则表达式的匹配</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td style=\"text-align:right\">提取字符串的片断，并在新的字符串中返回被提取的部分</td>\n</tr>\n<tr>\n<td>split()</td>\n<td style=\"text-align:right\">把字符串分割为字符串数组</td>\n</tr>\n<tr>\n<td>toLowerCase()</td>\n<td style=\"text-align:right\">把字符串转换为小写</td>\n</tr>\n<tr>\n<td>toUpperCase()</td>\n<td style=\"text-align:right\">把字符串转换为大写</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td style=\"text-align:right\">返回字符串</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td style=\"text-align:right\">返回某个字符串对象的原始值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-栗子\"><a href=\"#4-栗子\" class=\"headerlink\" title=\"4.栗子\"></a>4.栗子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//charAt()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"Hello world!\"</span></span><br><span class=\"line\">str.charAt(<span class=\"number\">1</span>) <span class=\"comment\">//e</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//concat()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str1=<span class=\"string\">\"Hello \"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str2=<span class=\"string\">\"world!\"</span></span><br><span class=\"line\">str1.concat(str2) <span class=\"comment\">//Hello world!</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//indexOf()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"Hello world!\"</span></span><br><span class=\"line\">str.indexOf(<span class=\"string\">\"Hello\"</span>) <span class=\"comment\">//0</span></span><br><span class=\"line\">str.indexOf(<span class=\"string\">\"World\"</span>) <span class=\"comment\">//-1 (没有就返回-1)</span></span><br><span class=\"line\">str.indexOf(<span class=\"string\">\"world\"</span>) <span class=\"comment\">//6</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//slice()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"Hello happy world!\"</span></span><br><span class=\"line\">str.slice(<span class=\"number\">6</span>) <span class=\"comment\">//happy world!</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//split()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"How are you doing today?\"</span></span><br><span class=\"line\">str.split(<span class=\"string\">\" \"</span>) <span class=\"comment\">//[\"How\", \"are\", \"you\", \"doing\", \"today?\"]</span></span><br><span class=\"line\">str.split(<span class=\"string\">\"\"</span>) <span class=\"comment\">//[\"H\", \"o\", \"w\", \" \", \"a\", \"r\", \"e\", \" \", \"y\", \"o\", \"u\", \" \", \"d\", \"o\", \"i\", \"n\", \"g\", \" \", \"t\", \"o\", \"d\", \"a\", \"y\", \"?\"]</span></span><br><span class=\"line\">str.split(<span class=\"string\">\" \"</span>,<span class=\"number\">3</span>) <span class=\"comment\">//[\"How\", \"are\", \"you\"]</span></span><br></pre></td></tr></table></figure>","categories":[],"tags":["随笔","JavaScript","es5"]},{"title":"Express与MongoDB的缠绵","url":"http://yoursite.com/2017/03/25/Express与MongoDB的缠绵/","content":"<h3 id=\"前奏\"><a href=\"#前奏\" class=\"headerlink\" title=\"前奏\"></a><strong>前奏</strong></h3><p>Express 是什么？</p>\n<blockquote>\n<p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n</blockquote>\n<p>全局安装express<a href=\"http://www.expressjs.com.cn/starter/generator.html\" target=\"_blank\" rel=\"noopener\">脚手架</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express-generator -g</span><br></pre></td></tr></table></figure></p>\n<p>创建express项目<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express myapp</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> myapp</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ DEBUG=myapp npm start</span><br></pre></td></tr></table></figure></p>\n<p>MongoDB与Mongoose？</p>\n<blockquote>\n<ul>\n<li>MongoDB是一个对象数据库，是用来存储数据的；存储的数据格式为JSON。</li>\n<li>Mongoose是封装了MongoDB操作(增删改查等)的一个对象模型库,是用来操作这些数据的。</li>\n</ul>\n</blockquote>\n<p>安装MongoDB：<br><a href=\"https://www.mongodb.com/download-center?jmp=nav\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center?jmp=nav</a></p>\n<p>安装Mongoose：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install mongoose --save</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一、连接MongoDB\"><a href=\"#一、连接MongoDB\" class=\"headerlink\" title=\"一、连接MongoDB\"></a><strong>一、连接MongoDB</strong></h3><blockquote>\n<p>在项目根目录下新建/lib/mongo.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db = mongoose.connect(<span class=\"string\">'mongodb://localhost:27017/myblog'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = db</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>要连接的数据库为myblog</p>\n</blockquote>\n<h3 id=\"二、Schema\"><a href=\"#二、Schema\" class=\"headerlink\" title=\"二、Schema\"></a><strong>二、Schema</strong></h3><a id=\"more\"></a>\n<blockquote>\n<p>一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，不具备对数据库的操作能力，仅仅只是数据库模型在程序片段中的一种表现，可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架</p>\n</blockquote>\n<p><strong>新建一个用户Schema</strong></p>\n<blockquote>\n<p>在项目根目录下新建/models/users.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>);</span><br><span class=\"line\"><span class=\"comment\">//一个用户模型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\tusername    : &#123; <span class=\"attr\">type</span>:<span class=\"built_in\">String</span> &#125;,</span><br><span class=\"line\">\tpassword    : &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">\tavatar      : &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">\tage         : &#123; <span class=\"attr\">type</span>:<span class=\"built_in\">Number</span>, <span class=\"attr\">default</span>:<span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">\tdescription : &#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">\temail       : &#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;,</span><br><span class=\"line\">\tgithub      : &#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;,</span><br><span class=\"line\">\ttime        : &#123; <span class=\"attr\">type</span>:<span class=\"built_in\">Date</span>, <span class=\"attr\">default</span>:<span class=\"built_in\">Date</span>.now &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//创建Model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> UserModel = db.model(<span class=\"string\">\"user\"</span>, UserSchema );</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = UserModel</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>user：数据库中的集合名称,当我们对其添加数据时如果user已经存在，则会保存到其目录下，如果不存在，则会创建user集合，然后在保存数据。</li>\n<li>拥有了Model，我们也就拥有了操作数据库的金钥匙，就可以使用Model来进行增删改查的具体操作。</li>\n</ul>\n</blockquote>\n<p><strong>Entity</strong></p>\n<blockquote>\n<p>Entity–由Model创建的实体，使用save方法保存数据，Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性。所以此项目主要用的Model。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> UserEntity = <span class=\"keyword\">new</span> UserModel(&#123;</span><br><span class=\"line\">\tname : <span class=\"string\">\"hzzly\"</span>,</span><br><span class=\"line\">\tage  : <span class=\"number\">21</span>,</span><br><span class=\"line\">\temail: <span class=\"string\">\"hjingren@aliyun.com\"</span>,</span><br><span class=\"line\">\tgithub: <span class=\"string\">'https://github.com/hzzly'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">UserEntity.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error,doc</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"error :\"</span> + error);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(doc);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、封装数据库的CURD\"><a href=\"#三、封装数据库的CURD\" class=\"headerlink\" title=\"三、封装数据库的CURD\"></a><strong>三、封装数据库的CURD</strong></h3><blockquote>\n<ul>\n<li>在lib文件下新建api.js</li>\n<li>采用Promise封装对数据库的操作，避免回调地狱，使得代码能够更好的被读懂和维护。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> UserModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/users'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 添加数据</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param  &#123;[type]&#125; data 需要保存的数据对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tsave(data) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//model.create(保存的对象,callback)</span></span><br><span class=\"line\">\t\t\tUserModel.create(data, (error, doc) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t\t\t\treject(error)</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(doc)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tfind(data=&#123;&#125;, fields=<span class=\"literal\">null</span>, options=&#123;&#125;) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//model.find(需要查找的对象(如果为空，则查找到所有数据), 属性过滤对象[可选参数], options[可选参数], callback)</span></span><br><span class=\"line\">\t\t\tUserModel.find(data, fields, options, (error, doc) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t\t\t\treject(error)</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(doc)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tfindOne(data) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//model.findOne(需要查找的对象,callback)</span></span><br><span class=\"line\">\t\t\tUserModel.findOne(data, (error, doc) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t\t\t\treject(error)</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(doc)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tfindById(data) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//model.findById(需要查找的id对象 ,callback)</span></span><br><span class=\"line\">\t\t\tUserModel.findById(data, (error, doc) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t\t\t\treject(error)</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(doc)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tupdate(conditions, update) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//model.update(查询条件,更新对象,callback)</span></span><br><span class=\"line\">\t\t\tUserModel.update(conditions, update, (error, doc) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t\t\t\treject(error)</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(doc)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tremove(conditions) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//model.update(查询条件,callback)</span></span><br><span class=\"line\">\t\t\tUserModel.remove(conditions, (error, doc) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t\t\t\treject(error)</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(doc)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、使用\"><a href=\"#四、使用\" class=\"headerlink\" title=\"四、使用\"></a><strong>四、使用</strong></h3><blockquote>\n<p>在/routers/index.js中使用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> api = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/api'</span>);</span><br><span class=\"line\">router.post(<span class=\"string\">'/login'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">\t\tusername : req.body.username,</span><br><span class=\"line\">\t\tpassword: req.body.password</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tapi.findOne(user)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.post(<span class=\"string\">'/sign_up'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">\t\tusername : req.body.username,</span><br><span class=\"line\">\t\tpassword: req.body.password,</span><br><span class=\"line\">\t\temail: req.body.email</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tapi.save(user)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.get(<span class=\"string\">'/user_list'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//返回所有用户</span></span><br><span class=\"line\">\tapi.find(&#123;&#125;)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//返回只包含一个键值name、age的所有记录</span></span><br><span class=\"line\">\tapi.find(&#123;&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>, <span class=\"attr\">age</span>:<span class=\"number\">1</span>, <span class=\"attr\">_id</span>:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//返回所有age大于18的数据</span></span><br><span class=\"line\">\tapi.find(&#123;<span class=\"string\">\"age\"</span>:&#123;<span class=\"string\">\"$gt\"</span>:<span class=\"number\">18</span>&#125;&#125;)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//返回20条数据</span></span><br><span class=\"line\">\tapi.find(&#123;&#125;,<span class=\"literal\">null</span>,&#123;<span class=\"attr\">limit</span>:<span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//查询所有数据，并按照age降序顺序返回数据</span></span><br><span class=\"line\">\tapi.find(&#123;&#125;,<span class=\"literal\">null</span>,&#123;<span class=\"attr\">sort</span>:&#123;<span class=\"attr\">age</span>:<span class=\"number\">-1</span>&#125;&#125;) <span class=\"comment\">//1是升序，-1是降序</span></span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>项目Github地址：</strong> <a href=\"https://github.com/hzzly/express-mongodb\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/express-mongodb</a><br>如果对你有帮助，欢迎star</p>\n<p>文章来源<a href=\"https://hzzly.github.io/\" target=\"_blank\" rel=\"noopener\">hzzly博客技术分享</a></p>\n","categories":[],"tags":["随笔","node"]},{"title":"浅谈Promise","url":"http://yoursite.com/2017/03/25/浅谈Promise/","content":"<h1 id=\"说说promise\"><a href=\"#说说promise\" class=\"headerlink\" title=\"说说promise\"></a>说说promise</h1><blockquote>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n</blockquote>\n<p>所谓Promise，简单说就是一个容器(对象)，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p>接触过promise的的都知道它的应用场景和用途，Promise可以用来避免异步操作函数里的嵌套回调（callback hell）问题，因为解决异步最直接的方法是回调嵌套，将后一个的操作放在前一个操作的异步回调里，但如果操作多了，就会有很多层的嵌套(<strong>回调地狱</strong>)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(url1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data1</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">    $.ajax(url2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something...</span></span><br><span class=\"line\">        $.ajax(url3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data3</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do something...</span></span><br><span class=\"line\">            done(data3); <span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Promise学术点的描述：</p>\n<blockquote>\n<p>promise代表一个异步操作的执行返回状态，这个执行返回状态在promise对象创建时未必已知。它允许你为异步操作的成功或失败指定处理方法。</p>\n</blockquote>\n<p>这使得异步方法可以像同步方法那样返回值：异步方法会返回一个包含了原返回状态的 promise 对象来替代原返回状态。</p>\n<h1 id=\"Promise的表现\"><a href=\"#Promise的表现\" class=\"headerlink\" title=\"Promise的表现\"></a><strong>Promise的表现</strong></h1><p>如果使用回调方法处理多个操作的异步场景，判断某个操作成功或失败的控制在于声明的匿名函数里面，使用Promise对象则可以重新定义异步执行的状态和控制逻辑。</p>\n<p>promise的最重要的特点就是它把我们处理任何函数调用的成功或者失败的方式规范成了可预测的形式，特别是如果这个调用实际上的异步的。</p>\n<p>Promise中有几个状态：</p>\n<blockquote>\n<ul>\n<li>pending: 初始状态。 非 fulfilled 或 rejected。</li>\n<li>resolved: 成功的操作。也有的成为fulfilled 。</li>\n<li>rejected: 失败的操作。</li>\n</ul>\n</blockquote>\n<p>状态转换关系为：</p>\n<blockquote>\n<p>pending-&gt;resolved(fulfilled)，pending-&gt;rejected。</p>\n</blockquote>\n<p>Promise对象有以下两个特点:</p>\n<blockquote>\n<ul>\n<li>对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）</li>\n<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</li>\n</ul>\n</blockquote>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a><strong>用法</strong></h1><p>说了这么多，直接上代码。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do somthing, maybe async</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolve(res);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something... e.g</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;, err =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// deal the err.</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>或封装成方法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do somthing, maybe async</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success)&#123;</span><br><span class=\"line\">            resolve(res);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">fetch(data)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    &#125;, err =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// deal the err.</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"异步嵌套回调\"><a href=\"#异步嵌套回调\" class=\"headerlink\" title=\"异步嵌套回调\"></a><strong>异步嵌套回调</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadAsync1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'异步任务1'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'异步任务1传过来的值'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);          </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadAsync2</span>(<span class=\"params\">data1</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'异步任务2'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'异步任务2传过来的值'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);          </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadAsync3</span>(<span class=\"params\">data2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'异步任务3'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'异步任务3传过来的值'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);          </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadAsync1()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data1</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loadAsync2(data1)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data2</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loadAsync3(data2)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(okFn, failFn)</span><br></pre></td></tr></table></figure></p>\n<p>没有返回值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadAsync1()</span><br><span class=\"line\">    .then(data1 =&gt; &#123;</span><br><span class=\"line\">        loadAsync2(data1)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(data2 =&gt;&#123;</span><br><span class=\"line\">        loadAsync3(data2)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(res =&gt; console.log(res))</span><br></pre></td></tr></table></figure></p>\n<p>输出的值为：</p>\n<blockquote>\n<p>异步任务1<br>异步任务1传过来的值<br>异步任务2<br>异步任务2传过来的值<br>异步任务3<br>异步任务3传过来的值</p>\n</blockquote>\n<h1 id=\"promise-all方法\"><a href=\"#promise-all方法\" class=\"headerlink\" title=\"promise.all方法\"></a><strong>promise.all方法</strong></h1><blockquote>\n<p>Promise.all 可以接收一个元素为 Promise 对象的数组作为参数，当这个数组里面所有的 Promise 对象都变为 resolve 时，该方法才会返回。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">\"第一个promise\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">\"第二个promise\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2])</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [\"第一个promise\", \"第二个promise\"]</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，all接收一个数组作为参数，p1,p2是并行执行的，等两个都执行完了，才会进入到then，all会把所有的结果放到一个数组中返回，所以我们打印出我们的结果为一个数组。</p>\n<blockquote>\n<p>值得注意的是，虽然p2的执行顺序比p1快，但是all会按照参数里面的数组顺序来返回结果。all的使用场景类似于，玩游戏的时候，需要提前将游戏需要的资源提前准备好，才进行页面的初始化。</p>\n</blockquote>\n<h1 id=\"promise-race方法\"><a href=\"#promise-race方法\" class=\"headerlink\" title=\"promise.race方法\"></a><strong>promise.race方法</strong></h1><blockquote>\n<p>Promise.race 可以接收一个元素为 Promise 对象的数组作为参数，这个数组里面所有的 Promise 对象进行竞速，完成一个即可。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'异步任务1执行完成'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">\"第一个promise\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'异步任务2执行完成'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">\"第二个promise\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2])</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//异步任务2执行完成</span></span><br><span class=\"line\"><span class=\"comment\">//第二个promise</span></span><br><span class=\"line\"><span class=\"comment\">//异步任务1执行完成</span></span><br></pre></td></tr></table></figure>\n<p>在then里面的回调开始执行时，p1 并没有停止，仍旧在执行。于是再过2秒后，输出了他们结束的标志。</p>\n<p>这个race有什么用呢？使用场景还是很多的，比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/请求某个图片资源</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestImg</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(img);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = <span class=\"string\">'xxxxxx'</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时函数，用于给请求计时</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'图片请求超时'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">    .race([requestImg(), timeout()])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>requestImg函数会异步请求一张图片，我把地址写为”xxxxxx”，所以肯定是无法成功请求到的。timeout函数是一个延时5秒的异步操作。我们把这两个返回Promise对象的函数放进race，于是他俩就会赛跑，如果5秒之内图片请求成功了，那么遍进入then方法，执行正常的流程。如果5秒钟图片还未成功返回，那么timeout就跑赢了，则进入catch，报出“图片请求超时”的信息。</p>\n<h1 id=\"一道常见面试题\"><a href=\"#一道常见面试题\" class=\"headerlink\" title=\"一道常见面试题\"></a>一道常见面试题</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10000</span> ; i++ ) &#123;</span><br><span class=\"line\">        i == <span class=\"number\">9999</span> &amp;&amp; resolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">“<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">1</span>”</span><br></pre></td></tr></table></figure>\n<h1 id=\"情景\"><a href=\"#情景\" class=\"headerlink\" title=\"情景\"></a>情景</h1><p>传入一个token，根据这个token请求一次网络，然后获取用户ID，将获取的用户ID访问数据库，获取用户信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">token</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">            token ? resolve(<span class=\"number\">2</span>) : reject(<span class=\"string\">'token error'</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> find = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">            id ? resolve(id + <span class=\"string\">'-info'</span>) : reject(<span class=\"string\">'id error'</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">request(<span class=\"string\">'token'</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(id);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">info</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( info);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = <span class=\"keyword\">yield</span> request(<span class=\"string\">'token'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> info = <span class=\"keyword\">yield</span> find(id);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id, info);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = <span class=\"keyword\">await</span> request(<span class=\"string\">'token'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> info = <span class=\"keyword\">await</span> find(id);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id, info);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>之后会有express操作mongondb的基于Promise的封装，敬请期待！</p>\n","categories":[],"tags":["随笔","promise"]},{"title":"移动端touch事件","url":"http://yoursite.com/2017/03/22/移动端touch事件/","content":"<h3 id=\"4个touch事件\"><a href=\"#4个touch事件\" class=\"headerlink\" title=\"4个touch事件\"></a><strong>4个touch事件</strong></h3><p><strong>touchstart</strong> 事件：当手指触摸屏幕时候触发，即使已经有一个手指放在屏幕上也会触发。<br><strong>touchmove</strong> 事件：当手指在屏幕上滑动的时候连续地触发。调用preventDefault()事件可以阻止滚动。<br><strong>touchend</strong> 事件：当手指从屏幕上离开的时候触发。<br><strong>touchcancel</strong> 事件：触摸结束的时候触发</p>\n<h3 id=\"触摸事件：\"><a href=\"#触摸事件：\" class=\"headerlink\" title=\"触摸事件：\"></a><strong>触摸事件：</strong></h3><p><strong>touches：</strong>当前位于屏幕上的所有手指的列表。<br><strong>targetTouches：</strong>位于当前DOM元素上手指的列表。<br><strong>changedTouches：</strong>涉及当前事件手指的列表。</p>\n<h3 id=\"Touch对象属性\"><a href=\"#Touch对象属性\" class=\"headerlink\" title=\"Touch对象属性\"></a><strong>Touch对象属性</strong></h3><p>每个Touch对象包含的属性如下： </p>\n<blockquote>\n<p>clientX：触摸目标在视口中的x坐标。<br>clientY：触摸目标在视口中的y坐标。<br>identifier：标识触摸的唯一ID。<br>pageX：触摸目标在页面中的x坐标。<br>pageY：触摸目标在页面中的y坐标。<br>screenX：触摸目标在屏幕中的x坐标。<br>screenY：触摸目标在屏幕中的y坐标。<br>target：触摸的DOM节点目标。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>,touch,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchmove'</span>,touch,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchend'</span>,touch,<span class=\"literal\">false</span>);     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">touch</span> (<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> event = event || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oInp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"inp\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(event.type)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"touchstart\"</span>:</span><br><span class=\"line\">            oInp.innerHTML =<span class=\"string\">`Touch started ( <span class=\"subst\">$&#123;event.touches[<span class=\"number\">0</span>].clientX&#125;</span> , <span class=\"subst\">$&#123;event.touches[<span class=\"number\">0</span>].clientY&#125;</span> )`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"touchend\"</span>:</span><br><span class=\"line\">            oInp.innerHTML =<span class=\"string\">`&lt;br&gt;Touch end ( <span class=\"subst\">$&#123;event.changedTouches[<span class=\"number\">0</span>].clientX&#125;</span> , <span class=\"subst\">$&#123;event.changedTouches[<span class=\"number\">0</span>].clientY&#125;</span> )`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"touchmove\"</span>:</span><br><span class=\"line\">            event.preventDefault();</span><br><span class=\"line\">            oInp.innerHTML =<span class=\"string\">`&lt;br&gt;Touch moved ( <span class=\"subst\">$&#123;event.touches[<span class=\"number\">0</span>].clientX&#125;</span> , <span class=\"subst\">$&#123;event.touches[<span class=\"number\">0</span>].clientY&#125;</span> )`</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件-包括鼠标事件-发生的顺序如下：\"><a href=\"#事件-包括鼠标事件-发生的顺序如下：\" class=\"headerlink\" title=\"事件(包括鼠标事件)发生的顺序如下：\"></a><strong>事件(包括鼠标事件)发生的顺序如下：</strong></h3><p>(1) touchstart<br>(2) mouseover<br>(3) mousemove(一次)<br>(4) mousedown<br>(5) mouseup<br>(6) click<br>(7) touchend</p>\n","categories":[],"tags":["随笔","h5"]},{"title":"一个Vue+Canvas的酷炫后台管理","url":"http://yoursite.com/2017/03/21/一个Vue-Canvas的酷炫后台管理/","content":"<blockquote>\n<p>又一个Vue+Cnavas酷炫的后台管理，依然前后端分离（用PC打开，还没适配移动端）。</p>\n</blockquote>\n<p><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/canvas-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/canvas-vue</a><br><strong>demo地址：</strong> <a href=\"http://hjingren.cn/curriculum-design/\" target=\"_blank\" rel=\"noopener\">http://hjingren.cn/curriculum-design/</a><br>账号：hzzly  密码：123456<br>欢迎大家的star啦~</p>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a><strong>技术栈</strong></h3><p>前台:</p>\n<blockquote>\n<ul>\n<li>vue-cli</li>\n<li>vue</li>\n<li>vue-router</li>\n<li>webpack</li>\n<li>canvas</li>\n<li>ajax</li>\n</ul>\n</blockquote>\n<p>后台:</p>\n<blockquote>\n<ul>\n<li>wamp</li>\n<li>PHP(ThinkPHP)</li>\n<li>mysql</li>\n</ul>\n</blockquote>\n<h3 id=\"功能说明\"><a href=\"#功能说明\" class=\"headerlink\" title=\"功能说明\"></a><strong>功能说明</strong></h3><ul>\n<li>登录<ul>\n<li>用户登录</li>\n<li>管理员登录</li>\n</ul>\n</li>\n<li>注册<ul>\n<li>用户注册</li>\n</ul>\n</li>\n<li>Canvas<ul>\n<li>流星滑过</li>\n<li>星星闪闪</li>\n<li>后台折线</li>\n<li>折线跟着鼠标滑动</li>\n</ul>\n</li>\n<li>Vue<ul>\n<li>弹出框组件</li>\n<li>路由切换动画</li>\n<li>通过Ajax调用后台接口</li>\n</ul>\n</li>\n<li>留言板(时间轴)</li>\n<li>添加房屋信息</li>\n<li>出租 求租</li>\n<li>出售 求购</li>\n<li>个人信息修改</li>\n<li>密码修改</li>\n<li>……</li>\n</ul>\n<blockquote>\n<p>1.登录注册模块</p>\n</blockquote>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/canvas-login.gif\" alt=\"canvas-login\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>2.后台管理页面</p>\n</blockquote>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/admin.gif\" alt=\"admin\"></p>\n<blockquote>\n<p>3.留言板(时间轴特效)</p>\n</blockquote>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/msgboard.gif\" alt=\"msgboard\"></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a><strong>目录结构</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——canvas-vue/</span><br><span class=\"line\">|   |——build/</span><br><span class=\"line\">|   |——confg/</span><br><span class=\"line\">|   |——node_modules/</span><br><span class=\"line\">|   |——src/</span><br><span class=\"line\">|   |   |——assets/                 //静态文件</span><br><span class=\"line\">|   |   |——components/             //页面组件</span><br><span class=\"line\">|   |   |   |——Menu.vue            //登录注册加载页面</span><br><span class=\"line\">|   |   |   |——Home.vue            //后台首页</span><br><span class=\"line\">|   |   |   |——Login.vue           //登录页面</span><br><span class=\"line\">|   |   |   |——Regist.vue          //注册页面</span><br><span class=\"line\">|   |   |   |——Navbar.vue          //我的发布</span><br><span class=\"line\">|   |   |   |——Messageboard.vue    //留言板页面</span><br><span class=\"line\">|   |   |   |——...                 //等等</span><br><span class=\"line\">|   |   |——router/                 </span><br><span class=\"line\">|   |   |   |——index.js            //页面路由</span><br><span class=\"line\">|   |   |——App.vue                 //父组件</span><br><span class=\"line\">|   |   |——main.js                 //入口文件</span><br><span class=\"line\">|   |——static/                     </span><br><span class=\"line\">|   |——.babelrc</span><br><span class=\"line\">|   |——.editorconfig</span><br><span class=\"line\">|   |——.gitgnore</span><br><span class=\"line\">|   |——index.html</span><br><span class=\"line\">|   |——package.json</span><br><span class=\"line\">|   |——README.md</span><br></pre></td></tr></table></figure>\n<h3 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a><strong>技术点</strong></h3><blockquote>\n<ul>\n<li>登录注册切换动画–vue的transition转换动画</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;transition name=&quot;fade-out&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/transition&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.fade-out-enter-active, .fade-out-leave-active &#123;</span><br><span class=\"line\">    transition: all .5s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fade-out-enter, .fade-out-leave-active &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateX(-400px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>登录注册星星与流星–canvas</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>),</span><br><span class=\"line\">    ctx = canvas.getContext(<span class=\"string\">'2d'</span>),</span><br><span class=\"line\">    width = <span class=\"built_in\">window</span>.innerWidth,</span><br><span class=\"line\">    height = <span class=\"built_in\">window</span>.innerHeight,</span><br><span class=\"line\">    <span class=\"comment\">//实例化月亮和星星。流星是随机时间生成，所以只初始化数组</span></span><br><span class=\"line\">    moon = <span class=\"keyword\">new</span> Moon(ctx, width, height),</span><br><span class=\"line\">    stars = <span class=\"keyword\">new</span> Stars(ctx, width, height, <span class=\"number\">200</span>),</span><br><span class=\"line\">    meteors = [],</span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    canvas.width = width;</span><br><span class=\"line\">    canvas.height = height;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> meteorGenerator = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//x位置偏移，以免经过月亮</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"built_in\">Math</span>.random() * width + <span class=\"number\">800</span></span><br><span class=\"line\">    meteors.push(<span class=\"keyword\">new</span> Meteor(ctx, x, height))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//每隔随机时间，生成新流星</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">        meteorGenerator()</span><br><span class=\"line\">    &#125;, <span class=\"built_in\">Math</span>.random() * <span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> frame = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    count++</span><br><span class=\"line\">    count % <span class=\"number\">10</span> == <span class=\"number\">0</span> &amp;&amp; stars.blink()</span><br><span class=\"line\">    moon.draw()</span><br><span class=\"line\">    stars.draw()</span><br><span class=\"line\"> </span><br><span class=\"line\">    meteors.forEach(<span class=\"function\">(<span class=\"params\">meteor, index, arr</span>)=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果流星离开视野之内，销毁流星实例，回收内存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (meteor.flow()) &#123;</span><br><span class=\"line\">            meteor.draw()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    requestAnimationFrame(frame)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">meteorGenerator()</span><br><span class=\"line\">frame()</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>这个项目还没有完成，后期将不定期更新，敬请期待。。</p>\n<p>如果觉得还行，欢迎star<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/canvas-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/canvas-vue</a><br><strong>项目后台(PHP)地址：</strong> <a href=\"https://github.com/hzzly/canvas-vue-backstage\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/canvas-vue-backstage</a></p>\n<p>好了，溜了溜了。。。</p>\n","categories":[],"tags":["随笔","vue"]},{"title":"移动端屏幕适配的解决","url":"http://yoursite.com/2017/03/15/移动端屏幕适配的解决/","content":"<blockquote>\n<p>随着手机硬件配置的飞速增长、屏幕尺寸的越来越大和网络带宽的逐渐提升，越来越多的PC业务和服务在向移动端转移。然而在这移动端的时代，为了处理各终端屏幕的适配，是否乱了手脚呢？</p>\n</blockquote>\n<p>虽然移动端的页面与PC的页面相比简单了不少，但让我们头痛的事情还是要想尽办法让页面能适配众多不同的终端设备。<br>在前几个外包项目中，我做的主要都是移动微信端的。期间也遇到了不同屏幕大小的适配问题，所以今天特来分享一下我的解决方法。</p>\n<p><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/xyy-vue</a><br><strong>demo地址：</strong> <a href=\"http://hjingren.cn/xyy-vue/\" target=\"_blank\" rel=\"noopener\">http://hjingren.cn/xyy-vue/</a><br>欢迎大家的star啦~</p>\n<h3 id=\"一、meta标签\"><a href=\"#一、meta标签\" class=\"headerlink\" title=\"一、meta标签\"></a><strong>一、meta标签</strong></h3><blockquote>\n<p>meta之viewport，其主要用来告诉浏览器如何规范的渲染Web页面，而你则需要告诉它视窗有多大。在开发移动端页面，我们需要在html中设置meta标签如下：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、手淘的flexible\"><a href=\"#二、手淘的flexible\" class=\"headerlink\" title=\"二、手淘的flexible\"></a><strong>二、手淘的flexible</strong></h3><blockquote>\n<p>flexible是一个制作H5适配的开源库，需要在html中引入，可以直接使用阿里CDN：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行这个JS后，会在<html>元素上增加一个data-dpr属性，以及一个font-size样式。JS会根据不同的设备添加不同的data-dpr值，比如说1、2或者3，同时会给html加上对应的font-size的值，比如说37.5px。</html></p>\n<h3 id=\"三、放弃px拥抱rem\"><a href=\"#三、放弃px拥抱rem\" class=\"headerlink\" title=\"三、放弃px拥抱rem\"></a><strong>三、放弃px拥抱rem</strong></h3><a id=\"more\"></a>\n<p>用px写的是绝对单位，这种方法肯定不行。让我们来拥抱rem吧！！！</p>\n<blockquote>\n<p>我们知道 em 的计算是基于父级元素的，在实际使用中给我们的计算带来了很大的不便。所以 rem 的出现解救了我这样不会算术的人，再也不用担心父级元素的 font-size 了，因为它始终是基于根元素（html） 的。<br>比如默认的 html font-size=16px，那么我想设置12px 的文字就是：12÷16=0.75（rem）</p>\n</blockquote>\n<p>如果对rem还有不懂的可以先看看这个<a href=\"http://www.w3cplus.com/css3/define-font-size-with-css3-rem\" target=\"_blank\" rel=\"noopener\">CSS3的REM设置字体大小</a></p>\n<p>刚刚我们引入了手淘的flexible，并给html加了font-size，如此一来，页面中的元素，都可以通过rem单位来设置。他们会根据html元素的font-size值做相应的计算，从而实现屏幕的适配效果。</p>\n<h3 id=\"四、CSS处理器-SASS\"><a href=\"#四、CSS处理器-SASS\" class=\"headerlink\" title=\"四、CSS处理器(SASS)\"></a><strong>四、CSS处理器(SASS)</strong></h3><ol>\n<li>使用Sass的同学，可以使用Sass的函数、混合宏这些功能来实现：</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@function px2rem(<span class=\"variable\">$px</span>, <span class=\"variable\">$base-font-size</span>: 75px) &#123;</span><br><span class=\"line\">    @return (<span class=\"variable\">$px</span> / <span class=\"variable\">$base-font-size</span>) * 1rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的这个参数$base-font-size: 75px，可以通过(psd文件的宽度/10)来计算。假如psd宽750，则$base-font-size为75px。</p>\n<p><strong>使用：</strong></p>\n<blockquote>\n<p>psd中量多少就写多少</p>\n</blockquote>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//比如量取box宽为190，高为190，则代码：</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: px2rem(<span class=\"number\">190px</span>);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: px2rem(<span class=\"number\">190px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>没用过的可以用sublime的<a href=\"https://github.com/flashlizi/cssrem\" target=\"_blank\" rel=\"noopener\">cssrem</a>的插件实现。</li>\n</ol>\n<h3 id=\"五、图示\"><a href=\"#五、图示\" class=\"headerlink\" title=\"五、图示\"></a><strong>五、图示</strong></h3><p><img src=\"http://omt3u4bph.bkt.clouddn.com/flexible.gif\" alt=\"flexible\"></p>\n<h3 id=\"六、图示代码\"><a href=\"#六、图示代码\" class=\"headerlink\" title=\"六、图示代码\"></a><strong>六、图示代码</strong></h3><blockquote>\n<p>因为这是商业代码，所以就只贴了一部分代码，忘见谅，谢谢<br>最下面有我开源项目的代码，可以参考，如果对你有帮助的话，给个star。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.html</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"home\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"home-list\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-l\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../assets/images/check.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>待审核<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-r isnew\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>\t</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.scss</span></span><br><span class=\"line\">@function px2rem(<span class=\"variable\">$px</span>, <span class=\"variable\">$base-font-size</span>: 75px) &#123;</span><br><span class=\"line\">  @return (<span class=\"variable\">$px</span> / <span class=\"variable\">$base-font-size</span>) * 1rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.home-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: px2rem(<span class=\"number\">45px</span>);</span><br><span class=\"line\">  <span class=\"selector-class\">.list-item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: px2rem(<span class=\"number\">690px</span>);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: px2rem(<span class=\"number\">190px</span>);</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: px2rem(<span class=\"number\">190px</span>);</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: px2rem(<span class=\"number\">45px</span>) auto <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> px2rem(<span class=\"number\">50px</span>) <span class=\"number\">0</span> px2rem(<span class=\"number\">30px</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: px2rem(<span class=\"number\">20px</span>);</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">      <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: px2rem(<span class=\"number\">40px</span>);</span><br><span class=\"line\">      <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: px2rem(<span class=\"number\">90px</span>);</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: px2rem(<span class=\"number\">65px</span>);</span><br><span class=\"line\">        <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">        <span class=\"attribute\">margin-right</span>: px2rem(<span class=\"number\">30px</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">        <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"selector-class\">.item-r</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#666666</span>;</span><br><span class=\"line\">          &amp;<span class=\"selector-class\">.isnew</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ff5500</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &amp;:link,&amp;:visited,&amp;:hover,&amp;:active &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"七、开源示例\"><a href=\"#七、开源示例\" class=\"headerlink\" title=\"七、开源示例\"></a><strong>七、开源示例</strong></h3><p>如果觉得还行，欢迎star<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/xyy-vue</a></p>\n<p>好了，溜了溜了。。。</p>\n","categories":[],"tags":["随笔","h5"]},{"title":"移动端1px的解决方法","url":"http://yoursite.com/2017/03/13/移动端1px的解决方法/","content":"<blockquote>\n<p>在上个项目中，移动端1px问题被困扰了好久，设置1px边框，实际显示2px。<br>以下是我在项目中的解决方法，才疏学浅，轻喷。</p>\n</blockquote>\n<p>关于什么是移动端1像素边框问题，先上两张图，大家就明白了。</p>\n<p><strong>假的1px:</strong><br><img src=\"https://hzzly.github.io/img/onepx2.png\" alt=\"2px\"></p>\n<p><strong>真的1px:</strong><br><img src=\"https://hzzly.github.io/img/onepx1.png\" alt=\"1px\"></p>\n<p>原来Retine屏的分辨率始终是普通屏幕的2倍，1px的边框在devicePixelRatio=2的retina屏下会显示成2px。</p>\n<p><strong>解决方案</strong></p>\n<blockquote>\n<p>transform: scaleY()</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;border-1px&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;style type=&quot;text/scss&quot;&gt;</span><br><span class=\"line\">.border-1px &#123;</span><br><span class=\"line\">\tposition: relative;</span><br><span class=\"line\">\t&amp;:after&#123;</span><br><span class=\"line\">\t\tdisplay: block;</span><br><span class=\"line\">\t\tposition: absolute;</span><br><span class=\"line\">\t\tleft: 0;</span><br><span class=\"line\">\t\tbottom: 0;</span><br><span class=\"line\">\t\twidth: 100%;</span><br><span class=\"line\">\t\tborder-top: 1px solid #000;</span><br><span class=\"line\">\t\tcontent: &apos;&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5) &#123;</span><br><span class=\"line\">\t.border-1px&#123;</span><br><span class=\"line\">\t\t&amp;::after&#123;</span><br><span class=\"line\">\t\t\t-webkit-transform: scaleY(0.7);</span><br><span class=\"line\">\t\t\ttransform: scaleY(0.7);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2) &#123;</span><br><span class=\"line\">\t.border-1px&#123;</span><br><span class=\"line\">\t\t&amp;::after&#123;</span><br><span class=\"line\">\t\t\t-webkit-transform: scaleY(0.5);</span><br><span class=\"line\">\t\t\ttransform: scaleY(0.5);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>到这已经成功解决了1px问题。</p>\n<p>好了，吃饭去喽，溜了溜了。。。</p>\n","categories":[],"tags":["随笔","h5"]},{"title":"axios在vue中的简单配置与使用","url":"http://yoursite.com/2017/03/12/axios在vue中的简单配置与使用/","content":"<blockquote>\n<p>尤雨溪之前在微博发布消息，不再继续维护vue-resource，并推荐大家开始使用 axios 。</p>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/axios.png\" alt=\"axios\"></p>\n<h2 id=\"一、axios-简介\"><a href=\"#一、axios-简介\" class=\"headerlink\" title=\"一、axios 简介\"></a><strong>一、axios 简介</strong></h2><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p>\n<blockquote>\n<ul>\n<li>从浏览器中创建 XMLHttpRequest</li>\n<li>从 node.js 发出 http 请求</li>\n<li>支持 Promise API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防止 CSRF/XSRF</li>\n</ul>\n</blockquote>\n<h2 id=\"二、引入方式：\"><a href=\"#二、引入方式：\" class=\"headerlink\" title=\"二、引入方式：\"></a><strong>二、引入方式：</strong></h2><p>npm:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install axios</span><br><span class=\"line\">//淘宝源</span><br><span class=\"line\">$ cnpm install axios</span><br></pre></td></tr></table></figure></p>\n<p>bower:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bower install axios</span><br></pre></td></tr></table></figure></p>\n<p>cdn:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://unpkg.com/axios/dist/axios.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、vue中axios的配置\"><a href=\"#三、vue中axios的配置\" class=\"headerlink\" title=\"三、vue中axios的配置 \"></a><strong>三、vue中axios的配置 </strong></h2><blockquote>\n<p>之前那个开源项目一开始就打算用axios，在网上找了好多文章与攻略，发现好多都不太详细，所以打算自己动手配置一个，(不要怂，撸起袖子就是干)。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>我的配置：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'../util/tool'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;                        <span class=\"comment\">//响应时间</span></span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;           <span class=\"comment\">//配置请求头</span></span><br><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'你的接口地址'</span>;   <span class=\"comment\">//配置接口地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//POST传参序列化(添加请求拦截器)</span></span><br><span class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在发送请求之前做某件事</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span>)&#123;</span><br><span class=\"line\">        config.data = qs.stringify(config.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;,(error) =&gt;&#123;</span><br><span class=\"line\">     _.toast(<span class=\"string\">\"错误的传参\"</span>, <span class=\"string\">'fail'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//返回状态判断(添加响应拦截器)</span></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//对响应数据做些事</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!res.data.success)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// _.toast(res.data.msg);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">    _.toast(<span class=\"string\">\"网络异常\"</span>, <span class=\"string\">'fail'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//返回一个Promise(发送post请求)</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchPost</span>(<span class=\"params\">url, params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        axios.post(url, params)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve(response.data);</span><br><span class=\"line\">            &#125;, err =&gt; &#123;</span><br><span class=\"line\">                reject(err);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">               reject(error)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////返回一个Promise(发送get请求)</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchGet</span>(<span class=\"params\">url, param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        axios.get(url, &#123;<span class=\"attr\">params</span>: param&#125;)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve(response.data)</span><br><span class=\"line\">            &#125;, err =&gt; &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                reject(error)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、vue中使用配置好的axios\"><a href=\"#四、vue中使用配置好的axios\" class=\"headerlink\" title=\"四、vue中使用配置好的axios\"></a><strong>四、vue中使用配置好的axios</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户登录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Login(params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fetchPost(<span class=\"string\">'/users/api/userLogin'</span>, params)</span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户注册</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Regist(params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fetchPost(<span class=\"string\">'/users/api/userRegist'</span>, params)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送注册验证码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RegistVerifiCode(tellphone) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fetchPost(<span class=\"string\">'/users/api/registVerifiCode'</span>, &#123;<span class=\"attr\">tellphone</span>: tellphone&#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果觉得还行，欢迎star<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/xyy-vue</a><br><strong>demo地址：</strong> <a href=\"http://hjingren.cn/xyy-vue/\" target=\"_blank\" rel=\"noopener\">http://hjingren.cn/xyy-vue/</a></p>\n<p>好了，溜了溜了。。。</p>\n","categories":[],"tags":["随笔","vue","axios"]},{"title":"开源的收获","url":"http://yoursite.com/2017/03/09/开源的收获/","content":"<blockquote>\n<p>第一次在github上发布了开源《Qu约》后，不到两天，被人star了137次，fork了25次，这个成绩大大出乎了我自己的意料！</p>\n</blockquote>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/xyy-vue</a><br><strong>demo地址：</strong> <a href=\"http://hjingren.cn/xyy-vue/\" target=\"_blank\" rel=\"noopener\">http://hjingren.cn/xyy-vue/</a><br>欢迎大家的star啦~</p>\n<p>同时也让我收获到了许多：</p>\n<blockquote>\n<ol>\n<li>github首次破百</li>\n</ol>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/github.png\" alt=\"github\"></p>\n<blockquote>\n<ol start=\"2\">\n<li>掘金的阅读量与喜欢量同时给他人带来了不一样的价值</li>\n</ol>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/juejin.png\" alt=\"juejin\"></p>\n<blockquote>\n<ol start=\"3\">\n<li>segmentfault的阅读量、收藏量与声望值，把其中的价值传给他人</li>\n</ol>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/segmentfault.png\" alt=\"segmentfault\"></p>\n<blockquote>\n<ol start=\"4\">\n<li>收获了一个offer</li>\n<li>给我以后就业增加了一份保证</li>\n<li>结交了好多同行开发者</li>\n</ol>\n</blockquote>\n<p>分享与开源，让技术生生不息。借用一本书de名字，Just for fun。开源是一种情怀，happy hacking！</p>\n<p>革命尚未成功，我们还需努力。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"进阶vue全家桶","url":"http://yoursite.com/2017/03/08/进阶vue全家桶/","content":"<blockquote>\n<p>有人说只会vue不会vuex还只是个切图仔，所以本项目将带领你进阶vue全家桶。前端结合Vue2.0全家桶(vue+vue-router+vuex+axios+es6+sass)以及后端Node,一个<a href=\"https://hzzly.github.io/2017/03/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%B0%9D%E8%AF%95/\" target=\"_blank\" rel=\"noopener\">前后端分离</a>的练手项目。本项目可以作为一个前端vue进阶项目，从前端flex布局到前端vue以及组件分离的使用，再到后端Node以及Leancloud的结合，是一个打通前后端流程的一个项目。欢迎大家前来star。如果有任何问题，可以给我留言，我们互相学习讨论，一起进步。注：本项目为开源项目，非本人同意不能用于商业应用。</p>\n</blockquote>\n<h3 id=\"预览地址：-http-hzzly-net-xyy-vue\"><a href=\"#预览地址：-http-hzzly-net-xyy-vue\" class=\"headerlink\" title=\"预览地址： http://hzzly.net/xyy-vue/\"></a><strong>预览地址：</strong> <a href=\"http://hzzly.net/xyy-vue/\" target=\"_blank\" rel=\"noopener\">http://hzzly.net/xyy-vue/</a></h3><h3 id=\"Github地址：-https-github-com-hzzly-xyy-vue\"><a href=\"#Github地址：-https-github-com-hzzly-xyy-vue\" class=\"headerlink\" title=\"Github地址： https://github.com/hzzly/xyy-vue\"></a><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/xyy-vue</a></h3><p>欢迎大家的star啦~</p>\n<h2 id=\"功能说明\"><a href=\"#功能说明\" class=\"headerlink\" title=\"功能说明\"></a>功能说明</h2><ul>\n<li>首页轮播图</li>\n<li>首页热门活动</li>\n<li>约跑步活动列表</li>\n<li>约出行活动列表</li>\n<li>个人中心<ul>\n<li>查看个人活动</li>\n<li>学生认证(待开发)</li>\n<li>学生信息修改</li>\n<li>消息通知(后台接口待开发)</li>\n<li>选择高校(待开发)</li>\n</ul>\n</li>\n<li>登录</li>\n<li>注册</li>\n<li>活动详情<ul>\n<li>活动报名</li>\n</ul>\n</li>\n<li>活动发布<ul>\n<li>时间选择组件</li>\n<li>地址选择组件</li>\n<li>文件上传</li>\n</ul>\n</li>\n<li>axios的封装</li>\n<li>……</li>\n</ul>\n<h2 id=\"公共组件\"><a href=\"#公共组件\" class=\"headerlink\" title=\"公共组件\"></a>公共组件</h2><blockquote>\n<ul>\n<li>弹出文字组件</li>\n<li>弹出框组件</li>\n<li>loading组件</li>\n<li>toast组件</li>\n<li>时间选择器组件</li>\n<li>地址选择器组件</li>\n<li>……</li>\n</ul>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/xyy-vue.gif\" alt=\"xyy-vue\"></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——xyy-vue/</span><br><span class=\"line\">|   |——build/</span><br><span class=\"line\">|   |——confg/</span><br><span class=\"line\">|   |——node_modules/</span><br><span class=\"line\">|   |——src/</span><br><span class=\"line\">|   |   |——assets/                 //静态文件</span><br><span class=\"line\">|   |   |——components/             //公共组件</span><br><span class=\"line\">|   |   |——fetch/</span><br><span class=\"line\">|   |   |   |——api.js              //axios封装与api</span><br><span class=\"line\">|   |   |——pages/                  //存放项目页面</span><br><span class=\"line\">|   |   |   |——Detail.vue          //活动详情页面</span><br><span class=\"line\">|   |   |   |——Home.vue            //首页</span><br><span class=\"line\">|   |   |   |——Login.vue           //登录页面</span><br><span class=\"line\">|   |   |   |——Navbar.vue          //我的发布</span><br><span class=\"line\">|   |   |   |——NotFound.vue        //出错页面</span><br><span class=\"line\">|   |   |   |——Post.vue            //发布活动页面</span><br><span class=\"line\">|   |   |   |——Regist.vue          //注册页面</span><br><span class=\"line\">|   |   |   |——Set.vue             //设置页面</span><br><span class=\"line\">|   |   |   |——Sport.vue           //约跑步活动列表页面</span><br><span class=\"line\">|   |   |   |——Travel.vue          //约出行活动列表页面</span><br><span class=\"line\">|   |   |   |——User.vue            //个人中心页面</span><br><span class=\"line\">|   |   |   |——UserInfo.vue        //个人详情页面</span><br><span class=\"line\">|   |   |   |——UserMsg.vue         //消息列表页面</span><br><span class=\"line\">|   |   |——router/                 </span><br><span class=\"line\">|   |   |   |——index.js            //页面路由</span><br><span class=\"line\">|   |   |——util                    //公用方法</span><br><span class=\"line\">|   |   |——vuex /                  //存放vuex代码</span><br><span class=\"line\">|   |   |   |——modules /           //数据模块</span><br><span class=\"line\">|   |   |   |——store.js            //vuex主入口</span><br><span class=\"line\">|   |   |   |——types.js            //vuex的types文件</span><br><span class=\"line\">|   |   |——App.vue                 //父组件</span><br><span class=\"line\">|   |   |——main.js                 //入口文件</span><br><span class=\"line\">|   |——static/</span><br><span class=\"line\">|   |——.babelrc</span><br><span class=\"line\">|   |——.editorconfig</span><br><span class=\"line\">|   |——.gitgnore</span><br><span class=\"line\">|   |——index.html</span><br><span class=\"line\">|   |——package.json</span><br><span class=\"line\">|   |——README.md</span><br></pre></td></tr></table></figure>\n<h2 id=\"主要难点\"><a href=\"#主要难点\" class=\"headerlink\" title=\"主要难点\"></a>主要难点</h2><p>1.各个组件数据的共享</p>\n<blockquote>\n<p>传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。而且也会导致代码难以维护</p>\n</blockquote>\n<p>解决方法：采用<a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vuex</a>进行状态管理，把所有事件和状态存储在store对象中，在组件中通过计算属性获得事件，因此就有了实时性。</p>\n<blockquote>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n</blockquote>\n<p>每一个 Vuex 应用的核心就是 store（仓库）。”store” 基本上就是一个容器，它包含着应用中大部分的状态(state)。</p>\n<blockquote>\n</blockquote>\n<p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>\n<blockquote>\n</blockquote>\n<p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交(commit) <strong>mutations</strong>。这样使得我们可以方便地跟踪每一个状态的变化。</p>\n<p>代码如下(以一个user module为例)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//vuex/modules/user.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> api <span class=\"keyword\">from</span> <span class=\"string\">'../../fetch/api'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> types <span class=\"keyword\">from</span> <span class=\"string\">'../types'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户登录状态</span></span><br><span class=\"line\">    loginStatus: <span class=\"built_in\">JSON</span>.parse(localStorage.getItem(<span class=\"string\">'loginStatus'</span>)) || <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户登录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    setUserInfo(&#123; commit &#125;, res) &#123;</span><br><span class=\"line\">        localStorage.setItem(<span class=\"string\">'loginStatus'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">        commit(types.SET_LOGIN_STATUS, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 退出登录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    setSignOut(&#123; commit &#125;) &#123;</span><br><span class=\"line\">        localStorage.removeItem(<span class=\"string\">'loginStatus'</span>)</span><br><span class=\"line\">        commit(types.SET_LOGIN_STATUS, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">    loginStatus: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.loginStatus</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    [types.SET_LOGIN_STATUS](state, status) &#123;</span><br><span class=\"line\">        state.loginStatus = status</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    state,</span><br><span class=\"line\">    actions,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">    mutations</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//User.vue</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"user\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;div v-<span class=\"keyword\">if</span>=<span class=\"string\">\"!loginStatus\"</span>&gt;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;div v-else&gt;\t</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t...\t\t</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;/</span>div&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tcomputed: &#123;</span><br><span class=\"line\">\t\t...mapGetters([</span><br><span class=\"line\">\t\t\t<span class=\"string\">'loginStatus'</span></span><br><span class=\"line\">\t\t])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2.时间选择组件(要可选择时间段)</p>\n<blockquote>\n<p><strong>规则：</strong></p>\n<ul>\n<li>默认值为：开始日期在后天，结束日期在第六天</li>\n<li>今天以前不可选择</li>\n<li>点击某个日子，则将最近的节点移动过</li>\n<li>如果离两个节点一样，则将开始日期移动过去</li>\n<li>两个节点也可选到1天里；显示为各一半</li>\n</ul>\n</blockquote>\n<p>一开始打算在github上搜索一个然后直接拿来用，发现都是不符合我的设计，所以打算自己撸一个，(不要怂，撸起袖子就是干)。<br>终于经过几个晚上的奋战写出来了(期间遇到了各种坑)。<br>代码就不贴出来了  <a href=\"https://github.com/hzzly/xyy-vue/blob/master/src/components/timePicker.vue\" target=\"_blank\" rel=\"noopener\">代码传送门</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虽然只是做了个小小的个人开源项目，但是我感觉收获还是很大的，很多知识点掌握得更加的牢固，对 <strong>vue全家桶</strong> 的理解又更深了一些。这个项目还没有完成，后期将不定期更新，敬请期待。。</p>\n<p>如果觉得还行，欢迎star<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/xyy-vue</a></p>\n<p>好了，溜了溜了。。。</p>\n","categories":[],"tags":["随笔","vue","vuex"]},{"title":"webpack工程化","url":"http://yoursite.com/2017/03/07/webpack工程化/","content":"<h3 id=\"一、webpack是什么\"><a href=\"#一、webpack是什么\" class=\"headerlink\" title=\"一、webpack是什么\"></a>一、webpack是什么</h3><blockquote>\n<p>webpack is a module bundler. webpack takes modules with dependencies and generates static assets representing those modules</p>\n</blockquote>\n<p>webpack 是一个模块打包工具，输入为包含依赖关系的模块集，输出为打包合并的前端静态资源。在上一节的前端工程化中，已经介绍过，webpack 是同时支持 AMD 和 CommonJs 的模块定义方式，不仅如此，webpack 可以将任何前端资源视为模块，如 css，图片，文本。</p>\n<h3 id=\"二、为什么要使用它\"><a href=\"#二、为什么要使用它\" class=\"headerlink\" title=\"二、为什么要使用它\"></a>二、为什么要使用它</h3><p>在 webpack 出现之前，已经有了一些打包工具，如 Browserify、grunt、gulp… 这些打包工具工具功能单一，只能完成特定的任务，然而 web 前端工程是复杂的，一个 webapp 对于业务代码的要求可能有：</p>\n<blockquote>\n<ul>\n<li>代码可以分块，实现按需加载</li>\n<li>首屏加载时间要尽量减少</li>\n<li>需要集成一些第三方库</li>\n</ul>\n</blockquote>\n<p>webpack 的出现正式为了解决这些问题，在 webpack 中，提供了一下这些功能：</p>\n<a id=\"more\"></a>\n<p><strong>1.代码分块：</strong> webpack 有两种类型的模块依赖，一种是同步的，一种是异步的。在打包的过程中可以将代码输出为代码块（chunk），代码块可以实现按需加载。 异步加载的代码块通过分割点（spliting point）来确定。<br><strong>2.Loaders：</strong> Webpack 本身只会处理 Javascript，为了实现将其他资源也定义为模块，并转化为 Javascript， Webpack 定义 loaders , 不同的 loader 可以将对应的资源转化为 Javascript 模块。<br><strong>3.智能的模块解析：</strong> webpack 可以很容易将第三方库转化为模块集成到项目代码中，模块的依赖可以用表达式的方式（这在其他打包工具中是没有支持的），这种模块依赖叫做动态模块依赖。<br><strong>4.插件系统：</strong> webpack 的可定制化在于其插件系统，其本身的很多功能也是通过插件的方式实现，插件系统形成了 webpack 的生态，是的可以使用很多开源的第三方插件。</p>\n<h3 id=\"三、webpack-核心思想\"><a href=\"#三、webpack-核心思想\" class=\"headerlink\" title=\"三、webpack 核心思想\"></a>三、webpack 核心思想</h3><p><strong>1.万物皆模块：</strong> 在 webpack 的世界中，除了 Javascript，其他任何资源都可以当做模块的方式引用。<br><strong>2.按需加载：</strong> webapp 的优化关键在于代码体积，当应用体积增大，实现代码的按需加载是毕需，这也是 webpack 出现的根本原因。<br><strong>3.可定制化：</strong> 任何一个工具都不可能解决所有问题，提供解决方案才是最可行的，webpack 基于可定制化的理念构建，通过插件系统，配置文件，可以实现大型项目的定制需求。</p>\n<h3 id=\"四、安装配置\"><a href=\"#四、安装配置\" class=\"headerlink\" title=\"四、安装配置\"></a>四、安装配置</h3><p>在此之前你应该已经安装了 node.js.</p>\n<p>全局安装webapck或webpack-dev-server(开启一个本地服务)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install webpack -g</span><br><span class=\"line\">$ npm install webpack-dev-server -g</span><br></pre></td></tr></table></figure></p>\n<p>在项目中安装webpack和webpack-dev-server<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install webpack --save-dev</span><br><span class=\"line\">$ npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>webpack使用</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//name.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'hzzly'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> name <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>).textContent = <span class=\"string\">`hello~<span class=\"subst\">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure></p>\n<p>1.命令行的使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack src/index.js dist/bundle.js</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>语法：webpack 要打包的文件 打包输出的文件</p>\n</blockquote>\n<p>2.配置文件的使用<br>在项目目录下创建 webpack.config.js如下(简单的配置)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,  <span class=\"comment\">//入口</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'./dist/'</span>,    <span class=\"comment\">//输出路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>   <span class=\"comment\">//输出文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js[x]?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,  <span class=\"comment\">//处理.js或.jsx文件loader</span></span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          presets: [<span class=\"string\">'env'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">\"style-loader!css-loader\"</span>   <span class=\"comment\">//处理.css文件loader</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg)$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader?limit=8192'</span>    <span class=\"comment\">//处理图片loader</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack</span><br><span class=\"line\">//或开启本地服务器并实时监听文件变化</span><br><span class=\"line\">$ webpack-dev-server --inline --colors --hot</span><br></pre></td></tr></table></figure></p>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/webpack\" target=\"_blank\" rel=\"noopener\">https://github.com/hzzly/webpack</a><br>欢迎大家的star啦~</p>\n<p>好了，装了一大波，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"前后端分离的尝试","url":"http://yoursite.com/2017/03/06/前后端分离的尝试/","content":"<p>首次尝试前后端分离是在一个外包项目中:</p>\n<blockquote>\n<p>点匠科技 o2o的家装类 移动项目微信平台前端开发主要工作内容是将原有的android、ios 应用 配合后端工程师开发一套 微信产品,个人角色为 前端开发工程师 负责界面 html css vue 前后端数据联调等工作</p>\n</blockquote>\n<p><a href=\"http://www.dianjiang99.com/html/user_center/user_center.html\" target=\"_blank\" rel=\"noopener\">项目地址</a><br>(测试账号:15103585135 测试密码:123456)</p>\n<p>这次的项目<strong>技术栈</strong></p>\n<blockquote>\n<ul>\n<li>vue vue-router vuex </li>\n<li>weui</li>\n<li>sass</li>\n<li>es6 ajax</li>\n</ul>\n</blockquote>\n<p>通过这次项目，让我体会到了这种前后端分离的快感，所以特来分享一波。</p>\n<p>如果你没有尝试过前后端分离的工作流程，那么可以先试想一下这样的流程改变：</p>\n<a id=\"more\"></a>\n<p><strong>把流程从</strong></p>\n<blockquote>\n<ul>\n<li>PM：“我要这个功能”</li>\n<li>后端：“这个先找前端做个模板”</li>\n<li>前端：“模板做完了”</li>\n<li>后端：“我来对接一下，这里样式不对”</li>\n<li>前端：“我改完了”</li>\n<li>后端：“功能交付”</li>\n<li>PM：“春节要加这个活动”</li>\n<li>后端：“这个先找前端改个模板”</li>\n<li>前端：“模板做完了”</li>\n<li>后端：“我来对接一下，这里样式不对”</li>\n<li>前端：“我改完了”</li>\n<li>后端：“功能交付”</li>\n</ul>\n</blockquote>\n<p><strong>变成</strong></p>\n<blockquote>\n<ul>\n<li>PM：“我要这个功能”</li>\n<li>前端：“我要接口”</li>\n<li>后端：“接口完成了”</li>\n<li>前端：“我来对接一下，功能交付”</li>\n<li>PM：“春节要加这个活动”</li>\n<li>前端：“需要增加接口”</li>\n<li>后端：“接口完成了”</li>\n<li>前端：“我来对接一下，功能交付”</li>\n</ul>\n</blockquote>\n<p><strong>由此可见，前后端分离的主要概念就是：后台只需提供API接口，前端调用AJAX实现数据呈现。</strong></p>\n<p>前后端分离的实现对技术人员尤其是前端人员的要求会上升一个层次，前端的工作不只是切页面写模板或是处理一些简单的js逻辑，前端需要处理服务器返回的各种数据格式，还需要掌握一系列的数据处理逻辑、MVVM思想和各种主流前端框架(React, Vue..)。</p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>对于前后端分离的意义我们也可以看做是前端渲染的意义，我主要总结了下面四点：</p>\n<p><strong>1. 彻底解放前端</strong></p>\n<blockquote>\n<p>前端不再需要向后台提供模板或是后台在前端html中嵌入后台代码，前后端解耦，增加可读性。</p>\n</blockquote>\n<p><strong>2. 提高工作效率，分工更加明确</strong></p>\n<blockquote>\n<p>前后端分离的工作流程可以使前端只关注前端的事，后台只关心后台的活，两者开发可以同时进行，在后台还没有时间提供接口的时候，前端可以先将数据写死或者调用本地的json文件即可，页面的增加和路由的修改也不必再去麻烦后台，开发更加灵活。</p>\n</blockquote>\n<p><strong>3. 局部性能提升</strong></p>\n<blockquote>\n<p>通过前端路由的配置，我们可以实现页面的按需加载，无需一开始加载首页便加载网站的所有的资源，服务器也不再需要解析前端页面，在页面交互及用户体验上有所提升。</p>\n</blockquote>\n<p><strong>4. 降低维护成本</strong></p>\n<blockquote>\n<p>通过目前主流的前端MVVM框架，我们可以非常快速的定位及发现问题的所在，客户端的问题不再需要后台人员参与及调试，代码重构及可维护性增强。</p>\n</blockquote>\n<p><strong>面对快速发展的前端，我们应该去适应其带来的工作方式和流程的改变，目前的前后端分离的工作方式必然是今后的趋势所在，作为一个前端开发人员，我们应当承担这个普及前端新知识和改变现状的职责。</strong></p>\n<p>我的<a href=\"https://github.com/hzzly\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>好了，装了一大波，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"前端入坑笔记–JavaScript类型检测","url":"http://yoursite.com/2017/03/05/前端入坑笔记–JavaScript类型检测/","content":"<p><strong>JavaScript变量可以用来保存两种类型的值：基本类型值和引用类型值</strong></p>\n<blockquote>\n<ul>\n<li>5种基本数据类型：String Number Boolean Undefined  Null  </li>\n<li>引用类型：Object  Array  Data  RegExp  Function  Error  Map  …   </li>\n</ul>\n</blockquote>\n<p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值</p>\n<h2 id=\"一、typeof\"><a href=\"#一、typeof\" class=\"headerlink\" title=\"一、typeof\"></a>一、typeof</h2><p>   typeof 用来判断各种数据类型,有两种写法：typeof xxx, typeof(xxx) </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'hzzly'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">22</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d;</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> a );       <span class=\"comment\">//string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> b );       <span class=\"comment\">//boolean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> c );       <span class=\"comment\">//number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> d );       <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> e );       <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> o );       <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> f );       <span class=\"comment\">//function</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> &#123;&#125; );      <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> [] );      <span class=\"comment\">//object</span></span><br></pre></td></tr></table></figure>\n<p>这里面包含了js里面的五种数据类型  number   string    boolean   undefined     object和函数类型 function</p>\n<p>看到这里你肯定会问了：我怎么去区分对象，数组和null呢?</p>\n<p>接下来我们就用到另外两个利器：Object.prototype.toString.call   instanceof/constructor</p>\n<a id=\"more\"></a>\n<h2 id=\"二、Object-prototype-toString-call\"><a href=\"#二、Object-prototype-toString-call\" class=\"headerlink\" title=\"二、Object.prototype.toString.call\"></a>二、Object.prototype.toString.call</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gettype=<span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\"> </span><br><span class=\"line\">gettype.call(<span class=\"string\">'hzzly'</span>)        输出 [object <span class=\"built_in\">String</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">gettype.call(<span class=\"number\">22</span>)             输出 [object <span class=\"built_in\">Number</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">gettype.call(<span class=\"literal\">true</span>)           输出 [object <span class=\"built_in\">Boolean</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">gettype.call(<span class=\"literal\">undefined</span>)      输出 [object Undefined]</span><br><span class=\"line\"> </span><br><span class=\"line\">gettype.call(<span class=\"literal\">null</span>)           输出 [object Null]</span><br><span class=\"line\"> </span><br><span class=\"line\">gettype.call(&#123;&#125;)             输出 [object <span class=\"built_in\">Object</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">gettype.call([])             输出 [object <span class=\"built_in\">Array</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">gettype.call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)   输出 [object <span class=\"built_in\">Function</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、instanceof-constructor\"><a href=\"#三、instanceof-constructor\" class=\"headerlink\" title=\"三、instanceof/constructor\"></a>三、instanceof/constructor</h2><p>根据规定，所有引用类型的值都是Object的实例。因此，在检测一个引用类型值和Object 构造函数时，instanceof 操作符始终会返回true。当然，如果使用instanceof 操作符检测基本类型的值，则该操作符始终会返回false，因为基本类型不是对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);         <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/^$/</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>);      <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);        <span class=\"comment\">//true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([].constructor === <span class=\"built_in\">Array</span>);    <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([].constructor === <span class=\"built_in\">Object</span>);   <span class=\"comment\">//false 我们的constructor可以避免instanceof检测的时候,用Object也是true的问题</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125;.constructor === <span class=\"built_in\">Object</span>);   <span class=\"comment\">//true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>);         <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>   看到这里，刚才的问题我们解决了</p>\n<p>   <strong>检测数组</strong>，ECMAScript5新增了Array.isArray() 方法。这个方法的目的是最终确定某个值到底是不是数组，而不管它是在哪个全局执行环境中创建。这个方法的用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"built_in\">Array</span>.isArray(value) )&#123;</span><br><span class=\"line\"> <span class=\"comment\">//对数组执行某些操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、题外话\"><a href=\"#四、题外话\" class=\"headerlink\" title=\"四、题外话\"></a>四、题外话</h2><p>基本类型值与引用类型值具有如下特点：</p>\n<blockquote>\n<ul>\n<li>基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中</li>\n<li>从一个变量向另一个变量复制基本类型的值，会创建这个值得一个副本</li>\n<li>引用类型的值是对象，保存在堆内存中</li>\n<li>包含引用类型值得变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li>\n<li>从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象</li>\n</ul>\n</blockquote>\n<p><img src=\"http://hjingren.cn/publicImages/refuel.jpg\" alt=\"refuel\"></p>\n<p>好了，遛了遛了。。。</p>\n","categories":[],"tags":["随笔","JavaScript"]},{"title":"手把手用Node的socket.io撸一个简单聊天室","url":"http://yoursite.com/2017/03/04/手把手用Node的socket.io撸一个简单聊天室/","content":"<h5 id=\"点击查看效果\"><a href=\"#点击查看效果\" class=\"headerlink\" title=\"点击查看效果\"></a><a href=\"http://hjingren.cn:3000/\" target=\"_blank\" rel=\"noopener\">点击查看效果</a></h5><blockquote>\n<ul>\n<li>Socket.IO用于浏览器与Node.js之间实现实时通信。</li>\n<li>Socket.IO设计的目标是支持任何的浏览器，任何Mobile设备。</li>\n<li>支持主流的PC浏览器 (IE,Safari,Chrome,Firefox,Opera等)，</li>\n<li>Mobile浏览器(iphone Safari/ipad Safari/Android WebKit/WebOS WebKit等)。</li>\n<li>Socket.IO解决了实时的通信问题，并统一了服务端与客户端的编程方式。</li>\n<li>启动了socket以后，就像建立了一条客户端与服务端的管道，两边可以互通有无。</li>\n</ul>\n</blockquote>\n<h2 id=\"一、初始化一个Express项目\"><a href=\"#一、初始化一个Express项目\" class=\"headerlink\" title=\"一、初始化一个Express项目\"></a>一、初始化一个Express项目</h2><p>通过应用生成器工具 express 可以快速创建一个应用的骨架。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装express 脚手架</span><br><span class=\"line\">$ npm install express-generator -g</span><br><span class=\"line\"> </span><br><span class=\"line\">//在当前工作目录创建一个命名为 chat-node 的应用</span><br><span class=\"line\">$ express -e chat-node</span><br><span class=\"line\"> </span><br><span class=\"line\">//安装所有依赖</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> chat-node </span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"> </span><br><span class=\"line\">//启动这个应用（MacOS 或 Linux 平台）：</span><br><span class=\"line\">$ npm start</span><br></pre></td></tr></table></figure>\n<p>然后在浏览器中打开 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 网址就可以看到这个应用了</p>\n<h2 id=\"二、安装Socket-IO\"><a href=\"#二、安装Socket-IO\" class=\"headerlink\" title=\"二、安装Socket.IO\"></a>二、安装Socket.IO</h2><p>这里使用 npm 安装到项目依赖中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install socket.io --save</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"三、整合Socket-IO到项目中\"><a href=\"#三、整合Socket-IO到项目中\" class=\"headerlink\" title=\"三、整合Socket.IO到项目中\"></a>三、整合Socket.IO到项目中</h2><p>找到服务开启的www文件</p>\n<blockquote>\n<p>根目录 &gt; bin &gt; www</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在创建服务器(var server = http.createServer(app))之后添加如下代码</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(server);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 在线用户</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> onlineUser = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 在线人数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> onlineCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">io.on(<span class=\"string\">'connection'</span>, (socket) =&gt; &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 监听新用户加入</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a user connected'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  socket.on(<span class=\"string\">'disconnect'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'user disconnected'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//监听post数据加入</span></span><br><span class=\"line\">  socket.on(<span class=\"string\">'post'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">say</span>) </span>&#123;</span><br><span class=\"line\">    io.emit(<span class=\"string\">'post'</span>, say)   <span class=\"comment\">//通过io的emit把数据发送到前台</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>通过传递server(HTTP服务器)来初始化socket.io的一个新实例，然后监听连接sockets的connection事件，并将其记录到控制台。</p>\n<h2 id=\"三、修改前台代码\"><a href=\"#三、修改前台代码\" class=\"headerlink\" title=\"三、修改前台代码\"></a>三、修改前台代码</h2><p>在 views 目录下新建一个index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>聊天室<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"chat\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"chatApp\"</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room-list\"</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in msgList\"</span>&gt;</span></span><br><span class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"msg-detail\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"send-box\"</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"写点什么喃...\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"sendMsg\"</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSendMsg\"</span>&gt;</span>发送<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我在里面引入了socket.io以及vue(更好的渲染数据)</p>\n<h2 id=\"四、编写业务代码\"><a href=\"#四、编写业务代码\" class=\"headerlink\" title=\"四、编写业务代码\"></a>四、编写业务代码</h2><blockquote>\n<p>在 public &gt; javascripts 下新建一个index.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> socket = io();  <span class=\"comment\">//加载socket.io-client会暴露一个全局io并连接。</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = <span class=\"keyword\">new</span> Vue(&#123;  <span class=\"comment\">//实例化一个Vue实例</span></span><br><span class=\"line\">\tel: <span class=\"string\">\"#chatApp\"</span>,</span><br><span class=\"line\">\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;        <span class=\"comment\">//数据驱动</span></span><br><span class=\"line\">\t\t\tsendMsg: <span class=\"string\">''</span>,</span><br><span class=\"line\">\t\t\tmsgList: []</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmounted() &#123;             </span><br><span class=\"line\">\t\tsocket.on(<span class=\"string\">'post'</span>, (say) =&gt; &#123;   <span class=\"comment\">//接收服务端的 post 命令</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.msgList.push(say)       <span class=\"comment\">//添加到msgList中给前台渲染出来</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods: &#123;</span><br><span class=\"line\">\t\tdoSendMsg() &#123;                  <span class=\"comment\">//监听按钮发送的事件</span></span><br><span class=\"line\">\t\t\tsocket.emit(<span class=\"string\">'post'</span>, <span class=\"keyword\">this</span>.sendMsg)    <span class=\"comment\">//把要发送的数据emit到服务端</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.sendMsg = <span class=\"string\">''</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、在对应路由中打开index-html\"><a href=\"#五、在对应路由中打开index-html\" class=\"headerlink\" title=\"五、在对应路由中打开index.html\"></a>五、在对应路由中打开index.html</h2><blockquote>\n<p>在 routes &gt; index.js 修改如下代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* GET home page. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.sendFile(path.join(__dirname, <span class=\"string\">'../views'</span>, <span class=\"string\">'index.html'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后在浏览器中打开 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 网址就可以看到这个应用de效果了</p>\n<p><img src=\"https://hzzly.github.io/img/chat-node1.gif\" alt=\"chat-node1\"></p>\n<h5 id=\"Github-Demo\"><a href=\"#Github-Demo\" class=\"headerlink\" title=\"Github Demo\"></a><a href=\"https://github.com/hzzly/chat-node\" target=\"_blank\" rel=\"noopener\">Github Demo</a></h5><p>欢迎star</p>\n<p>好了，遛了遛了。。。</p>\n","categories":[],"tags":["随笔","node"]},{"title":"Web的Flex弹性盒模型","url":"http://yoursite.com/2017/03/03/Web的Flex弹性盒模型/","content":"<h2 id=\"一、Flex布局是什么？\"><a href=\"#一、Flex布局是什么？\" class=\"headerlink\" title=\"一、Flex布局是什么？\"></a>一、Flex布局是什么？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>行内元素也可以使用Flex布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、容器的属性\"><a href=\"#二、容器的属性\" class=\"headerlink\" title=\"二、容器的属性\"></a>二、容器的属性</h2><blockquote>\n<ul>\n<li>[ flex-direction ]</li>\n<li>[ flex-wrap ]</li>\n<li>[ flex-flow ]</li>\n<li>[ justify-content ]</li>\n<li>[ align-self ]</li>\n<li>[ align-items ]</li>\n<li>[ align-content ]</li>\n<li>[ order ]</li>\n</ul>\n</blockquote>\n<h5 id=\"点击查看实例\"><a href=\"#点击查看实例\" class=\"headerlink\" title=\"点击查看实例\"></a><a href=\"http://hjingren.cn/flex/\" target=\"_blank\" rel=\"noopener\">点击查看实例</a></h5><blockquote>\n<p>下方为简略图</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://hzzly.github.io/img/flex.png\" alt=\"flex\"></p>\n<p>好了，遛了遛了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"博客正式上线","url":"http://yoursite.com/2017/03/02/博客正式上线/","content":"<p>折腾了一个晚上，终于把Github Page上的博客搭起来了，有点小激动。哈哈哈，蛋定蛋定。<br>之前一直想弄一个博客来着，偶然间发现了这个基于Node的Hexo博客，还可以放到Github上，很方便。<br>你也可以试一试 (:<br>好了，不扯这么多了，此博客将记录我学习的笔记、知识，并将其中承载的价值传给他人。</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日报，杂文，所见所想</li>\n<li>撰写发布技术博客（代码支持）</li>\n<li>撰写发布学术论文</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Refuel</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span> (refuel) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.refuel = refuel</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trefuel () &#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.refuel)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Refuel(<span class=\"string\">'加油！！！'</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://hjingren.cn/publicImages/refuel.jpg\" alt=\"refuel\"></p>\n<p>好了，遛了遛了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"@font-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\nhtml.page-home {\n  height: 100%;\n  /*background-image: url('/images/bg.jpg')*/\n  background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n  background-blend-mode: screen;\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"我的作品、项目","url":"http://yoursite.com/project/index.html","content":"<!-- # 公司项目\n> * PC官网（Vue+Vue-Router） [http://www.zblmchina.com](http://hzzly.net/league/)\n> * 微信微官网（Vue+Vue-Router+Swiper） [http://www.zblmchina.com/m/](http://hzzly.net/league/m/)\n> * PC端后台管理 \n> * 微信后台管理\n\n# 外包\n\n * **中包联盟**\n 全套前端界面\n\n> * PC官网（Vue+Vue-Router） [http://www.zblmchina.com](http://hzzly.net/league/)\n> * 微信微官网（Vue+Vue-Router+Swiper） [http://www.zblmchina.com/m/](http://hzzly.net/league/m/)\n> * PC端后台管理 \n> * 微信后台管理 \n\n\n * **点匠环保工程**\n一个微信公众号的招工系统,使用了手淘的flexible移动端适配方案,jquery+vue+weui,前后端分离,各种Vue组件\n\n>[http://www.dianjiang99.com/html/user_center/user_center.html](http://www.dianjiang99.com/html/user_center/user_center.html)\n> (测试账号:15103585135 测试密码:123456)\n\n# 个人项目\n\n * **《Qu约》开源项目**\n\n>项目地址： [https://github.com/hzzly/xyy-vue](https://github.com/hzzly/xyy-vue)\n\n * **Vue音乐播放器**\n\n>项目地址： [https://github.com/hzzly/MagicMusic](https://github.com/hzzly/MagicMusic)\n\n * **小组件**\n\n>项目地址： [https://github.com/hzzly/components-vue](https://github.com/hzzly/components-vue)\n\n -->\n","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]