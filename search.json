[{"title":"征服前端面试","url":"http://yoursite.com/2017/05/31/前端面试整理/","content":"<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><blockquote>\n<p>我们创建的每一个函数，都可以有一个prototype属性，该属性指向一个对象。这个对象，就是原型。</p>\n</blockquote>\n<p>当我们在创建对象时，可以根据自己的需求，选择性的将一些属性和方法通过prototype属性，挂载在原型对象上。而每一个new出来的实例，都有一个<strong>proto</strong>属性，该属性指向构造函数的原型对象，通过这个属性，让实例对象也能够访问原型对象上的方法。因此，当所有的实例都能够通过<strong>proto</strong>访问到原型对象时，原型对象的方法与属性就变成了共有方法与属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 声明构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 通过prototye属性，将方法挂载到原型对象上</span></div><div class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'tim'</span>, <span class=\"number\">10</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'jak'</span>, <span class=\"number\">22</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1.getName === p2.getName); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/599584-2fc7dad23d112791.png\" alt=\"http://omt3u4bph.bkt.clouddn.com/599584-2fc7dad23d112791.png\"><br>通过图示我们可以看出，构造函数的prototype与所有实例对象的<strong>proto</strong>都指向原型对象。而原型对象的constructor指向构造函数。</p>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><blockquote>\n<p>我们知道所有的函数都有一个叫做toString的方法。那么这个方法到底是在哪里的呢？</p>\n</blockquote>\n<p>先随意声明一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/599584-da97dde356289ade.png\" alt=\"http://omt3u4bph.bkt.clouddn.com/599584-da97dde356289ade.png\"><br>其中foo是Function对象的实例。而Function的原型对象同时又是Object的实例。这样就构成了一条原型链。原型链的访问，其实跟作用域链有很大的相似之处，他们都是一次单向的查找过程。因此实例对象能够通过原型链，访问到处于原型链上对象的所有属性与方法。这也是foo最终能够访问到处于Object原型对象上的toString方法的原因。</p>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的。</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<ul>\n<li>第一种理解（红宝书）：是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量</li>\n<li>第二种理解（你不知道的javascript）：当函数可以记住并访问所在的词法作用域时，就产生了闭包，这个函数持有对该词法作用域的引用，这个引用就叫做闭包</li>\n<li>闭包本质还是函数，只不过这个函数绑定了上下文环境（函数内部引用的所有变量）</li>\n</ul>\n</blockquote>\n<p><strong>缺点：</strong>常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。<br><strong>作用(使用场景)：</strong>可以用来管理私有变量和私有方法，将对变量（状态）的变化封装在安全的环境中，使得这些变量不能被外部随意修改，同时又可以通过指定的函数接口来操作。<br><strong>闭包有三个特性：</strong><br>1.函数嵌套函数<br>2.函数内部可以引用外部的参数和变量<br>3.参数和变量不会被垃圾回收机制回收</p>\n<p>题外话：</p>\n<blockquote>\n<ul>\n<li>JavaScript的作用域就是词法作用域而不是动态作用域,</li>\n<li>词法作用域最重要的特征是它的定义过程发生在代码的书写阶段</li>\n<li>动态作用域的作用域链是基于调用栈的 词法作用域的作用域链是基于代码中的作用域嵌套</li>\n</ul>\n</blockquote>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><blockquote>\n<p>JavaScript的this总是指向一个对象，而具体指向哪个对象是在运行时基于函数的执行环境动态绑定的，而非函数被声明时的环境。</p>\n</blockquote>\n<p><strong>this的指向：</strong></p>\n<p>1、作为普通函数调用（this指向该对象）<br>2、作为对象的方法调用（this指向全局对象window对象）<br>3、构造器调用（this指向用new返回的这个对象）<br>4、call、apply、bind的调用（this指向第一个参数对象）</p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>1、函数作为参数传递<br>2、函数作为返回值输出</p>\n<h2 id=\"new操作符具体干了什么呢\"><a href=\"#new操作符具体干了什么呢\" class=\"headerlink\" title=\"new操作符具体干了什么呢?\"></a>new操作符具体干了什么呢?</h2><p>1、创建一个新对象<br>2、将构造函数的作用域赋给新对象（因此this就指向了这个新对象）<br>3、执行构造函数中的代码（为这个新对象添加属性）<br>4、返回新对象</p>\n<h2 id=\"null和undefined的区别？\"><a href=\"#null和undefined的区别？\" class=\"headerlink\" title=\"null和undefined的区别？\"></a>null和undefined的区别？</h2><p>1、null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。<br>2、undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。<br>3、null表示”没有对象”，即该处不应该有值。</p>\n<h2 id=\"call、apply、bind的区别\"><a href=\"#call、apply、bind的区别\" class=\"headerlink\" title=\"call、apply、bind的区别\"></a>call、apply、bind的区别</h2><ul>\n<li>三者都是用来改变函数的this对象的指向的。</li>\n<li>三者第一个参数都是this要指向的对象，也就是想指定的上下文。</li>\n<li>call 传入的参数数量不固定，第二部分参数要一个一个传，用<code>，</code>隔开。</li>\n<li>apply 接受两个参数，第二个参数为一个带下标的集合，可以为数组，也可以为类数组。</li>\n<li>bind 是返回一个改变了上下文的函数副本，便于稍后调用；apply 、call 则是立即调用 。</li>\n</ul>\n<h2 id=\"本地存储\"><a href=\"#本地存储\" class=\"headerlink\" title=\"本地存储\"></a>本地存储</h2><blockquote>\n<ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</li>\n<li>localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li>\n</ul>\n</blockquote>\n<p>具体参见：<a href=\"http://hzzly.net/2017/04/26/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8sessionStorage%E4%B8%8ElocalStorage/\" target=\"_blank\" rel=\"external\">本地存储sessionStorage与localStorage</a></p>\n<h2 id=\"cookie-和session\"><a href=\"#cookie-和session\" class=\"headerlink\" title=\"cookie 和session\"></a>cookie 和session</h2><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。每次请求一个新的页面的时候Cookie都会被发送过去，与服务器进行交互。</p>\n<h2 id=\"XML和JSON的区别？\"><a href=\"#XML和JSON的区别？\" class=\"headerlink\" title=\"XML和JSON的区别？\"></a>XML和JSON的区别？</h2><p>1、数据体积方面。<br>JSON相对于XML来讲，数据的体积小，传递的速度更快些。<br>2、数据交互方面。<br>JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。<br>3、数据描述方面。<br>JSON对数据的描述性比XML较差。<br>4、传输速度方面。<br>JSON的速度要远远快于XML。</p>\n<h2 id=\"如何实现浏览器内多个标签页之间的通信\"><a href=\"#如何实现浏览器内多个标签页之间的通信\" class=\"headerlink\" title=\"如何实现浏览器内多个标签页之间的通信?\"></a>如何实现浏览器内多个标签页之间的通信?</h2><p>调用localstorge、cookies等本地存储方式</p>\n<h2 id=\"线程与进程的区别\"><a href=\"#线程与进程的区别\" class=\"headerlink\" title=\"线程与进程的区别\"></a>线程与进程的区别</h2><p>1、一个程序至少有一个进程,一个进程至少有一个线程.<br>2、线程的划分尺度小于进程，使得多线程程序的并发性高。<br>3、进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>4、线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>5、从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p>\n<h2 id=\"渐进增强和优雅降级\"><a href=\"#渐进增强和优雅降级\" class=\"headerlink\" title=\"渐进增强和优雅降级\"></a>渐进增强和优雅降级</h2><ul>\n<li><p>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>\n</li>\n<li><p>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n</li>\n</ul>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><ul>\n<li>网页内容<ul>\n<li>减少 http请求次数</li>\n<li>减少 DNS查询次数</li>\n<li>避免页面跳转</li>\n<li>缓存 Ajax</li>\n<li>延迟加载</li>\n<li>提前加载</li>\n<li>减少 DOM元素数量</li>\n<li>避免 404</li>\n</ul>\n</li>\n<li>服务器<ul>\n<li>使用CDN(内容分发网络)</li>\n<li>添加Expires或Cache-Control报文头</li>\n<li>Gzip压缩传输文件</li>\n</ul>\n</li>\n<li>CSS<ul>\n<li>将样式表置顶</li>\n<li>用<link>代替@import</li>\n</ul>\n</li>\n<li>JavaScript<ul>\n<li>把脚本置于页面底部</li>\n<li>使用外部JavaScript和CSS</li>\n<li>精简JavaScript和CSS</li>\n<li>去除重复脚本</li>\n<li>减少DOM访问</li>\n</ul>\n</li>\n<li>图片<ul>\n<li>优化图像</li>\n<li>优化CSS Spirite</li>\n<li>不要在HTML中缩放图片</li>\n<li>favicon.ico要小而且可缓存</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何解决跨域问题\"><a href=\"#如何解决跨域问题\" class=\"headerlink\" title=\"如何解决跨域问题?\"></a>如何解决跨域问题?</h2><p>jsonp、CORS、document.domain+iframe、window.name、window.postMessage</p>\n<p>jsonp的原理是动态插入script标签</p>\n<h2 id=\"请解释一下-JavaScript-的同源策略。\"><a href=\"#请解释一下-JavaScript-的同源策略。\" class=\"headerlink\" title=\"请解释一下 JavaScript 的同源策略。\"></a>请解释一下 JavaScript 的同源策略。</h2><p>这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。</p>\n<p>指一段脚本只能读取来自同一来源的窗口和文档的属性。</p>\n<h2 id=\"哪些操作会造成内存泄漏？\"><a href=\"#哪些操作会造成内存泄漏？\" class=\"headerlink\" title=\"哪些操作会造成内存泄漏？\"></a>哪些操作会造成内存泄漏？</h2><p>1、内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>2、垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。<br>3、setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>\n<h2 id=\"Javascript垃圾回收方法\"><a href=\"#Javascript垃圾回收方法\" class=\"headerlink\" title=\"Javascript垃圾回收方法\"></a>Javascript垃圾回收方法</h2><p>1、标记清除：这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</p>\n<p>2、引用计数：引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p>\n<h2 id=\"事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？\"><a href=\"#事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？\" class=\"headerlink\" title=\"事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\"></a>事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2><p>事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件。</p>\n<p>阻止冒泡：ev.stopPropagation()</p>\n<h2 id=\"说说严格模式的限制\"><a href=\"#说说严格模式的限制\" class=\"headerlink\" title=\"说说严格模式的限制\"></a>说说严格模式的限制</h2><ul>\n<li>变量必须声明后再使用</li>\n<li>函数的参数不能有同名属性，否则报错</li>\n<li>禁止this指向全局对象</li>\n<li>不能使用with语句</li>\n<li>增加了保留字</li>\n<li>arguments不会自动反映函数参数的变化</li>\n</ul>\n<p><strong>设立”严格模式”的目的：</strong></p>\n<p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p>\n<p>消除代码运行的一些不安全之处，保证代码运行的安全；</p>\n<p>提高编译器效率，增加运行速度；</p>\n<p>为未来新版本的Javascript做好铺垫。</p>\n<h2 id=\"请解释什么是事件代理\"><a href=\"#请解释什么是事件代理\" class=\"headerlink\" title=\"请解释什么是事件代理\"></a>请解释什么是事件代理</h2><p>事件代理（Event Delegation），又称之为事件委托。即是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。使用事件代理的好处是可以提高性能。</p>\n<h2 id=\"Event-Loop、消息队列、事件轮询\"><a href=\"#Event-Loop、消息队列、事件轮询\" class=\"headerlink\" title=\"Event Loop、消息队列、事件轮询\"></a>Event Loop、消息队列、事件轮询</h2><p>异步函数在执行结束后，会在事件队列中添加一个事件（回调函数）(遵循先进先出原则)，主线程中的代码执行完毕后（即一次循环结束），下一次循环开始就在事件队列中“读取”事件，然后调用它所对应的回调函数。这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）</p>\n<p>主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码（同步任务）调用各种外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。</p>\n<p>执行栈中的代码（同步任务），总是在读取”任务队列”（异步任务）之前执行。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><blockquote>\n<p>浏览器缓存（Browser Caching）是浏览器端保存数据用于快速读取或避免重复资源请求的优化机制，有效的缓存使用可以避免重复的网络请求和浏览器快速地读取本地数据，</p>\n</blockquote>\n<ul>\n<li><p>http缓存</p>\n<blockquote>\n<p>http缓存是基于HTTP协议的浏览器文件级缓存机制。即针对文件的重复请求情况下，浏览器可以根据协议头判断从服务器端请求文件还是从本地读取文件<br>判断expires，如果未过期，直接读取http缓存文件</p>\n</blockquote>\n</li>\n<li><p>indexDB</p>\n<blockquote>\n<p>是一个在客户端存储可观数量的结构化数据,并且为这些数据添加索引进行高性能检索。</p>\n</blockquote>\n</li>\n<li><p>cookie</p>\n<blockquote>\n<p>指一般网站为了辨别用户身份、储存在用户本地终端上的数据（通常经过加密）。cookie一般通过http请求中在头部一起发送到服务器端。一条cookie记录主要由键、值、域、过期时间、大小组成，一般用户保存用户的认证信息。</p>\n</blockquote>\n</li>\n<li><p>localstorage</p>\n<blockquote>\n<p>localStorage是h5的一种新的本地缓存方案,加快下次页面打开时的渲染速度,除非主动删除数据，否则数据是永远不会过期的。</p>\n</blockquote>\n</li>\n<li><p>sessionstorage</p>\n<blockquote>\n<p>也是h5的一种本地缓存方案，数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时， 之前的存储已经被清除。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h2 id=\"ES6的了解\"><a href=\"#ES6的了解\" class=\"headerlink\" title=\"ES6的了解\"></a>ES6的了解</h2><p>es6是一个新的标准，它包含了许多新的语言特性和库，是JS最实质性的一次升级。比如’箭头函数’、’字符串模板’、’generators(生成器)’、’async/await’、’解构赋值’、’class’等等，还有就是引入module模块的概念。</p>\n<p><code>箭头函数</code>可以让this指向固定化，这种特性很有利于封装回调函数<br>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。<br>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。<br>（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。</p>\n<p><code>async/await</code>是写异步代码的新方式，以前的方法有回调函数和Promise。<br>async/await是基于Promise实现的，它不能用于普通的回调函数。<br>async/await与Promise一样，是非阻塞的。<br>async/await使得异步代码看起来像同步代码，这正是它的魔力所在。</p>\n<h2 id=\"说说你对Promise的理解\"><a href=\"#说说你对Promise的理解\" class=\"headerlink\" title=\"说说你对Promise的理解\"></a>说说你对Promise的理解</h2><blockquote>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件监听——更合理和更强大。</p>\n</blockquote>\n<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p>Promise对象有以下两个特点:</p>\n<blockquote>\n<ul>\n<li>对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）</li>\n<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</li>\n</ul>\n</blockquote>\n<h2 id=\"说说你对AMD和Commonjs的理解\"><a href=\"#说说你对AMD和Commonjs的理解\" class=\"headerlink\" title=\"说说你对AMD和Commonjs的理解\"></a>说说你对AMD和Commonjs的理解</h2><p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。</p>\n<p>AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。</p>\n<h2 id=\"Gulp、Webpack比较\"><a href=\"#Gulp、Webpack比较\" class=\"headerlink\" title=\"Gulp、Webpack比较\"></a>Gulp、Webpack比较</h2><ul>\n<li>Gulp</li>\n</ul>\n<p>1、Gulp就是为了规范前端开发流程，实现前后端分离、模块化开发、版本控制、文件合并与压缩、mock数据等功能的一个前端自动化构建工具。<br>2、Gulp就像是一个产品的流水线，整个产品从无到有，都要受流水线的控制，在流水线上我们可以对产品进行管理。<br>3、Gulp是通过task对整个开发过程进行构建。</p>\n<ul>\n<li>Webpack</li>\n</ul>\n<p>1、当下最热门的前端资源模块化管理和打包工具<br>2、可以很好的管理模块以及各个模块之间的依赖<br>3、对js、css、图片等资源文件都支持打包<br>4、有独立的配置文件webpack.config.js<br>5、可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间<br>6、可以生成优化且合并后的静态资源</p>\n<p>两大特色：1、代码可以自动完成编译。2、loader 可以处理各种类型的静态文件，并且支持串联操作</p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><h2 id=\"display-none和visibility-hidden的区别？\"><a href=\"#display-none和visibility-hidden的区别？\" class=\"headerlink\" title=\"display:none和visibility:hidden的区别？\"></a>display:none和visibility:hidden的区别？</h2><p>display:none  隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。</p>\n<p>visibility:hidden  隐藏对应的元素，但是在文档布局中仍保留原来的空间。</p>\n<h2 id=\"position-absolute和float属性的异同\"><a href=\"#position-absolute和float属性的异同\" class=\"headerlink\" title=\"position:absolute和float属性的异同\"></a>position:absolute和float属性的异同</h2><p>A：共同点：<br>对内联元素设置<code>float</code>和<code>absolute</code>属性，可以让元素脱离文档流，并且可以设置其宽高。</p>\n<p>B：不同点：<br>float仍会占据位置，position会覆盖文档流中的其他元素。</p>\n<h2 id=\"box-sizing属性\"><a href=\"#box-sizing属性\" class=\"headerlink\" title=\"box-sizing属性\"></a>box-sizing属性</h2><ul>\n<li><p>content-box：让元素维持W3C的标准盒模型。元素的宽度/高度由border + padding + content的宽度/高度决定，设置width/height属性指的是content部分的宽/高，一旦修改了元素的边框或内距，就会影响元素的盒子尺寸，就不得不重新计算元素的盒子尺寸，从而影响整个页面的布局。</p>\n</li>\n<li><p>border-box：让元素维持IE传统盒模型（IE6以下版本和IE6~7的怪异模式）。设置width/height属性指的是border + padding + content</p>\n</li>\n</ul>\n<h2 id=\"position的值\"><a href=\"#position的值\" class=\"headerlink\" title=\"position的值\"></a>position的值</h2><ul>\n<li>static  默认值。没有定位，元素出现在正常的流中</li>\n<li>relative 生成相对定位的元素，相对于其在普通流中的位置进行定位。 </li>\n<li>absolute 生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。</li>\n<li>fixed （老IE不支持）生成绝对定位的元素，相对于浏览器窗口进行定位。 </li>\n</ul>\n<h2 id=\"CSS3新特性\"><a href=\"#CSS3新特性\" class=\"headerlink\" title=\"CSS3新特性\"></a>CSS3新特性</h2><p>CSS3实现圆角（border-radius），阴影（box-shadow），<br>对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）<br>transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);//旋转,缩放,定位,倾斜<br>增加了更多的CSS选择器  多背景 rgba<br>在CSS3中唯一引入的伪元素是::selection.<br>媒体查询，多栏布局<br>border-image</p>\n<h2 id=\"CSS-sprites\"><a href=\"#CSS-sprites\" class=\"headerlink\" title=\"CSS sprites\"></a>CSS sprites</h2><ul>\n<li>CSS Sprites 其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字能精确的定位出背景图片的位置。这样可以减少很多图片请求的开销，因为请求耗时比较长；请求虽然可以并发，但是也有限制，一般浏览器都是6个。对于未来而言，就不需要这样做了，因为有了<code>http2</code>。</li>\n</ul>\n<h2 id=\"解释下浮动和它的工作原理？清除浮动的技巧\"><a href=\"#解释下浮动和它的工作原理？清除浮动的技巧\" class=\"headerlink\" title=\"解释下浮动和它的工作原理？清除浮动的技巧\"></a>解释下浮动和它的工作原理？清除浮动的技巧</h2><p>浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留。<br>1.使用空标签清除浮动。<br>   这种方法是在所有浮动标签后面添加一个空标签 定义css clear:both. 弊端就是增加了无意义标签。<br>2.使用overflow。<br>   设置overflow为hidden或者auto，给包含浮动元素的父标签添加css属性 overflow:auto; zoom:1; zoom:1用于兼容IE6。<br>3.使用after伪对象清除浮动。<br>   该方法只适用于非IE浏览器。该方法中必须为需要清除浮动元素的伪对象中设置 height:0，否则该元素会比实际高出若干像素；</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#box</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\".\"</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">visibility</span>:hidden;</div><div class=\"line\">    <span class=\"attribute\">display</span>:block;</div><div class=\"line\">    <span class=\"attribute\">clear</span>:both;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"浮动元素引起的问题\"><a href=\"#浮动元素引起的问题\" class=\"headerlink\" title=\"浮动元素引起的问题\"></a>浮动元素引起的问题</h2><p>1、父元素的高度无法被撑开，影响与父元素同级的元素<br>2、与浮动元素同级的非浮动元素（内联元素）会跟随其后<br>3、若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构</p>\n<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"说说你对语义化的理解\"><a href=\"#说说你对语义化的理解\" class=\"headerlink\" title=\"说说你对语义化的理解\"></a>说说你对语义化的理解</h2><p>1、去掉或者丢失样式的时候能够让页面呈现出清晰的结构<br>2、有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；<br>3、方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；<br>4、便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</p>\n<h2 id=\"Doctype作用-严格模式与混杂模式如何区分？它们有何意义\"><a href=\"#Doctype作用-严格模式与混杂模式如何区分？它们有何意义\" class=\"headerlink\" title=\"Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?\"></a>Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h2><p>1、<code>&lt;!DOCTYPE&gt;</code> 告知浏览器的解析器用什么文档标准解析这个文档。<br>2、严格模式的排版和 JS 运作模式是以该浏览器支持的最高标准运行。<br>3、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。<br>4、<code>&lt;!DOCTYPE&gt;</code> 不存在或格式不正确会导致文档以混杂模式呈现。 </p>\n<h2 id=\"你知道多少种Doctype文档类型？\"><a href=\"#你知道多少种Doctype文档类型？\" class=\"headerlink\" title=\"你知道多少种Doctype文档类型？\"></a>你知道多少种Doctype文档类型？</h2><p>该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 HTML 文档。<br>HTML 4.01 规定了三种文档类型：Strict、Transitional 以及 Frameset。<br>XHTML 1.0 规定了三种 XML 文档类型：Strict、Transitional 以及 Frameset。<br>Standards （标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而 Quirks（包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。</p>\n<h2 id=\"HTML与XHTML——二者有什么区别\"><a href=\"#HTML与XHTML——二者有什么区别\" class=\"headerlink\" title=\"HTML与XHTML——二者有什么区别\"></a>HTML与XHTML——二者有什么区别</h2><p>1、所有的标记都必须要有一个相应的结束标记<br>2、所有标签的元素和属性的名字都必须使用小写<br>3、所有的XML标记都必须合理嵌套<br>4、所有的属性必须用引号””括起来<br>5、把所有&lt;和&amp;特殊符号用编码表示<br>6、给所有属性赋一个值<br>7、不要在注释内容中使“–”<br>8、图片必须有说明文字</p>\n<h2 id=\"html5有哪些新特性\"><a href=\"#html5有哪些新特性\" class=\"headerlink\" title=\"html5有哪些新特性\"></a>html5有哪些新特性</h2><p>语义化更好的内容标签（header,nav,footer,aside,article,section）<br>音频、视频API(audio,video)<br>画布(Canvas) API<br>地理(Geolocation) API<br>拖拽释放(Drag and drop) API<br>本地离线存储<br>表单控件，calendar、date、time、email、url、search  </p>\n<h1 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h1><h2 id=\"HTTP请求四部分\"><a href=\"#HTTP请求四部分\" class=\"headerlink\" title=\"HTTP请求四部分\"></a>HTTP请求四部分</h2><p>1.HTTP请求的方法或动作，比如是get还是post请求；<br>2.正在请求的URL（请求的地址）；<br>3.请求头，包含一些客户端环境信息、身份验证信息等；<br>4.请求体（请求正文），可以包含客户提交的查询字符串信息、表单信息等。</p>\n<p><strong>请求头字段：</strong></p>\n<ul>\n<li>Accept:text/html,image/*(告诉服务器，浏览器可以接受文本，网页图片)</li>\n<li>Accept-Charaset:ISO-8859-1 [接受字符编码：iso-8859-1]</li>\n<li>Accept-Encoding:gzip,compress[可以接受  gzip,compress压缩后数据]</li>\n<li>Accept-Language:zh-cn[浏览器支持的语言]   </li>\n<li>Host:localhost:8080[浏览器要找的主机]</li>\n<li>If-Modified-Since:Tue, 09 May 2017 01:34:02 GMT[告诉服务器我这缓存中有这个文件,该文件的时间是…]</li>\n<li>User-Agent:Nozilla/4.0(Com…)[告诉服务器我的浏览器内核，客户端环境信]</li>\n<li>Cookie：[身份验证信息]</li>\n<li>Connection:close/Keep-Alive [保持链接，发完数据后，我不关闭链接]</li>\n</ul>\n<h2 id=\"HTTP响应三部分\"><a href=\"#HTTP响应三部分\" class=\"headerlink\" title=\"HTTP响应三部分\"></a>HTTP响应三部分</h2><p>1.一个数字和文字组成的状态码，用来显示请求是成功还是失败；<br>2.响应头，响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等；<br>3.响应体（响应正文）。</p>\n<p><strong>响应头字段：</strong></p>\n<ul>\n<li>Cache-Control:[告诉浏览器如何缓存页面(因为浏览器的兼容性最好设置两个)]</li>\n<li>Connection:close/Keep-Alive [保持链接，发完数据后，我不关闭链接]</li>\n<li>Content-Type:text/html;charset=gb2312[内容格式和编码]</li>\n<li>Last-Modified:Tue,11 Juj,2017 18 18:29:20[告诉浏览器该资源上次更新时间是多少]</li>\n<li>ETag:”540-54f0d59b8b680”</li>\n<li>Expires:Fri, 26 May 2017 13:28:33 GMT [失效日期]</li>\n<li>server:apache tomcat nginx [哪种服务器]</li>\n</ul>\n<h2 id=\"说说TCP传输的三次握手\"><a href=\"#说说TCP传输的三次握手\" class=\"headerlink\" title=\"说说TCP传输的三次握手\"></a>说说TCP传输的三次握手</h2><p>第一次握手，客户端给服务器发送数据包（<code>带SYN标志的数据包</code>）。此时服务器确认自己可以接收客户端的包，而客户端不确认服务器是否接收到了自己发的数据包。</p>\n<p>第二次握手，服务器端回复（<code>回传一个带有SYN/ACK标志的数据包以示传达确认信息</code>）客户端。此时客户端确认自己发的包被服务器收到，也确认自己可以正常接收服务器包，客户端对此次通信没有疑问了。服务器也可以确认自己能接收到客户端的包，但不能确认客户端能否接收自己发的包。</p>\n<p>第三次握手，客户端回复（<code>发送端再回传一个带ACK标志的数据包，代表“握手”结束</code>）服务器。  客户端已经没有疑问了，服务器也确认刚刚客户端收到了自己的数据包。两边都没有问题，开始通信。</p>\n<p><strong>为什么要三次握手：</strong><br>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。也防止了服务器端的一直等待而浪费资源<br>TCP作为一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率，而用三次恰恰可以满足以上两方面的需求！</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p>1、主机向服务器发送一个断开连接的请求（ 不早了，我该走了 ）,<code>发送一个FIN报文段</code>；<br>2、服务器接到请求后发送确认收到请求的信号（ 知道了 ）<code>回一个ACK报文段</code>；<br>3、服务器向主机发送断开通知（ 我也该走了 ）<code>发送FIN报文段，请求关闭连接</code>；<br>4、主机接到断开通知后断开连接并反馈一个确认信号（ 嗯，好的 ），服务器收到确认信号后也断开连接；</p>\n<h2 id=\"TCP和UDP的区别\"><a href=\"#TCP和UDP的区别\" class=\"headerlink\" title=\"TCP和UDP的区别\"></a>TCP和UDP的区别</h2><p>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来</p>\n<p>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</p>\n<h2 id=\"HTTP和HTTPS\"><a href=\"#HTTP和HTTPS\" class=\"headerlink\" title=\"HTTP和HTTPS\"></a>HTTP和HTTPS</h2><p>1、HTTP协议通常承载于TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS<br>2、默认HTTP的端口号为80，HTTPS的端口号为443</p>\n<p>HTTPS 相对于 HTTP 性能上差点，因为多了 SSL/TLS 的几次握手和加密解密的运算处理，但是加密解密的运算处理已经可以通过特有的硬件来加速处理。</p>\n<h2 id=\"什么是Etag？\"><a href=\"#什么是Etag？\" class=\"headerlink\" title=\"什么是Etag？\"></a>什么是Etag？</h2><p>浏览器下载组件的时候，会将它们存储到浏览器缓存中。如果需要再次获取相同的组件，浏览器将检查组件的缓存时间，<br>假如已经过期，那么浏览器将发送一个条件GET请求到服务器，服务器判断缓存还有效，则发送一个304响应，告诉浏览器可以重用缓存组件。</p>\n<h2 id=\"Expires和Cache-Control\"><a href=\"#Expires和Cache-Control\" class=\"headerlink\" title=\"Expires和Cache-Control\"></a>Expires和Cache-Control</h2><p>Expires 用来控制缓存的失效日期<br>Cache-Control 用来控制网页的缓存 常见的取值有private、no-cache、max-age、must-revalidate等，默认为private。</p>\n<h2 id=\"关于Http-2-0-你知道多少？\"><a href=\"#关于Http-2-0-你知道多少？\" class=\"headerlink\" title=\"关于Http 2.0 你知道多少？\"></a>关于Http 2.0 你知道多少？</h2><p>HTTP/2引入了“服务端推（server push）”的概念，它允许服务端在客户端需要数据之前就主动地将数据发送到客户端缓存中，从而提高性能。<br>HTTP/2提供更多的加密支持<br>HTTP/2使用多路技术，允许多个消息在一个连接上同时交差。<br>它增加了头压缩（header compression），因此即使非常小的请求，其请求和响应的header都只会占用很小比例的带宽。</p>\n<h2 id=\"一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？\"><a href=\"#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？\" class=\"headerlink\" title=\"一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？\"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h2><p>1、浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求（TCP三次握手）；<br>2、服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；<br>3、浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；<br>4、载入解析到的资源文件，渲染页面，完成。</p>\n<h2 id=\"浏览器的渲染过程\"><a href=\"#浏览器的渲染过程\" class=\"headerlink\" title=\"浏览器的渲染过程\"></a>浏览器的渲染过程</h2><p>1、浏览器请求到HTML代码后，在生成DOM的最开始阶段，并行发起css、图片、js的请求，无论他们是否在HEAD里。浏览器会将HTML解析成一个DOM树，DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。<br>2、CSS文件下载完成，开始构建CSSOM<br>3、所有CSS文件下载完成，CSSOM构建结束后，和 DOM 一起生成 Render Tree。<br>4、有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作就是计算出每个节点在屏幕中的位置。<br>5、最后一步，按照算出来的规则，把内容渲染到屏幕上。</p>\n<p>以上五个步骤前3个步骤因为DOM、CSSOM、Render Tree都可能在第一次Painting后又被更新多次，比如JS修改了DOM或者CSS属性。Layout 和 Painting 也会被重复执行，除了DOM、CSSOM更新的原因外，图片下载完成后也需要调用Layout 和 Painting来更新网页。</p>\n<blockquote>\n<p>display:none 的节点不会被加入 Render Tree，而 visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为 display:none 是更优的。</p>\n</blockquote>\n<h2 id=\"一个完整的URL包括以下几部分\"><a href=\"#一个完整的URL包括以下几部分\" class=\"headerlink\" title=\"一个完整的URL包括以下几部分\"></a>一个完整的URL包括以下几部分</h2><blockquote>\n<p><a href=\"http://www.hzzly.net:8080/news/index.php?boardID=5&amp;ID=24618&amp;page=1#name\" target=\"_blank\" rel=\"external\">http://www.hzzly.net:8080/news/index.php?boardID=5&amp;ID=24618&amp;page=1#name</a></p>\n</blockquote>\n<p>1、协议部分<br>2、域名部分<br>3、端口部分<br>4、虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止<br>5、文件名部分：从域名后的最后一个“/”开始到“？”为止<br>6、参数部分：从“？”开始到“#”为止之间的部分<br>7、锚部分：从“#”开始到最后</p>\n<h2 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h2><p>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在1024字节，Get是通过地址栏来传值。</p>\n<p>POST：一般用于修改服务器上的资源，对所发送的信息没有限制。（常用于发送表单数据，新建、修改等），Post是通过提交表单来传值。</p>\n<h2 id=\"常见HTTP状态码\"><a href=\"#常见HTTP状态码\" class=\"headerlink\" title=\"常见HTTP状态码\"></a>常见HTTP状态码</h2><p>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码。<br>2xx（成功）表示成功处理了请求的状态码。<br><code>200</code>（成功）：服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。<br>3xx（重定向）要完成请求，需要进一步操作。<br><code>301</code>（永久移动）：请求的网页已永久移动到新位置。<br><code>302</code>（临时移动）：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。<br><code>304</code>（未修改）：自从上次请求后，请求的网页未修改过。<br>4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理。<br><code>400</code>（错误请求）：服务器不理解请求的语法。<br><code>404</code>（未找到）：服务器找不到请求的网页。<br>5xx（服务器错误）这些状态码表示服务器在处理请求时发生内部错误。<br><code>500</code>（服务器内部错误）：服务器遇到错误，无法完成请求。<br><code>503</code>（服务不可用）：服务器目前无法使用（由于超载或停机维护）。</p>\n<h2 id=\"说说网络分层里七层模型是哪七层\"><a href=\"#说说网络分层里七层模型是哪七层\" class=\"headerlink\" title=\"说说网络分层里七层模型是哪七层\"></a>说说网络分层里七层模型是哪七层</h2><p>应用层、表示层、会话层（从上往下）（HTTP、FTP、SMTP、DNS）</p>\n<p>传输层（TCP和UDP）</p>\n<p>网络层（IP）</p>\n<p>物理和数据链路层（以太网）</p>\n<h2 id=\"讲讲304缓存的原理\"><a href=\"#讲讲304缓存的原理\" class=\"headerlink\" title=\"讲讲304缓存的原理\"></a>讲讲304缓存的原理</h2><p>服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。</p>\n<p>304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件</p>\n<h2 id=\"http-keep-alive与tcp-keep-alive\"><a href=\"#http-keep-alive与tcp-keep-alive\" class=\"headerlink\" title=\"http keep-alive与tcp keep-alive\"></a>http keep-alive与tcp keep-alive</h2><p>http keep-alive是为了让tcp活得更久一点，以便在同一个连接上传送多个http，提高socket的效率。而tcp keep-alive是TCP的一种检测TCP连接状况的保鲜机制。</p>\n<h2 id=\"常见web安全及防护原理\"><a href=\"#常见web安全及防护原理\" class=\"headerlink\" title=\"常见web安全及防护原理\"></a>常见web安全及防护原理</h2><ul>\n<li>sql注入原理<br>  就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</li>\n<li>XSS<br>  指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。</li>\n<li>CSRF<br>  CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次CSRF攻击，受害者必须依次完成两个步骤：1、登录受信任网站A，并在本地生成Cookie。2、在不登出A的情况下，访问危险网站B。</li>\n</ul>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><blockquote>\n<p>建一个空对象和空数组，循环遍历需要去重的数组，判断对象有没有此属性，没有的话就给对象添加此属性，并向空数组中push这个值。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es5</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> result = []</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!obj[arr[i]])&#123;</div><div class=\"line\">\t\t\tobj[arr[i]] = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\tresult.push(arr[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\">[...new <span class=\"built_in\">Set</span>(arr)]</div></pre></td></tr></table></figure>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><blockquote>\n<p>相邻两个对比，最后把最大的排到了最后，重复此过程。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;        <span class=\"comment\">//相邻元素两两对比</span></div><div class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j+<span class=\"number\">1</span>];        <span class=\"comment\">//元素交换</span></div><div class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</div><div class=\"line\">                arr[j] = temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><blockquote>\n<p>寻找最小的数，保存索引，然后与第一层循环其下标对于的值进行交换</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> minIndex, temp;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">        minIndex = i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class=\"comment\">//寻找最小的数</span></div><div class=\"line\">                minIndex = j;                 <span class=\"comment\">//将最小数的索引保存</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        temp = arr[i];</div><div class=\"line\">        arr[i] = arr[minIndex];</div><div class=\"line\">        arr[minIndex] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><blockquote>\n<p>选取一个记录作为中间轴，然后将比‘这个记录值’小的移到‘记录值’之前，大的移到之后，然后递归</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(arr.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [];    <span class=\"comment\">// 返回空数组</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> cIndex = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> c = arr.splice(cIndex, <span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = [];</div><div class=\"line\">\t<span class=\"keyword\">var</span> r = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(arr[i] &lt; c) &#123;</div><div class=\"line\">\t\t\tl.push(arr[i]);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tr.push(arr[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> quickSort(l).concat(c, quickSort(r));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><h2 id=\"对前端界面工程师这个职位是怎么样理解的\"><a href=\"#对前端界面工程师这个职位是怎么样理解的\" class=\"headerlink\" title=\"对前端界面工程师这个职位是怎么样理解的\"></a>对前端界面工程师这个职位是怎么样理解的</h2><p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好<br>1、实现界面交互<br>2、提升用户体验</p>\n<h2 id=\"谈谈你对重构的理解\"><a href=\"#谈谈你对重构的理解\" class=\"headerlink\" title=\"谈谈你对重构的理解\"></a>谈谈你对重构的理解</h2><p>在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。</p>\n<p>减少代码间的耦合<br>让代码保持弹性<br>严格按规范编写代码<br>设计可扩展的API<br>代替旧有的框架、语言(如VB)<br>增强用户体验<br>通常来说对于速度的优化也包含在重构中</p>\n<h2 id=\"你遇到过比较难的技术问题是？你是如何解决的？\"><a href=\"#你遇到过比较难的技术问题是？你是如何解决的？\" class=\"headerlink\" title=\"你遇到过比较难的技术问题是？你是如何解决的？\"></a>你遇到过比较难的技术问题是？你是如何解决的？</h2><h2 id=\"平时是如何学习前端开发的？\"><a href=\"#平时是如何学习前端开发的？\" class=\"headerlink\" title=\"平时是如何学习前端开发的？\"></a>平时是如何学习前端开发的？</h2><h2 id=\"平时如何管理你的项目？\"><a href=\"#平时如何管理你的项目？\" class=\"headerlink\" title=\"平时如何管理你的项目？\"></a>平时如何管理你的项目？</h2><p>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；</p>\n<p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p>\n<p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p>\n<p>页面进行标注（例如 页面 模块 开始和结束）；</p>\n<p>CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；</p>\n<p>JS 分文件夹存放 命名以该JS功能为准的英文翻译。</p>\n<p>图片采用整合的 images.png png8 格式文件使用尽量整合在一起使用方便将来的管理 </p>\n<h2 id=\"说说最近最流行的一些东西吧？常去哪些网站？\"><a href=\"#说说最近最流行的一些东西吧？常去哪些网站？\" class=\"headerlink\" title=\"说说最近最流行的一些东西吧？常去哪些网站？\"></a>说说最近最流行的一些东西吧？常去哪些网站？</h2><p>Node.js、Mongodb、npm、MVVM、MEAN、three.js、React、Vue、WebGL<br>网站：掘金、segmentfault、Github、w3cplus、前端圈、知乎等</p>\n","categories":[],"tags":["随笔","面试"]},{"title":"HTML5图片上传、预览","url":"http://yoursite.com/2017/05/23/HTML5图片上传、预览/","content":"<h2 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h2><blockquote>\n<ul>\n<li>File - 独立文件；提供只读信息，例如名称、文件大小、mimetype 和对文件句柄的引用。</li>\n<li>FileList - File 对象的类数组序列（考虑多文件上传或者从桌面拖动目录或文件）。</li>\n<li>Blob - 可将文件分割为字节范围。</li>\n<li>FileReader - 读取File或Blob</li>\n<li>URL scheme</li>\n</ul>\n</blockquote>\n<h2 id=\"检测浏览器是否支持\"><a href=\"#检测浏览器是否支持\" class=\"headerlink\" title=\"检测浏览器是否支持\"></a>检测浏览器是否支持</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 检测是否支持File API</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.File &amp;&amp; <span class=\"built_in\">window</span>.FileReader &amp;&amp; <span class=\"built_in\">window</span>.FileList &amp;&amp; <span class=\"built_in\">window</span>.Blob) &#123;</div><div class=\"line\">\t<span class=\"comment\">//  支持</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\talert(<span class=\"string\">'不支持'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"选取一张图片，并预览\"><a href=\"#选取一张图片，并预览\" class=\"headerlink\" title=\"选取一张图片，并预览\"></a>选取一张图片，并预览</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img_input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"img_input\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"preview_box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">.preview_box img &#123;</div><div class=\"line\">\twidth: 200px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#img_input\"</span>).on(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">let</span> file = e.target.files[<span class=\"number\">0</span>]; <span class=\"comment\">//获取图片资源</span></div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">// 只选择图片文件</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!file.type.match(<span class=\"string\">'image.*'</span>)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">\treader.readAsDataURL(file); <span class=\"comment\">// 读取文件</span></div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">// 渲染文件</span></div><div class=\"line\">\treader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">let</span> img = <span class=\"string\">'&lt;img class=\"preview\" src=\"'</span> + arg.target.result + <span class=\"string\">'\" alt=\"preview\"/&gt;'</span>;</div><div class=\"line\">\t\t$(<span class=\"string\">\".preview_box\"</span>).empty().append(img);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上传到服务器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> form_data = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\"><span class=\"keyword\">let</span> file_data = $(<span class=\"string\">\"#img_input\"</span>).prop(<span class=\"string\">\"files\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 把上传的数据放入form_data</span></div><div class=\"line\">form_data.append(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"hzzly\"</span>);</div><div class=\"line\">form_data.append(<span class=\"string\">\"img\"</span>, file_data);</div><div class=\"line\"> </div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">\"POST\"</span>, <span class=\"comment\">// 上传文件要用POST</span></div><div class=\"line\">    url: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">dataType</span> : <span class=\"string\">\"json\"</span>,</div><div class=\"line\">    <span class=\"attr\">crossDomain</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果用到跨域，需要后台开启CORS</span></div><div class=\"line\">  \tprocessData: <span class=\"literal\">false</span>,  <span class=\"comment\">// 注意：不要 process data</span></div><div class=\"line\">  \tcontentType: <span class=\"literal\">false</span>,  <span class=\"comment\">// 注意：不设置 contentType</span></div><div class=\"line\">    data: form_data</div><div class=\"line\">&#125;).success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(msg);</div><div class=\"line\">&#125;).fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(msg);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"拖拽上传\"><a href=\"#拖拽上传\" class=\"headerlink\" title=\"拖拽上传\"></a>拖拽上传</h2><p>三个相关事件：</p>\n<blockquote>\n<ul>\n<li>dragenter</li>\n<li>dragover</li>\n<li>drop</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"drop_zone\"</span>&gt;</span>Drop files here<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 必须阻止dragenter和dragover事件的默认行为，这样才能触发 drop 事件</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileSelect</span>(<span class=\"params\">evt</span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\tevt.stopPropagation();</div><div class=\"line\">\tevt.preventDefault();</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">let</span> files = evt.dataTransfer.files; <span class=\"comment\">// 文件对象</span></div><div class=\"line\">\t<span class=\"keyword\">let</span> output = [];</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">// 处理多文件</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, f; f = files[i]; i++) &#123;</div><div class=\"line\">\t\toutput.push(<span class=\"string\">'&lt;li&gt;&lt;strong&gt;'</span>, <span class=\"built_in\">escape</span>(f.name), <span class=\"string\">'&lt;/strong&gt; ('</span>, f.type || <span class=\"string\">'n/a'</span>, <span class=\"string\">') - '</span>,f.size, <span class=\"string\">' bytes, last modified: '</span>,f.lastModifiedDate.toLocaleDateString(), <span class=\"string\">'&lt;/li&gt;'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 显示文件信息</span></div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>).innerHTML = output.join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragOver</span>(<span class=\"params\">evt</span>) </span>&#123;</div><div class=\"line\">\tevt.stopPropagation();</div><div class=\"line\">\tevt.preventDefault();</div><div class=\"line\">\tevt.dataTransfer.dropEffect = <span class=\"string\">'copy'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 监听器</span></div><div class=\"line\"><span class=\"keyword\">let</span> dropZone = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'drop_zone'</span>);</div><div class=\"line\">dropZone.addEventListener(<span class=\"string\">'dragover'</span>, dragOver, <span class=\"literal\">false</span>);</div><div class=\"line\">dropZone.addEventListener(<span class=\"string\">'drop'</span>, fileSelect, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"美化上传框\"><a href=\"#美化上传框\" class=\"headerlink\" title=\"美化上传框\"></a>美化上传框</h2><blockquote>\n<p>方法一： 在隐藏的文件输入框上调用click()方法</p>\n</blockquote>\n<p>隐藏掉默认的的文件输入框<code>&lt;input&gt;</code>元素，使用自定义的界面来充当打开文件选择对话框的按钮。要使用样式display:none把原本的文件输入框隐藏掉，然后在需要的时候调用它的click()方法就行了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileElem\"</span> <span class=\"attr\">multiple</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display：none\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"handleFiles(this.files)\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileSelect\"</span>&gt;</span>选择文件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> fileSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"fileSelect\"</span>),</div><div class=\"line\">\tfileElem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"fileElem\"</span>);</div><div class=\"line\"> </div><div class=\"line\">fileSelect.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fileElem) &#123;</div><div class=\"line\">\t\tfileElem.click();  <span class=\"comment\">// jQuery可以使用 trigger()</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\te.preventDefault(); <span class=\"comment\">// prevent navigation to \"#\"</span></div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>方法二：用label</p>\n</blockquote>\n<p>隐藏input，把样式写到label上，点击label就是对input进行操作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img_input2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"img_input2\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img_label2\"</span>&gt;</span>选择文件</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-plus fa-lg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"preview_box2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">#img_input2 &#123;</div><div class=\"line\">\tdisplay: none;</div><div class=\"line\">&#125;</div><div class=\"line\">#img_label2 &#123;</div><div class=\"line\">\tbackground-color: #f2d547;</div><div class=\"line\">\tborder-radius: 5px;</div><div class=\"line\">\tdisplay: inline-block;</div><div class=\"line\">\tpadding: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\">#preview_box2 img &#123;</div><div class=\"line\">\twidth: 200px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#img_input2\"</span>).on(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">let</span> file = e.target.files[<span class=\"number\">0</span>]; <span class=\"comment\">//获取图片资源</span></div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">// 只选择图片文件</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!file.type.match(<span class=\"string\">'image.*'</span>)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">\treader.readAsDataURL(file); <span class=\"comment\">// 读取文件</span></div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">// 渲染文件</span></div><div class=\"line\">\treader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t\t<span class=\"keyword\">let</span> img = <span class=\"string\">'&lt;img class=\"preview\" src=\"'</span> + arg.target.result + <span class=\"string\">'\" alt=\"preview\"/&gt;'</span>;</div><div class=\"line\">\t\t$(<span class=\"string\">\"#preview_box2\"</span>).empty().append(img);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"使用Base64的方式-实现本地预览\"><a href=\"#使用Base64的方式-实现本地预览\" class=\"headerlink\" title=\"使用Base64的方式,实现本地预览\"></a>使用Base64的方式,实现本地预览</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.FileReader) &#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> oFileReader = <span class=\"keyword\">new</span> FileReader(),</div><div class=\"line\">\toFile = e.target.files[<span class=\"number\">0</span>];</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"regexp\">/^image*/</span>.test(oFile.type)) &#123;</div><div class=\"line\">\t\toFileReader.onloadend = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">let</span> binfo64 = e.target.result;</div><div class=\"line\">\t\t\t<span class=\"keyword\">let</span> postinfo = &#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">image</span>: binfo64,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">filename</span>: <span class=\"string\">`passport-<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()&#125;</span>`</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">    \t&#125;;</div><div class=\"line\">\t\toFileReader.readAsDataURL(oFile);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\talert(<span class=\"string\">'传入图片文件'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用Ajax上传图片信息，并显示图片上传的进度\"><a href=\"#使用Ajax上传图片信息，并显示图片上传的进度\" class=\"headerlink\" title=\"使用Ajax上传图片信息，并显示图片上传的进度\"></a>使用Ajax上传图片信息，并显示图片上传的进度</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileupload-form\"</span>&gt;</span>    </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileupload\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> &gt;</span>   </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绑定了`submit`事件。    </span></div><div class=\"line\">   $(<span class=\"string\">'#fileupload-form'</span>).on(<span class=\"string\">'submit'</span>,(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">       e.preventDefault();</div><div class=\"line\">       <span class=\"comment\">//序列化表单   </span></div><div class=\"line\">      <span class=\"keyword\">var</span> serializeData = $(<span class=\"keyword\">this</span>).serialize();</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">// var formData = new FormData(this);</span></div><div class=\"line\">      $(<span class=\"keyword\">this</span>).ajaxSubmit(&#123;</div><div class=\"line\">           <span class=\"attr\">type</span>:<span class=\"string\">'POST'</span>,</div><div class=\"line\">           <span class=\"attr\">url</span>: *yoururl*,</div><div class=\"line\">           <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span>, </div><div class=\"line\">           <span class=\"attr\">data</span>: serializeData,            </div><div class=\"line\">           <span class=\"comment\">// data: formData,</span></div><div class=\"line\">           </div><div class=\"line\">           <span class=\"comment\">//attention!!!   </span></div><div class=\"line\">           contentType: <span class=\"literal\">false</span>,      </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,             </div><div class=\"line\">           <span class=\"attr\">processData</span>:<span class=\"literal\">false</span>,      </div><div class=\"line\">             </div><div class=\"line\">           <span class=\"attr\">beforeSubmit</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                   <span class=\"comment\">//上传图片之前的处理   </span></div><div class=\"line\">           &#125;,</div><div class=\"line\">           <span class=\"attr\">uploadProgress</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, position, total, percentComplete</span>)</span>&#123; </div><div class=\"line\">               <span class=\"comment\">//在这里控制进度条   </span></div><div class=\"line\">           &#125;,</div><div class=\"line\">           <span class=\"attr\">success</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">               </div><div class=\"line\">           &#125;,</div><div class=\"line\">           <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">               alert(<span class=\"string\">'上传图片出错'</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">   &#125;));</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//绑定文件选择事件，一选择了图片，就让`form`提交。   </span></div><div class=\"line\"> </div><div class=\"line\">   $(<span class=\"string\">\"#fileupload\"</span>).on(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       $(<span class=\"keyword\">this</span>).parent().submit();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>说明：<br>1.使用.serialize()获取表单的数据，不同通过val和text获取值<br>2.ajax上传图片这三个参数必须配置contentType: false, cache: false, processData:false<br>3.该处使用了uploadProgress 来获取文件上传的进度（本人没实验，待测）</p>\n</blockquote>\n","categories":[],"tags":["随笔","html5"]},{"title":"Fetch学习笔记","url":"http://yoursite.com/2017/05/20/Fetch学习笔记/","content":"<blockquote>\n<p>前言: 前几天面试问到 Ajax和Fetch的区别，因为以前也用过这两个东西，所以也没难倒我，现在回头整理一遍。</p>\n</blockquote>\n<h1 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h1><blockquote>\n<p>与XMLHttpRequest(XHR)类似，fetch()方法允许你发出AJAX请求。区别在于Fetch API使用Promise，因此是一种简洁明了的API，比XMLHttpRequest更加简单易用。</p>\n</blockquote>\n<p>如果还不了解<code>Promise</code>，可以移步👉<a href=\"https://hzzly.github.io/2017/03/25/%E6%B5%85%E8%B0%88Promise/\" target=\"_blank\" rel=\"external\">浅谈Promise</a>这篇博客</p>\n<h2 id=\"比较XMLHttpRequest（传统Ajax）\"><a href=\"#比较XMLHttpRequest（传统Ajax）\" class=\"headerlink\" title=\"比较XMLHttpRequest（传统Ajax）\"></a>比较XMLHttpRequest（传统Ajax）</h2><p>创建步骤：</p>\n<blockquote>\n<ul>\n<li>创建<code>XMLHttpRequest</code>对象，也就是创建一个异步调用对象</li>\n<li>创建一个新的<code>HTTP</code>请求，并指定该<code>HTTP</code>请求的方法、<code>URL</code>及验证信息</li>\n<li>发送<code>HTTP</code>请求</li>\n<li>处理响应，获取异步调用返回的数据</li>\n</ul>\n</blockquote>\n<p>可以发现，主要的不同点在于：传统Ajax使用事件处理器，而不是Promise对象，并且请求的发起完全依赖于xhr对象所提供的方法。</p>\n<p>想详细了解 Ajax的封装可以查看我上一篇博客，一步步教你 Ajax的封装👉<a href=\"https://hzzly.github.io/2017/05/17/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"external\">Ajax学习笔记</a></p>\n<h2 id=\"fetch语法\"><a href=\"#fetch语法\" class=\"headerlink\" title=\"fetch语法\"></a>fetch语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(url)</div><div class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> response.json();</div><div class=\"line\">\t&#125;)</div><div class=\"line\">\t.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">\t&#125;)</div><div class=\"line\">\t.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>);</div><div class=\"line\">\t&#125;);</div></pre></td></tr></table></figure>\n<p>使用 ES6 的 <code>箭头函数</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(url)</div><div class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</div><div class=\"line\">\t.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</div></pre></td></tr></table></figure></p>\n<p>使用 <code>async/await</code> 来做最终优化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(url);</div><div class=\"line\">\t\t<span class=\"keyword\">let</span> data = response.json();</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>使用 await 后，<strong>写异步代码就像写同步代码一样爽</strong>。await 后面可以跟 Promise 对象，表示等待 Promise resolve() 才会继续向下执行，如果 Promise 被 reject() 或抛出异常则会被外面的 try…catch 捕获。</p>\n<p>如果还不了解<code>async/await</code>，可以移步👉<a href=\"https://hzzly.github.io/2017/05/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Async%E5%87%BD%E6%95%B0/\" target=\"_blank\" rel=\"external\">es6Async</a>这篇博客</p>\n<h2 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(url, &#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"GET\"</span>, <span class=\"comment\">//默认</span></div><div class=\"line\">    headers:&#123;</div><div class=\"line\">    \t<span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json, text/plain, */*\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</div></pre></td></tr></table></figure>\n<h2 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(url, &#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">    \t<span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json, text/plain, */*\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Content-type\"</span>:<span class=\"string\">\"application:/x-www-form-urlencoded; charset=UTF-8\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">\"name=hzzly&amp;age=22\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</div></pre></td></tr></table></figure>\n<h2 id=\"使用Fetch请求发送凭证\"><a href=\"#使用Fetch请求发送凭证\" class=\"headerlink\" title=\"使用Fetch请求发送凭证\"></a>使用Fetch请求发送凭证</h2><blockquote>\n<p>要使用Fetch发送带有诸如cookie之类的凭证的请求。你可以在选项对象中将credentials属性值设置为“include”：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(url,&#123;</div><div class=\"line\">\t<span class=\"attr\">credentials</span>: <span class=\"string\">\"include\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"封装POST请求\"><a href=\"#封装POST请求\" class=\"headerlink\" title=\"封装POST请求\"></a>封装POST请求</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//将对象拼接成 name=hzzly&amp;age=22 的字符串形式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">params</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> result = <span class=\"string\">''</span></div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">\t\tresult += <span class=\"string\">`&amp;<span class=\"subst\">$&#123;item&#125;</span>=<span class=\"subst\">$&#123;obj[item]&#125;</span>`</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(result) &#123;</div><div class=\"line\">\t\tresult = result.slice(<span class=\"number\">1</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">url, paramsObj</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> result = fetch(url, &#123;</div><div class=\"line\">\t\t<span class=\"attr\">methods</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">credentials</span>: <span class=\"string\">\"include\"</span></div><div class=\"line\">\t\theaders: &#123;</div><div class=\"line\">\t    \t<span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json, text/plain, */*\"</span>,</div><div class=\"line\">\t        <span class=\"string\">\"Content-type\"</span>:<span class=\"string\">\"application:/x-www-form-urlencoded; charset=UTF-8\"</span></div><div class=\"line\">\t    &#125;,</div><div class=\"line\">\t    <span class=\"attr\">body</span>: params(paramsObj)</div><div class=\"line\">\t&#125;)</div><div class=\"line\">\t<span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'hzzly'</span>,</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">22</span></div><div class=\"line\">&#125;</div><div class=\"line\">post(url, obj)</div><div class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</div><div class=\"line\">\t.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Oops, error\"</span>, e))</div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","JavaScript","Fetch"]},{"title":"Ajax学习笔记","url":"http://yoursite.com/2017/05/17/Ajax学习笔记/","content":"<blockquote>\n<p>在上一个外包项目中，因为用到了前后端分离的思路，所以都要通过Ajax来请求数据然后把数据渲染到页面上，一开始想过直接引用Jquery，但感觉就使用Jquery的Ajax函数，有点太浪费，所以就自己撸了一个Ajax函数。本文由浅入深，一步一步带你封装属于自己的Ajax库。</p>\n</blockquote>\n<h2 id=\"Ajax简介\"><a href=\"#Ajax简介\" class=\"headerlink\" title=\"Ajax简介\"></a>Ajax简介</h2><blockquote>\n<ul>\n<li>Asynchronous Javascript And XML （异步的JavaScript和XML）</li>\n<li>它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</li>\n<li>Ajax是一种用于创建快速动态网页的技术。在前台与后台进行数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，实现局部更新。</li>\n</ul>\n</blockquote>\n<h3 id=\"1、优点\"><a href=\"#1、优点\" class=\"headerlink\" title=\"1、优点\"></a>1、优点</h3><blockquote>\n<ul>\n<li>页面无刷新，用户体验好。</li>\n<li>异步通信，更加快的响应能力。</li>\n<li>减少冗余请求，减轻了服务器负担。</li>\n<li>基于标准化的并被广泛支持的技术</li>\n</ul>\n</blockquote>\n<h3 id=\"2、应用场景\"><a href=\"#2、应用场景\" class=\"headerlink\" title=\"2、应用场景\"></a>2、应用场景</h3><blockquote>\n<ul>\n<li>场景 1. 数据验证</li>\n<li>场景 2. 按需取数据</li>\n<li>场景 3. 自动更新页面</li>\n<li>…</li>\n</ul>\n</blockquote>\n<p>说了这么多，接下来来点干货。</p>\n<h2 id=\"创建ajax的步骤\"><a href=\"#创建ajax的步骤\" class=\"headerlink\" title=\"创建ajax的步骤\"></a>创建ajax的步骤</h2><blockquote>\n<p>Ajax的原理简单来说通过<code>XMLHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。原生创建ajax可分为以下四步</p>\n</blockquote>\n<h3 id=\"1、创建XMLHttpRequest对象\"><a href=\"#1、创建XMLHttpRequest对象\" class=\"headerlink\" title=\"1、创建XMLHttpRequest对象\"></a>1、创建XMLHttpRequest对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRequest</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        <span class=\"comment\">//IE6以上</span></div><div class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> xhr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2、准备请求\"><a href=\"#2、准备请求\" class=\"headerlink\" title=\"2、准备请求\"></a>2、准备请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(method,url,<span class=\"keyword\">async</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>第一个参数表示请求类型的字符串，其值可以是<code>GET</code>或者<code>POST</code><br><code>GET</code>请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,demo.php?name=hzzly&amp;age=<span class=\"number\">21</span>,<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<p><code>POST</code>请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>,demo.php,<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二个参数是要作为请求发送目标的URL。</p>\n</li>\n<li>第三个参数是true或false，表示请求是以异步还是同步的模式发出。（默认为true，一般不建议为false）</li>\n</ul>\n<h3 id=\"3、发送请求\"><a href=\"#3、发送请求\" class=\"headerlink\" title=\"3、发送请求\"></a>3、发送请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>GET</code>请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(<span class=\"string\">\"GET\"</span>,demo.php?name=hzzly&amp;age=<span class=\"number\">21</span>,<span class=\"literal\">true</span>);</div><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>POST</code>请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>,demo.php,<span class=\"literal\">true</span>);</div><div class=\"line\">xhr.setRequestHeder(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span>);</div><div class=\"line\">xhr.send(param)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4、处理响应\"><a href=\"#4、处理响应\" class=\"headerlink\" title=\"4、处理响应\"></a>4、处理响应</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(xhr.responseText);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>onreadystatechange</code>：当处理过程发生变化的时候执行下面的函数</li>\n<li><code>readyState</code>：ajax处理过程<ul>\n<li>0：请求未初始化（还没有调用 <code>open()</code>）</li>\n<li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）</li>\n<li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）</li>\n<li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成</li>\n<li>4：响应已完成；您可以获取并使用服务器的响应了</li>\n</ul>\n</li>\n<li><code>status</code>属性:<ul>\n<li>200: “OK”</li>\n<li>404: 未找到页面</li>\n</ul>\n</li>\n<li><code>responseText</code>：获得字符串形式的响应数据，可以用<code>JSON.parse(xhr.responseText)</code>转化为<code>JSON</code>对象</li>\n</ul>\n</blockquote>\n<h2 id=\"封装例子\"><a href=\"#封装例子\" class=\"headerlink\" title=\"封装例子\"></a>封装例子</h2><blockquote>\n<p>1.get请求函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 一个简单的get请求</div><div class=\"line\"> * @param &#123;String&#125;   url     请求地址,文件名</div><div class=\"line\"> * @param &#123;Function&#125; fnSucc  请求成功时执行的函数</div><div class=\"line\"> * @param &#123;Function&#125; fnFaild 请求失败执行的函数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Get</span>(<span class=\"params\">url, fnSucc, fnFaild</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建ajax对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined.</div><div class=\"line\">         * 进入else若直接使用XMLHttpRequest在不支持的情况下会报错</div><div class=\"line\">         **/</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        <span class=\"comment\">//IE6以上</span></div><div class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//2.连接服务器</span></div><div class=\"line\">    <span class=\"comment\">//open(方法,url,是否异步)</span></div><div class=\"line\">    xhr.open(<span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//3.发送请求</span></div><div class=\"line\">    xhr.send();</div><div class=\"line\">    <span class=\"comment\">//4.接收返回</span></div><div class=\"line\">    <span class=\"comment\">//OnRedayStateChange事件</span></div><div class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (xhr.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//alert(\"成功\" + xhr.responseText);</span></div><div class=\"line\">                fnSucc(xhr.responseText);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//alert(\"服务器响应失败!\");</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (fnFaild) &#123;</div><div class=\"line\">                    fnFaild();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2.get与post结合的请求函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * AJAX函数封装</div><div class=\"line\"> * @param &#123;string&#125; url     请求地址（必须）</div><div class=\"line\"> * @param &#123;object&#125; options 发送请求的选项参数</div><div class=\"line\"> *   @config &#123;string&#125; [options.type] 请求发送的类型。默认为GET。</div><div class=\"line\"> *   @config &#123;Object&#125; [options.data] 需要发送的数据。</div><div class=\"line\"> *   @config &#123;Function&#125; [options.onsuccess] 请求成功时触发。（必须）</div><div class=\"line\"> *   @config &#123;Function&#125; [options.onfail] 请求失败时触发。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AJAX</span>(<span class=\"params\">url, options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建ajax对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined,进入else</div><div class=\"line\">         * 若直接使用XMLHttpRequest,在不支持的情况下会报错</div><div class=\"line\">         **/</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        <span class=\"comment\">//IE6以上</span></div><div class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//2.连接服务器</span></div><div class=\"line\">    <span class=\"comment\">//open(方法,url,是否异步)</span></div><div class=\"line\">    <span class=\"keyword\">var</span> param = <span class=\"string\">\"\"</span>; <span class=\"comment\">//请求参数。</span></div><div class=\"line\">    <span class=\"comment\">//只有data存在，且为对象使才执行</span></div><div class=\"line\">    <span class=\"keyword\">var</span> data = options.data ? options.data : <span class=\"number\">-1</span>; <span class=\"comment\">//缓存data</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (data) === <span class=\"string\">\"object\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data) &#123; <span class=\"comment\">//请求参数拼接</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(key)) &#123;</div><div class=\"line\">                param += <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;data[key]&#125;</span>&amp;`</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        param.replace(<span class=\"regexp\">/&amp;$/</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        param = <span class=\"string\">\"timestamp=\"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//3.发送请求</span></div><div class=\"line\">    <span class=\"keyword\">var</span> type = options.type ? options.type.toUpperCase() : <span class=\"string\">\"GET\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"GET\"</span>) &#123;</div><div class=\"line\">        xhr.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;param&#125;</span>`</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">        xhr.send();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        xhr.open(<span class=\"string\">\"POST\"</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\">        xhr.setRequestHeder(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span>);</div><div class=\"line\">        xhr.send(param);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//4.接收返回</span></div><div class=\"line\">    <span class=\"comment\">//OnRedayStateChange事件</span></div><div class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (xhr.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//请求成功。形参为获取到的字符串形式的响应数据</span></div><div class=\"line\">                options.onsuccess(xhr.responseText);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//先判断是否存在请求失败函数</span></div><div class=\"line\">                <span class=\"comment\">//存在时，形参为XMLHttpRequest对象，便于进行错误进行处理</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (options.onfail) &#123;</div><div class=\"line\">                    options.onfail(xhr);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","JavaScript"]},{"title":"读书笔记-es6编程风格","url":"http://yoursite.com/2017/05/15/读书笔记-es6编程风格/","content":"<h1 id=\"编程风格\"><a href=\"#编程风格\" class=\"headerlink\" title=\"编程风格\"></a><strong>编程风格</strong></h1><h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><blockquote>\n<ul>\n<li>let 取代 var</li>\n</ul>\n</blockquote>\n<p>ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。</p>\n<blockquote>\n<ul>\n<li>全局常量和线程安全</li>\n</ul>\n</blockquote>\n<p>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">// best</span></div><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div></pre></td></tr></table></figure></p>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6let%E4%B8%8Econst/\" target=\"_blank\" rel=\"external\">let与const</a></p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><blockquote>\n<ul>\n<li>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">\"foobar\"</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">'foo'</span> + a + <span class=\"string\">'bar'</span>;</div><div class=\"line\"><span class=\"comment\">// acceptable</span></div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">`foobar`</span>;</div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'foobar'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">`foo<span class=\"subst\">$&#123;a&#125;</span>bar`</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">'foobar'</span>;</div></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/04/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/\" target=\"_blank\" rel=\"external\">字符串的扩展</a></p>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><blockquote>\n<ul>\n<li>使用数组成员对变量赋值时，优先使用解构赋值。</li>\n<li>函数的参数如果是对象的成员，优先使用解构赋值。</li>\n<li>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [first, second] = arr;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123; &#125;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/04/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/\" target=\"_blank\" rel=\"external\">解构赋值</a></p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><blockquote>\n<ul>\n<li>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">k1</span>: v1, <span class=\"attr\">k2</span>: v2 &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> b = &#123;</div><div class=\"line\">  <span class=\"attr\">k1</span>: v1,</div><div class=\"line\">  <span class=\"attr\">k2</span>: v2,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ref = <span class=\"string\">'some value'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> atom = &#123;</div><div class=\"line\">  ref,</div><div class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">1</span>,</div><div class=\"line\">  addValue(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> atom.value + value;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/\" target=\"_blank\" rel=\"external\">对象的扩展</a></p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<ul>\n<li>使用扩展运算符（…）拷贝数组。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>使用Array.from方法，将类似数组的对象转为数组。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.foo'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> nodes = <span class=\"built_in\">Array</span>.from(foo);</div><div class=\"line\"><span class=\"comment\">//或者扩展运算符(...)</span></div><div class=\"line\"><span class=\"keyword\">const</span> nodes = [...foo];</div></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/\" target=\"_blank\" rel=\"external\">数组的扩展</a></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote>\n<ul>\n<li>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。</li>\n<li>使用rest运算符（…）代替参数</li>\n<li>使用默认值语法设置函数参数的默认值。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">concatenateAll</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> args.join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleThings</span>(<span class=\"params\">opts = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/\" target=\"_blank\" rel=\"external\">函数的扩展</a></p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><blockquote>\n<ul>\n<li>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。</li>\n<li>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(contents = []) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  getA() &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>()</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  getB() &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Class/\" target=\"_blank\" rel=\"external\">Class</a></p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><blockquote>\n<ul>\n<li>使用import取代require。</li>\n<li>使用export取代module.exports。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; func1, func2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'moduleA'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>了解更多👉：<a href=\"https://hzzly.github.io/2017/05/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Module/\" target=\"_blank\" rel=\"external\">Module</a></p>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6Module","url":"http://yoursite.com/2017/05/14/读书笔记-es6Module/","content":"<h1 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a><strong>Module</strong></h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// CommonJS模块</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; stat, exists, readFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> _fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> stat = _fs.stat;</div><div class=\"line\"><span class=\"keyword\">let</span> exists = _fs.exists;</div><div class=\"line\"><span class=\"keyword\">let</span> readfile = _fs.readfile;</div></pre></td></tr></table></figure>\n<p>上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p>\n<blockquote>\n<p>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES6模块</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; stat, exists, readFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</div></pre></td></tr></table></figure>\n<p>上面代码的实质是从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。</p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><blockquote>\n<p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。</p>\n</blockquote>\n<p>严格模式主要有以下限制:</p>\n<blockquote>\n<ul>\n<li>变量必须声明后再使用</li>\n<li>函数的参数不能有同名属性，否则报错</li>\n<li>不能使用with语句</li>\n<li>不能对只读属性赋值，否则报错</li>\n<li>不能使用前缀0表示八进制数，否则报错</li>\n<li>不能删除不可删除的属性，否则报错</li>\n<li>不能删除变量delete prop，会报错，只能删除属性delete global[prop]</li>\n<li>eval不会在它的外层作用域引入变量</li>\n<li>eval和arguments不能被重新赋值</li>\n<li>arguments不会自动反映函数参数的变化</li>\n<li>不能使用arguments.callee</li>\n<li>不能使用arguments.caller</li>\n<li>禁止this指向全局对象</li>\n<li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li>\n<li>增加了保留字（比如protected、static和interface）</li>\n</ul>\n</blockquote>\n<h2 id=\"export-命令\"><a href=\"#export-命令\" class=\"headerlink\" title=\"export 命令\"></a>export 命令</h2><blockquote>\n<p>export命令用于规定模块的对外接口</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 输出变量</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> firstName = <span class=\"string\">'Michael'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> lastName = <span class=\"string\">'Jackson'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> year = <span class=\"number\">1958</span>;</div><div class=\"line\"><span class=\"comment\">//或者简写</span></div><div class=\"line\"><span class=\"keyword\">let</span> firstName = <span class=\"string\">'Michael'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> lastName = <span class=\"string\">'Jackson'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> year = <span class=\"number\">1958</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;;</div><div class=\"line\"><span class=\"comment\">//输出函数或类（class）</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * y;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"import-命令\"><a href=\"#import-命令\" class=\"headerlink\" title=\"import 命令\"></a>import 命令</h2><blockquote>\n<p>import命令用于输入其他模块提供的功能，import命令具有提升效果，会提升到整个模块的头部，首先执行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;firstName, lastName, year&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">  element.textContent = firstName + <span class=\"string\">' '</span> + lastName;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>as关键字</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//为输入的变量重新取一个名字</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; lastName <span class=\"keyword\">as</span> surname &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span>;</div><div class=\"line\"><span class=\"comment\">//模块整体加载</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"export-default-命令\"><a href=\"#export-default-命令\" class=\"headerlink\" title=\"export default 命令\"></a>export default 命令</h2><blockquote>\n<p>为模块指定默认输出</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// export-default.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// import-default.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">'./export-default'</span>;</div><div class=\"line\">customName(); <span class=\"comment\">// 'foo'</span></div></pre></td></tr></table></figure>\n<h2 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h2><p>一个 vuex 模块（module）实例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//com.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> types <span class=\"keyword\">from</span> <span class=\"string\">'../types'</span></div><div class=\"line\"><span class=\"keyword\">const</span> state = &#123;</div><div class=\"line\">    <span class=\"attr\">showLoading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</div><div class=\"line\">    setShowLoading(&#123; commit &#125;, status) &#123;</div><div class=\"line\">        commit(types.COM_SHOW_LOADING, status)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</div><div class=\"line\">    <span class=\"attr\">showLoading</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.showLoading,</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</div><div class=\"line\">    [types.COM_SHOW_LOADING](state, status) &#123;</div><div class=\"line\">        state.showLoading = status</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    state,</div><div class=\"line\">    actions,</div><div class=\"line\">    getters,</div><div class=\"line\">    mutations</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//serach.vue</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\">computed: &#123;</div><div class=\"line\">\t<span class=\"comment\">//mapGetters(map: Array&lt;string&gt; | Object): Object,创建组件的计算属性返回 getter 的返回值</span></div><div class=\"line\">\t<span class=\"comment\">//使用对象展开运算符将 getters 混入 computed 对象中</span></div><div class=\"line\">    ...mapGetters([</div><div class=\"line\">        <span class=\"string\">'showLoading'</span></div><div class=\"line\">\t])</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6Class的继承","url":"http://yoursite.com/2017/05/13/读书笔记-es6Class的继承/","content":"<h2 id=\"Class的继承\"><a href=\"#Class的继承\" class=\"headerlink\" title=\"Class的继承\"></a><strong>Class的继承</strong></h2><h3 id=\"一、基本用法\"><a href=\"#一、基本用法\" class=\"headerlink\" title=\"一、基本用法\"></a>一、基本用法</h3><blockquote>\n<p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, color) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(x, y); <span class=\"comment\">// 调用父类的constructor(x, y)</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color + <span class=\"string\">' '</span> + <span class=\"keyword\">super</span>.toString(); <span class=\"comment\">// 调用父类的toString()</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>\n<blockquote>\n<p>ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>\n</blockquote>\n<p>在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有super方法才能返回父类实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, color) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = color; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">    <span class=\"keyword\">super</span>(x, y);</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = color; <span class=\"comment\">// 正确</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是生成子类实例的代码，这与ES5的行为完全一致。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">25</span>, <span class=\"number\">8</span>, <span class=\"string\">'green'</span>);</div><div class=\"line\">cp <span class=\"keyword\">instanceof</span> ColorPoint <span class=\"comment\">// true</span></div><div class=\"line\">cp <span class=\"keyword\">instanceof</span> Point <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"二、类的prototype属性和proto属性\"><a href=\"#二、类的prototype属性和proto属性\" class=\"headerlink\" title=\"二、类的prototype属性和proto属性\"></a>二、类的prototype属性和<strong>proto</strong>属性</h3><blockquote>\n<p>大多数浏览器的ES5实现之中，每一个对象都有<strong>proto</strong>属性，指向对应的构造函数的prototype属性。Class作为构造函数的语法糖，同时有prototype属性和<strong>proto</strong>属性，因此同时存在两条继承链。<br>1）子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。<br>2）子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">B.__proto__ === A <span class=\"comment\">// true</span></div><div class=\"line\">B.prototype.__proto__ === A.prototype <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h3 id=\"三、Object-getPrototypeOf\"><a href=\"#三、Object-getPrototypeOf\" class=\"headerlink\" title=\"三、Object.getPrototypeOf()\"></a>三、Object.getPrototypeOf()</h3><blockquote>\n<p>Object.getPrototypeOf方法可以用来从子类上获取父类。可以使用这个方法判断，一个类是否继承了另一个类。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(ColorPoint) === Point</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h3 id=\"四、super-关键字\"><a href=\"#四、super-关键字\" class=\"headerlink\" title=\"四、super 关键字\"></a>四、super 关键字</h3><blockquote>\n<p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。<br>1) super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B，因此super()在这里相当于A.prototype.constructor.call(this)。</p>\n<blockquote>\n<p>2) super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  p() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.p()); <span class=\"comment\">// 2</span></div><div class=\"line\">    <span class=\"comment\">//super.p() 相当于 A.prototype.p()</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</div></pre></td></tr></table></figure>\n<p>由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.p = <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  get m() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.p;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">b.m <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<p>如果属性定义在父类的原型对象上，super就可以取到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</div><div class=\"line\">A.prototype.x = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.x) <span class=\"comment\">// 2</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ES6 规定，通过super调用父类的方法时，super会绑定子类的this。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  print() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  m() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.print();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">b.m() <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()会绑定子类B的this，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。</p>\n<h3 id=\"五、实例的proto属性\"><a href=\"#五、实例的proto属性\" class=\"headerlink\" title=\"五、实例的proto属性\"></a>五、实例的<strong>proto</strong>属性</h3><blockquote>\n<p>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'red'</span>);</div><div class=\"line\">p2.__proto__ === p1.__proto__ <span class=\"comment\">// false</span></div><div class=\"line\">p2.__proto__.__proto__ === p1.__proto__ <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>因此，通过子类实例的<strong>proto</strong>.<strong>proto</strong>属性，可以修改父类实例的行为。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">p2.__proto__.__proto__.printName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ha'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">p1.printName() <span class=\"comment\">// \"Ha\"</span></div></pre></td></tr></table></figure></p>\n<p>上面代码在ColorPoint的实例p2上向Point类添加方法，结果影响到了Point的实例p1。</p>\n<h3 id=\"六、原生构造函数的继承\"><a href=\"#六、原生构造函数的继承\" class=\"headerlink\" title=\"六、原生构造函数的继承\"></a>六、原生构造函数的继承</h3><blockquote>\n<ul>\n<li>Boolean()</li>\n<li>Number()</li>\n<li>String()</li>\n<li>Array()</li>\n<li>Date()</li>\n<li>Function()</li>\n<li>RegExp()</li>\n<li>Error()</li>\n<li>Object()</li>\n</ul>\n</blockquote>\n<p>以前，这些原生构造函数是无法继承的，比如，不能自己定义一个Array的子类。ES6可以自定义原生数据结构（比如Array、String等）的子类，这是ES5无法做到的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VersionedArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>.history = [[]];</div><div class=\"line\">  &#125;</div><div class=\"line\">  commit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.history.push(<span class=\"keyword\">this</span>.slice());</div><div class=\"line\">  &#125;</div><div class=\"line\">  revert() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.splice(<span class=\"number\">0</span>, <span class=\"keyword\">this</span>.length, ...this.history[<span class=\"keyword\">this</span>.history.length - <span class=\"number\">1</span>]);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> VersionedArray();</div><div class=\"line\">x.push(<span class=\"number\">1</span>);</div><div class=\"line\">x.push(<span class=\"number\">2</span>);</div><div class=\"line\">x <span class=\"comment\">// [1, 2]</span></div><div class=\"line\">x.history <span class=\"comment\">// [[]]</span></div><div class=\"line\">x.commit();</div><div class=\"line\">x.history <span class=\"comment\">// [[], [1, 2]]</span></div><div class=\"line\">x.push(<span class=\"number\">3</span>);</div><div class=\"line\">x <span class=\"comment\">// [1, 2, 3]</span></div><div class=\"line\">x.revert();</div><div class=\"line\">x <span class=\"comment\">// [1, 2]</span></div></pre></td></tr></table></figure></p>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6Class","url":"http://yoursite.com/2017/05/11/读书笔记-es6Class/","content":"<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a><strong>Class</strong></h2><h3 id=\"一、Class基本语法\"><a href=\"#一、Class基本语法\" class=\"headerlink\" title=\"一、Class基本语法\"></a>一、Class基本语法</h3><p>传统方法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">  <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">&#125;</div><div class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<p>ES6:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ES6的类，完全可以看作构造函数的另一种写法:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">typeof</span> Point <span class=\"comment\">// \"function\"</span></div><div class=\"line\">Point === Point.prototype.constructor <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  toString()&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  toValue()&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\">Point.prototype = &#123;</div><div class=\"line\">  toString()&#123;&#125;,</div><div class=\"line\">  toValue()&#123;&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在类的实例上面调用方法，其实就是调用原型上的方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">b.constructor === B.prototype.constructor <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(Point.prototype, &#123;</div><div class=\"line\">  toString()&#123;&#125;,</div><div class=\"line\">  toValue()&#123;&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//prototype对象的constructor属性，直接指向“类”的本身，这与ES5的行为是一致的。</span></div><div class=\"line\">Point.prototype.constructor === Point <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>类的内部所有定义的方法，都是不可枚举的（non-enumerable）。<strong>这一点与ES5的行为不一致</strong>。</p>\n</blockquote>\n<h3 id=\"二、constructor方法\"><a href=\"#二、constructor方法\" class=\"headerlink\" title=\"二、constructor方法\"></a>二、constructor方法</h3><blockquote>\n<p>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。</p>\n</blockquote>\n<h3 id=\"三、类的实例对象\"><a href=\"#三、类的实例对象\" class=\"headerlink\" title=\"三、类的实例对象\"></a>三、类的实例对象</h3><blockquote>\n<p>生成类的实例对象的写法，与ES5完全一样，也是使用new命令。如果忘记加上new，像函数那样调用Class，将会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"keyword\">var</span> point = Point(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// 正确</span></div><div class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">point.toString() <span class=\"comment\">// (2, 3)</span></div><div class=\"line\">point.hasOwnProperty(<span class=\"string\">'x'</span>) <span class=\"comment\">// true</span></div><div class=\"line\">point.hasOwnProperty(<span class=\"string\">'y'</span>) <span class=\"comment\">// true</span></div><div class=\"line\">point.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">// false</span></div><div class=\"line\">point.__proto__.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>上面代码中，x和y都是实例对象point自身的属性（因为定义在this变量上），所以hasOwnProperty方法返回true，而toString是原型对象的属性（因为定义在Point类上），所以hasOwnProperty方法返回false。这些都与ES5的行为保持一致。</p>\n<blockquote>\n<p>与ES5一样，类的所有实例共享一个原型对象。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>,<span class=\"number\">2</span>);</div><div class=\"line\">p1.__proto__ === p2.__proto__   <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>上面代码中，p1和p2都是Point的实例，它们的原型都是Point.prototype，所以<strong>proto</strong>属性是相等的。</p>\n<p>这也意味着，可以通过实例的<strong>proto</strong>属性为Class添加方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>,<span class=\"number\">2</span>);</div><div class=\"line\">p1.__proto__.printName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'Oops'</span> &#125;;</div><div class=\"line\">p1.printName() <span class=\"comment\">// \"Oops\"</span></div><div class=\"line\">p2.printName() <span class=\"comment\">// \"Oops\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> Point(<span class=\"number\">4</span>,<span class=\"number\">2</span>);</div><div class=\"line\">p3.printName() <span class=\"comment\">// \"Oops\"</span></div></pre></td></tr></table></figure></p>\n<p>上面代码在p1的原型上添加了一个printName方法，由于p1的原型就是p2的原型，因此p2也可以调用这个方法。而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的<strong>proto</strong>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变Class的原始定义，影响到所有实例。</p>\n<h3 id=\"四、不存在变量提升\"><a href=\"#四、不存在变量提升\" class=\"headerlink\" title=\"四、不存在变量提升\"></a>四、不存在变量提升</h3><blockquote>\n<p>Class不存在变量提升（hoist），这一点与ES5完全不同。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Foo(); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"五、Class表达式\"><a href=\"#五、Class表达式\" class=\"headerlink\" title=\"五、Class表达式\"></a>五、Class表达式</h3><blockquote>\n<p>采用Class表达式，可以写出立即执行的Class。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  sayName() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;(<span class=\"string\">'张三'</span>);</div><div class=\"line\">person.sayName(); <span class=\"comment\">// \"张三\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"六、私有方法\"><a href=\"#六、私有方法\" class=\"headerlink\" title=\"六、私有方法\"></a>六、私有方法</h3><blockquote>\n<p>私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。</p>\n</blockquote>\n<p>在命名上加以区别:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 公有方法</span></div><div class=\"line\">  foo (baz) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._bar(baz);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 私有方法</span></div><div class=\"line\">  _bar(baz) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.snaf = baz;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中，_bar方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。</p>\n<h3 id=\"七、this的指向\"><a href=\"#七、this的指向\" class=\"headerlink\" title=\"七、this的指向\"></a>七、this的指向</h3><blockquote>\n<p>类的方法内部如果含有this，它默认指向类的实例</p>\n</blockquote>\n<h3 id=\"八、Class的取值函数（getter）和存值函数（setter）\"><a href=\"#八、Class的取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"八、Class的取值函数（getter）和存值函数（setter）\"></a>八、Class的取值函数（getter）和存值函数（setter）</h3><blockquote>\n<p>与ES5一样，在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  get prop() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'getter'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set prop(value) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter: '</span>+value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> inst = <span class=\"keyword\">new</span> MyClass();</div><div class=\"line\">inst.prop = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"comment\">// setter: 123</span></div><div class=\"line\">inst.prop</div><div class=\"line\"><span class=\"comment\">// 'getter'</span></div></pre></td></tr></table></figure>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/learn-es6</a></p>\n<p>文章来源<a href=\"https://hzzly.github.io/\" target=\"_blank\" rel=\"external\">hzzly博客技术分享</a></p>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6Async函数栗子","url":"http://yoursite.com/2017/05/10/读书笔记-es6Async函数栗子/","content":"<h2 id=\"async函数栗子\"><a href=\"#async函数栗子\" class=\"headerlink\" title=\"async函数栗子\"></a><strong>async函数栗子</strong></h2><h3 id=\"栗子一：从豆瓣-API-获取数据\"><a href=\"#栗子一：从豆瓣-API-获取数据\" class=\"headerlink\" title=\"栗子一：从豆瓣 API 获取数据\"></a>栗子一：从豆瓣 API 获取数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fetchDoubanApi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> response;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            response = <span class=\"built_in\">JSON</span>.parse(xhr.responseText);</div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            reject(e);</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span> (response) &#123;</div><div class=\"line\">            resolve(response, xhr.status, xhr);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          reject(xhr);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'https://api.douban.com/v2/user/aisk'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">    xhr.setRequestHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/plain\"</span>);</div><div class=\"line\">    xhr.send(data);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> fetchDoubanApi();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h3 id=\"栗子二：根据电影文件名，自动下载对应的海报\"><a href=\"#栗子二：根据电影文件名，自动下载对应的海报\" class=\"headerlink\" title=\"栗子二：根据电影文件名，自动下载对应的海报\"></a>栗子二：根据电影文件名，自动下载对应的海报</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">'path'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> movieDir = __dirname + <span class=\"string\">'/movies'</span>,</div><div class=\"line\">    exts     = [<span class=\"string\">'.mkv'</span>, <span class=\"string\">'.avi'</span>, <span class=\"string\">'.mp4'</span>, <span class=\"string\">'.rm'</span>, <span class=\"string\">'.rmvb'</span>, <span class=\"string\">'.wmv'</span>];</div><div class=\"line\"><span class=\"comment\">// 读取文件列表</span></div><div class=\"line\"><span class=\"keyword\">var</span> readFiles = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        fs.readdir(movieDir, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, files</span>) </span>&#123;</div><div class=\"line\">            resolve(files.filter(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> exts.includes(path.parse(v).ext)));</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 获取海报</span></div><div class=\"line\"><span class=\"keyword\">var</span> getPoster = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">movieName</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> url = <span class=\"string\">`https://api.douban.com/v2/movie/search?q=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURI</span>(movieName)&#125;</span>`</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        request(&#123;<span class=\"attr\">url</span>: url, <span class=\"attr\">json</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</div><div class=\"line\">            resolve(body.subjects[<span class=\"number\">0</span>].images.large);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 保存海报</span></div><div class=\"line\"><span class=\"keyword\">var</span> savePoster = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">movieName, url</span>) </span>&#123;</div><div class=\"line\">    request.get(url).pipe(fs.createWriteStream(path.join(movieDir, movieName + <span class=\"string\">'.jpg'</span>)));</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\">(<span class=\"params\"><span class=\"keyword\">async</span> (</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> files = <span class=\"keyword\">await</span> readFiles();</div><div class=\"line\">    <span class=\"comment\">// await只能使用在原生语法</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> file <span class=\"keyword\">of</span> files) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> name = path.parse(file).name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`正在获取【<span class=\"subst\">$&#123;name&#125;</span>】的海报`</span>);</div><div class=\"line\">        savePoster(name, <span class=\"keyword\">await</span> getPoster(name));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'=== 获取海报完成 ==='</span>);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6Async函数","url":"http://yoursite.com/2017/05/09/读书笔记-es6Async函数/","content":"<h2 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a><strong>async 函数</strong></h2><blockquote>\n<p>async 函数，使得异步操作变得更加方便。它是 Generator 函数的语法糖。</p>\n</blockquote>\n<p>Generator 函数，依次读取两个文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) reject(error);</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>写成async函数，就是下面这样:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>async函数对 Generator 函数的改进，体现在以下四点:</strong></p>\n<blockquote>\n<p>1）内置执行器</p>\n</blockquote>\n<p>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result = asyncReadFile();</div></pre></td></tr></table></figure></p>\n<p>上面的代码调用了asyncReadFile函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用next方法，或者用co模块，才能真正执行，得到最后结果。</p>\n<blockquote>\n<p>2）更好的语义</p>\n</blockquote>\n<p>async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</p>\n<blockquote>\n<p>3）更广的适用性</p>\n</blockquote>\n<p>co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>\n<blockquote>\n<p>4）返回值是 Promise</p>\n</blockquote>\n<p>async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。</p>\n<p>进一步说，async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p>\n<h3 id=\"一、基本用法\"><a href=\"#一、基本用法\" class=\"headerlink\" title=\"一、基本用法\"></a>一、基本用法</h3><blockquote>\n<p>async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(resolve, ms);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">await</span> timeout(ms);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;</div><div class=\"line\">asyncPrint(<span class=\"string\">'hello world'</span>, <span class=\"number\">5000</span>);</div></pre></td></tr></table></figure>\n<p>上面代码指定5000毫秒以后，输出hello world。</p>\n<p>由于async函数返回的是 Promise 对象，可以作为await命令的参数。所以，上面的例子也可以写成下面的形式:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(resolve, ms);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">await</span> timeout(ms);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;</div><div class=\"line\">asyncPrint(<span class=\"string\">'hello world'</span>, <span class=\"number\">5000</span>);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><strong>async 函数多种使用形式</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 函数声明</span></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 函数表达式</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 对象的方法</span></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"keyword\">async</span> foo() &#123;&#125; &#125;;</div><div class=\"line\">obj.foo().then(...)</div><div class=\"line\"><span class=\"comment\">// Class 的方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Storage</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cachePromise = caches.open(<span class=\"string\">'avatars'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">async</span> getAvatar(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> cache = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.cachePromise;</div><div class=\"line\">    <span class=\"keyword\">return</span> cache.match(<span class=\"string\">`/avatars/<span class=\"subst\">$&#123;name&#125;</span>.jpg`</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> storage = <span class=\"keyword\">new</span> Storage();</div><div class=\"line\">storage.getAvatar(<span class=\"string\">'hzzly'</span>).then(…);</div><div class=\"line\"><span class=\"comment\">// 箭头函数</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">async</span> () =&gt; &#123;&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"二、语法\"><a href=\"#二、语法\" class=\"headerlink\" title=\"二、语法\"></a>二、语法</h3><blockquote>\n<p>async函数的语法规则总体上比较简单，难点是错误处理机制。</p>\n</blockquote>\n<p><strong>返回 Promise 对象</strong></p>\n<blockquote>\n<p>async函数返回一个 Promise 对象。async函数内部return语句返回的值，会成为then方法回调函数的参数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'hello world'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">f().then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v))</div><div class=\"line\"><span class=\"comment\">// \"hello world\"</span></div></pre></td></tr></table></figure>\n<p><strong>Promise 对象的状态变化</strong></p>\n<blockquote>\n<p>async函数返回的 Promise 对象，必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTitle</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(url);</div><div class=\"line\">  <span class=\"keyword\">let</span> html = <span class=\"keyword\">await</span> response.text();</div><div class=\"line\">  <span class=\"keyword\">return</span> html.match(<span class=\"regexp\">/&lt;title&gt;([\\s\\S]+)&lt;\\/title&gt;/i</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">getTitle(<span class=\"string\">'https://tc39.github.io/ecma262/'</span>).then(<span class=\"built_in\">console</span>.log)</div><div class=\"line\"><span class=\"comment\">// \"ECMAScript 2017 Language Specification\"</span></div></pre></td></tr></table></figure>\n<p>上面代码中，函数getTitle内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行then方法里面的console.log。</p>\n<h3 id=\"三、使用注意点\"><a href=\"#三、使用注意点\" class=\"headerlink\" title=\"三、使用注意点\"></a>三、使用注意点</h3><blockquote>\n<ul>\n<li>await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try…catch代码块中。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">await</span> somethingThatReturnsAPromise();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 另一种写法</span></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">await</span> somethingThatReturnsAPromise()</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//异步操作（即互不依赖），被写成继发关系。这样比较耗时，因为只有getFoo完成以后，才会执行getBar，完全可以让它们同时触发。</span></div><div class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">await</span> getFoo();</div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"keyword\">await</span> getBar();</div><div class=\"line\"><span class=\"comment\">// 写法一</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo, bar] = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([getFoo(), getBar()]);</div><div class=\"line\"><span class=\"comment\">// 写法二</span></div><div class=\"line\"><span class=\"keyword\">let</span> fooPromise = getFoo();</div><div class=\"line\"><span class=\"keyword\">let</span> barPromise = getBar();</div><div class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">await</span> fooPromise;</div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"keyword\">await</span> barPromise;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>await命令只能用在async函数之中，如果用在普通函数，就会报错。</li>\n</ul>\n</blockquote>\n<p>下一节将介绍 async 函数的栗子(🌰)，敬请期待。。。</p>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6Generator函数","url":"http://yoursite.com/2017/05/08/读书笔记-es6Generator函数/","content":"<h2 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a><strong>Generator函数</strong></h2><blockquote>\n<p>从语法上，可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。<br>调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象(遍历器对象)。<br>Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。<br>Generator 函数也不能跟new命令一起用，会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'hello', done: false &#125;</span></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'world', done: false &#125;</span></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'ending', done: true &#125;</span></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p>\n</blockquote>\n<p><strong>写法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">foo</span>(<span class=\"params\">x, y</span>) </span>&#123; ··· &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\">x, y</span>) </span>&#123; ··· &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x, y</span>) </span>&#123; ··· &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>*<span class=\"title\">foo</span>(<span class=\"params\">x, y</span>) </span>&#123; ··· &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"一、yield-表达式\"><a href=\"#一、yield-表达式\" class=\"headerlink\" title=\"一、yield 表达式\"></a>一、yield 表达式</h3><blockquote>\n<p>由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。</p>\n</blockquote>\n<p>遍历器对象的next方法的运行逻辑如下:<br>1）遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。<br>2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。<br>3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。<br>4）如果该函数没有return语句，则返回的对象的value属性值为undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span>  <span class=\"number\">123</span> + <span class=\"number\">456</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> g = gen()</div><div class=\"line\">gen.next()</div><div class=\"line\"><span class=\"comment\">//&#123; value: 579, done: false &#125;</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"二、for…of-循环\"><a href=\"#二、for…of-循环\" class=\"headerlink\" title=\"二、for…of 循环\"></a>二、for…of 循环</h3><blockquote>\n<p>for…of循环可以自动遍历 Generator 函数时生成的Iterator对象，且此时不再需要调用next方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></div></pre></td></tr></table></figure>\n<p>这里需要注意，一旦next方法的返回对象的done属性为true，for…of循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的6，不包括在for…of循环之中。</p>\n<blockquote>\n<p>除了for…of循环以外，扩展运算符（…）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">numbers</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">3</span></div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 扩展运算符</span></div><div class=\"line\">[...numbers()] <span class=\"comment\">// [1, 2]</span></div><div class=\"line\"><span class=\"comment\">// Array.from 方法</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.from(numbers()) <span class=\"comment\">// [1, 2]</span></div><div class=\"line\"><span class=\"comment\">// 解构赋值</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y] = numbers();</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"comment\">// for...of 循环</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n <span class=\"keyword\">of</span> numbers()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(n)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<h3 id=\"三、作为对象属性的Generator函数\"><a href=\"#三、作为对象属性的Generator函数\" class=\"headerlink\" title=\"三、作为对象属性的Generator函数\"></a>三、作为对象属性的Generator函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">  * myGeneratorMethod() &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">myGeneratorMethod</span>: <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ···</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"四、应用\"><a href=\"#四、应用\" class=\"headerlink\" title=\"四、应用\"></a>四、应用</h3><blockquote>\n<p>1）异步操作的同步化表达</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loadUI</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  showLoadingScreen();</div><div class=\"line\">  <span class=\"keyword\">yield</span> loadUIDataAsynchronously();</div><div class=\"line\">  hideLoadingScreen();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> loader = loadUI();</div><div class=\"line\"><span class=\"comment\">// 加载UI</span></div><div class=\"line\">loader.next()</div><div class=\"line\"><span class=\"comment\">// 卸载UI</span></div><div class=\"line\">loader.next()</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> request(<span class=\"string\">\"http://some.url\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse(result);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(resp.value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  makeAjaxCall(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    it.next(response);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> it = main();</div><div class=\"line\">it.next();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>2）控制流管理</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">    step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">      step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>采用 Promise 改写上面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(step1)</div><div class=\"line\">  .then(step2)</div><div class=\"line\">  .then(step3)</div><div class=\"line\">  .then(step4)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .done();</div></pre></td></tr></table></figure></p>\n<p>Generator 函数可以进一步改善代码运行流程。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">longRunningTask</span>(<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value2 = <span class=\"keyword\">yield</span> step1(value1);</div><div class=\"line\">    <span class=\"keyword\">var</span> value3 = <span class=\"keyword\">yield</span> step2(value2);</div><div class=\"line\">    <span class=\"keyword\">var</span> value4 = <span class=\"keyword\">yield</span> step3(value3);</div><div class=\"line\">    <span class=\"keyword\">var</span> value5 = <span class=\"keyword\">yield</span> step4(value4);</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">scheduler(longRunningTask(initialValue));</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scheduler</span>(<span class=\"params\">task</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> taskObj = task.next(task.value);</div><div class=\"line\">  <span class=\"comment\">// 如果Generator函数未结束，就继续调用</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!taskObj.done) &#123;</div><div class=\"line\">    task.value = taskObj.value</div><div class=\"line\">    scheduler(task);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6Set和Map数据结构","url":"http://yoursite.com/2017/05/07/读书笔记-es6Set和Map数据结构/","content":"<h2 id=\"Set和Map数据结构\"><a href=\"#Set和Map数据结构\" class=\"headerlink\" title=\"Set和Map数据结构\"></a><strong>Set和Map数据结构</strong></h2><h3 id=\"一、Set\"><a href=\"#一、Set\" class=\"headerlink\" title=\"一、Set\"></a>一、Set</h3><blockquote>\n<p>它类似于数组，但是成员的值都是唯一的，没有重复的值。Set 本身是一个构造函数，用来生成 Set 数据结构。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>].forEach(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> s.add(x));</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> s) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 2 3 5 4</span></div></pre></td></tr></table></figure>\n<p>Set 函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 例一</span></div><div class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]);</div><div class=\"line\">[...set]</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></div><div class=\"line\"><span class=\"comment\">// 例二</span></div><div class=\"line\"><span class=\"keyword\">const</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</div><div class=\"line\">items.size <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"comment\">// 例三</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divs</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...document.querySelectorAll(<span class=\"string\">'div'</span>)];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(divs());</div><div class=\"line\">set.size <span class=\"comment\">// 56</span></div><div class=\"line\"><span class=\"comment\">// 类似于</span></div><div class=\"line\">divs().forEach(<span class=\"function\"><span class=\"params\">div</span> =&gt;</span> set.add(div));</div><div class=\"line\">set.size <span class=\"comment\">// 56</span></div></pre></td></tr></table></figure>\n<p>去除数组重复成员的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 去除数组的重复成员</span></div><div class=\"line\">[...new <span class=\"built_in\">Set</span>(array)]</div></pre></td></tr></table></figure>\n<h3 id=\"二、Set-实例的属性和方法\"><a href=\"#二、Set-实例的属性和方法\" class=\"headerlink\" title=\"二、Set 实例的属性和方法\"></a>二、Set 实例的属性和方法</h3><blockquote>\n<ul>\n<li>属性<ul>\n<li>Set.prototype.constructor：构造函数，默认就是Set函数。</li>\n<li>Set.prototype.size：返回Set实例的成员总数。</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>add(value)：添加某个值，返回Set结构本身。</li>\n<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li>\n<li>has(value)：返回一个布尔值，表示该值是否为Set的成员。</li>\n<li>clear()：清除所有成员，没有返回值。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"三、遍历操作\"><a href=\"#三、遍历操作\" class=\"headerlink\" title=\"三、遍历操作\"></a>三、遍历操作</h3><blockquote>\n<ul>\n<li>keys()：返回键名的遍历器</li>\n<li>values()：返回键值的遍历器</li>\n<li>entries()：返回键值对的遍历器</li>\n<li>forEach()：使用回调函数遍历每个成员</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>]);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.keys()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// red</span></div><div class=\"line\"><span class=\"comment\">// green</span></div><div class=\"line\"><span class=\"comment\">// blue</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.values()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// red</span></div><div class=\"line\"><span class=\"comment\">// green</span></div><div class=\"line\"><span class=\"comment\">// blue</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// [\"red\", \"red\"]</span></div><div class=\"line\"><span class=\"comment\">// [\"green\", \"green\"]</span></div><div class=\"line\"><span class=\"comment\">// [\"blue\", \"blue\"]</span></div><div class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\">set.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(value * <span class=\"number\">2</span>) )</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"comment\">// 4</span></div><div class=\"line\"><span class=\"comment\">// 6</span></div><div class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\">set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...set].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"comment\">// 返回Set结构：&#123;2, 4, 6&#125;</span></div><div class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</div><div class=\"line\">set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...set].filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> (x % <span class=\"number\">2</span>) == <span class=\"number\">0</span>));</div><div class=\"line\"><span class=\"comment\">// 返回Set结构：&#123;2, 4&#125;</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> unique = [...new <span class=\"built_in\">Set</span>(arr)];</div><div class=\"line\"><span class=\"comment\">// [3, 5, 2]</span></div></pre></td></tr></table></figure>\n<h3 id=\"四、Map\"><a href=\"#四、Map\" class=\"headerlink\" title=\"四、Map\"></a>四、Map</h3><blockquote>\n<p>它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</div><div class=\"line\">  [<span class=\"string\">'name'</span>, <span class=\"string\">'张三'</span>],</div><div class=\"line\">  [<span class=\"string\">'title'</span>, <span class=\"string\">'Author'</span>]</div><div class=\"line\">]);</div><div class=\"line\">map.size <span class=\"comment\">// 2</span></div><div class=\"line\">map.has(<span class=\"string\">'name'</span>) <span class=\"comment\">// true</span></div><div class=\"line\">map.get(<span class=\"string\">'name'</span>) <span class=\"comment\">// \"张三\"</span></div><div class=\"line\">map.has(<span class=\"string\">'title'</span>) <span class=\"comment\">// true</span></div><div class=\"line\">map.get(<span class=\"string\">'title'</span>) <span class=\"comment\">// \"Author\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"五、Map-实例的属性和方法\"><a href=\"#五、Map-实例的属性和方法\" class=\"headerlink\" title=\"五、Map 实例的属性和方法\"></a>五、Map 实例的属性和方法</h3><blockquote>\n<ul>\n<li>属性<ul>\n<li>Map.prototype.constructor：构造函数，默认就是Map函数。</li>\n<li>Map.prototype.size：返回Map实例的成员总数。</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>set(key, value)：set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。可以采用链式写法。</li>\n<li>get(key)：get方法读取key对应的键值，如果找不到key，返回undefined。</li>\n<li>has(key)：has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li>\n<li>delete(key)：delete方法删除某个键，返回true。如果删除失败，返回false。</li>\n<li>clear(): clear方法清除所有成员，没有返回值。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"六、遍历操作\"><a href=\"#六、遍历操作\" class=\"headerlink\" title=\"六、遍历操作\"></a>六、遍历操作</h3><p>和 Set 一样</p>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6对象的扩展","url":"http://yoursite.com/2017/05/06/读书笔记-es6对象的扩展/","content":"<h2 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a><strong>对象的扩展</strong></h2><h3 id=\"一、属性和方法的简洁表示法\"><a href=\"#一、属性和方法的简洁表示法\" class=\"headerlink\" title=\"一、属性和方法的简洁表示法\"></a>一、属性和方法的简洁表示法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> baz = &#123;foo&#125;;</div><div class=\"line\">baz <span class=\"comment\">// &#123;foo: \"bar\"&#125;</span></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> baz = &#123;<span class=\"attr\">foo</span>: foo&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">  method() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//如果某个方法的值是一个Generator函数，前面需要加上星号。</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  * m()&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'hello world'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>用于函数的返回值，将会非常方便</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPoint</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;x, y&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">getPoint()</div><div class=\"line\"><span class=\"comment\">// &#123;x:1, y:10&#125;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>CommonJS模块输出变量，就非常合适使用简洁写法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ms = &#123;&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getItem</span> (<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> ms ? ms[key] : <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setItem</span> (<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">  ms[key] = value;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clear</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  ms = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; getItem, setItem, clear &#125;;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">getItem</span>: getItem,</div><div class=\"line\">  <span class=\"attr\">setItem</span>: setItem,</div><div class=\"line\">  <span class=\"attr\">clear</span>: clear</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"二、Object-is\"><a href=\"#二、Object-is\" class=\"headerlink\" title=\"二、Object.is()\"></a>二、Object.is()</h3><blockquote>\n<p>Object.is它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>\n</blockquote>\n<h3 id=\"三、Object-assign\"><a href=\"#三、Object-assign\" class=\"headerlink\" title=\"三、Object.assign()\"></a>三、Object.assign()</h3><blockquote>\n<p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</div><div class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></div><div class=\"line\"><span class=\"comment\">//如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: <span class=\"number\">1</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</div><div class=\"line\">obj1.a.b = <span class=\"number\">2</span>;</div><div class=\"line\">obj2.a.b <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">d</span>: <span class=\"string\">'e'</span> &#125; &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> source = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: <span class=\"string\">'hello'</span> &#125; &#125;</div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source)</div><div class=\"line\"><span class=\"comment\">// &#123; a: &#123; b: 'hello' &#125; &#125;</span></div></pre></td></tr></table></figure>\n<p><strong>Object.assign常见用途</strong></p>\n<blockquote>\n<p>1）为对象添加属性</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;x, y&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面方法通过Object.assign方法，将x属性和y属性添加到Point类的对象实例。</p>\n<blockquote>\n<p>2）为对象添加方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</div><div class=\"line\">  someMethod(arg1, arg2) &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;,</div><div class=\"line\">  anotherMethod() &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></div><div class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div><div class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>3）克隆对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。</p>\n<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>4）合并多个对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> merge =</div><div class=\"line\">  <span class=\"function\">(<span class=\"params\">target, ...sources</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(target, ...sources);</div></pre></td></tr></table></figure>\n<p>如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> merge =</div><div class=\"line\">  <span class=\"function\">(<span class=\"params\">...sources</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, ...sources);</div></pre></td></tr></table></figure></p>\n<h3 id=\"四、属性的遍历\"><a href=\"#四、属性的遍历\" class=\"headerlink\" title=\"四、属性的遍历\"></a>四、属性的遍历</h3><blockquote>\n<p>1）for…in</p>\n</blockquote>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。</p>\n<blockquote>\n<p>2）Object.keys(obj)</p>\n</blockquote>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</p>\n<blockquote>\n<p>3）Object.getOwnPropertyNames(obj)</p>\n</blockquote>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</p>\n<blockquote>\n<p>4）Object.getOwnPropertySymbols(obj)</p>\n</blockquote>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。</p>\n<blockquote>\n<p>5）Reflect.ownKeys(obj)</p>\n</blockquote>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(&#123; [<span class=\"built_in\">Symbol</span>()]:<span class=\"number\">0</span>, <span class=\"attr\">b</span>:<span class=\"number\">0</span>, <span class=\"number\">10</span>:<span class=\"number\">0</span>, <span class=\"number\">2</span>:<span class=\"number\">0</span>, <span class=\"attr\">a</span>:<span class=\"number\">0</span> &#125;)</div><div class=\"line\"><span class=\"comment\">// ['2', '10', 'b', 'a', Symbol()]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"五、Object-keys-，Object-values-，Object-entries\"><a href=\"#五、Object-keys-，Object-values-，Object-entries\" class=\"headerlink\" title=\"五、Object.keys()，Object.values()，Object.entries()\"></a>五、Object.keys()，Object.values()，Object.entries()</h3><blockquote>\n<ul>\n<li>Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</li>\n<li>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。Object.values只返回对象自身的可遍历属性。Object.values会过滤属性名为 Symbol 值的属性。如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。</li>\n<li>Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。如果原对象的属性名是一个 Symbol 值，该属性会被忽略。Object.entries的基本用途是遍历对象的属性。另一个用处是，将对象转为真正的Map结构。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\"><span class=\"comment\">// [\"foo\", \"baz\"]</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</div><div class=\"line\"><span class=\"comment\">// [\"bar\", 42]</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">100</span>: <span class=\"string\">'a'</span>, <span class=\"number\">2</span>: <span class=\"string\">'b'</span>, <span class=\"number\">7</span>: <span class=\"string\">'c'</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</div><div class=\"line\"><span class=\"comment\">// [\"b\", \"c\", \"a\"]</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.entries(obj)</div><div class=\"line\"><span class=\"comment\">// [ [\"foo\", \"bar\"], [\"baz\", 42] ]</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;keys, values, entries&#125; = <span class=\"built_in\">Object</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> keys(obj)) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 'a', 'b', 'c'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> values(obj)) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 1, 2, 3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> entries(obj)) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log([key, value]); <span class=\"comment\">// ['a', 1], ['b', 2], ['c', 3]</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"六、对象的扩展运算符\"><a href=\"#六、对象的扩展运算符\" class=\"headerlink\" title=\"六、对象的扩展运算符\"></a>六、对象的扩展运算符</h3><blockquote>\n<p>扩展运算符（…）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> z = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> n = &#123; ...z &#125;;</div><div class=\"line\">n <span class=\"comment\">// &#123; a: 3, b: 4 &#125;</span></div><div class=\"line\"><span class=\"keyword\">let</span> aClone = &#123; ...a &#125;;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> aClone = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a);</div><div class=\"line\"><span class=\"comment\">//合并两个对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> ab = &#123; ...a, ...b &#125;;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> ab = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a, b);</div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6函数的扩展","url":"http://yoursite.com/2017/05/05/读书笔记-es6函数的扩展/","content":"<h2 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a><strong>函数的扩展</strong></h2><h3 id=\"一、函数参数的默认值\"><a href=\"#一、函数参数的默认值\" class=\"headerlink\" title=\"一、函数参数的默认值\"></a>一、函数参数的默认值</h3><blockquote>\n<ul>\n<li>参数变量是默认声明的，所以不能用let或const再次声明</li>\n<li>通常情况下，定义了默认值的参数，应该是函数的尾参数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">'China'</span>) <span class=\"comment\">// Hello China</span></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">''</span>) <span class=\"comment\">// Hello</span></div></pre></td></tr></table></figure>\n<h3 id=\"二、与解构赋值默认值结合使用\"><a href=\"#二、与解构赋值默认值结合使用\" class=\"headerlink\" title=\"二、与解构赋值默认值结合使用\"></a>二、与解构赋值默认值结合使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">&#123;x, y = <span class=\"number\">5</span>&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\">foo(&#123;&#125;) <span class=\"comment\">// undefined, 5</span></div><div class=\"line\">foo(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;) <span class=\"comment\">// 1, 5</span></div><div class=\"line\">foo(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;) <span class=\"comment\">// 1, 2</span></div><div class=\"line\">foo() <span class=\"comment\">// TypeError: Cannot read property 'x' of undefined</span></div></pre></td></tr></table></figure>\n<h3 id=\"三、rest参数\"><a href=\"#三、rest参数\" class=\"headerlink\" title=\"三、rest参数\"></a>三、rest参数</h3><blockquote>\n<p>ES6 引入 rest 参数（形式为“…变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>\n<ul>\n<li>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</div><div class=\"line\">    sum += val;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</div><div class=\"line\">  items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    array.push(item);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\">push(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"四、扩展运算符-…\"><a href=\"#四、扩展运算符-…\" class=\"headerlink\" title=\"四、扩展运算符(…)\"></a>四、扩展运算符(…)</h3><blockquote>\n<p>它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。<br>扩展运算符内部调用的是数据结构的Iterator接口</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"comment\">// 1 2 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></div><div class=\"line\">[...document.querySelectorAll(<span class=\"string\">'div'</span>)]</div><div class=\"line\"><span class=\"comment\">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</div><div class=\"line\">  array.push(...items);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</div><div class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></div></pre></td></tr></table></figure>\n<p>栗子：</p>\n<blockquote>\n<ul>\n<li>替代数组的apply方法</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5的写法</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>合并数组</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</div><div class=\"line\"><span class=\"comment\">// ES6</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</div><div class=\"line\"><span class=\"comment\">// ES5的合并数组</span></div><div class=\"line\">arr1.concat(arr2, arr3);</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div><div class=\"line\"><span class=\"comment\">// ES6的合并数组</span></div><div class=\"line\">[...arr1, ...arr2, ...arr3]</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>与解构赋值结合</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">first <span class=\"comment\">// 1</span></div><div class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [];</div><div class=\"line\">first <span class=\"comment\">// undefined</span></div><div class=\"line\">rest  <span class=\"comment\">// []:</span></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">\"foo\"</span>];</div><div class=\"line\">first  <span class=\"comment\">// \"foo\"</span></div><div class=\"line\">rest   <span class=\"comment\">// []</span></div></pre></td></tr></table></figure>\n<h3 id=\"五、箭头函数\"><a href=\"#五、箭头函数\" class=\"headerlink\" title=\"五、箭头函数\"></a>五、箭头函数</h3><blockquote>\n<p>箭头函数可以让this指向固定化，这种特性很有利于封装回调函数</p>\n</blockquote>\n<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</p>\n<p>（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">5</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</div><div class=\"line\"><span class=\"comment\">//等同于：</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> v;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li>箭头函数简化回调函数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 正常函数写法</span></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 箭头函数写法</span></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>箭头函数可以让setTimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Timer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.s1 = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.s2 = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"comment\">// 箭头函数</span></div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.s1++, <span class=\"number\">1000</span>);</div><div class=\"line\">  <span class=\"comment\">// 普通函数</span></div><div class=\"line\">  setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.s2++;</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"keyword\">new</span> Timer();</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'s1: '</span>, timer.s1), <span class=\"number\">3100</span>);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'s2: '</span>, timer.s2), <span class=\"number\">3100</span>);</div><div class=\"line\"><span class=\"comment\">// s1: 3</span></div><div class=\"line\"><span class=\"comment\">// s2: 0</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>因为所有的内层函数都是箭头函数，都没有自己的this，它们的this其实都是最外层foo函数的this</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'id:'</span>, <span class=\"keyword\">this</span>.id);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> f = foo.call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> t1 = f.call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>&#125;)()(); <span class=\"comment\">// id: 1</span></div><div class=\"line\"><span class=\"keyword\">var</span> t2 = f().call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>&#125;)(); <span class=\"comment\">// id: 1</span></div><div class=\"line\"><span class=\"keyword\">var</span> t3 = f()().call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>&#125;); <span class=\"comment\">// id: 1</span></div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6数组的扩展","url":"http://yoursite.com/2017/05/04/读书笔记-es6数组的扩展/","content":"<h2 id=\"数组的扩展\"><a href=\"#数组的扩展\" class=\"headerlink\" title=\"数组的扩展\"></a><strong>数组的扩展</strong></h2><h3 id=\"一、Array-from\"><a href=\"#一、Array-from\" class=\"headerlink\" title=\"一、Array.from()\"></a>一、Array.from()</h3><blockquote>\n<p>将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//类似数组的对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</div><div class=\"line\">    <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</div><div class=\"line\">    <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</div><div class=\"line\">    <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// ES5的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [].slice.call(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"built_in\">Array</span>.from(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></div><div class=\"line\"><span class=\"comment\">// NodeList对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> ps = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>);</div><div class=\"line\"><span class=\"built_in\">Array</span>.from(ps).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// arguments对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>扩展运算符（…）也可以将某些数据结构转为数组</p>\n</blockquote>\n<h3 id=\"二、Array-of\"><a href=\"#二、Array-of\" class=\"headerlink\" title=\"二、Array.of()\"></a>二、Array.of()</h3><blockquote>\n<p>用于将一组值，转换为数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<h3 id=\"三、数组实例的copyWithin\"><a href=\"#三、数组实例的copyWithin\" class=\"headerlink\" title=\"三、数组实例的copyWithin()\"></a>三、数组实例的copyWithin()</h3><blockquote>\n<p>在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组</p>\n<ul>\n<li>target（必需）：从该位置开始替换数据。</li>\n<li>start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。</li>\n<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"comment\">// [4, 5, 3, 4, 5]</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></div><div class=\"line\"><span class=\"comment\">// -2相当于3号位，-1相当于4号位</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>)</div><div class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>\n<h3 id=\"四、数组实例的find-和findIndex\"><a href=\"#四、数组实例的find-和findIndex\" class=\"headerlink\" title=\"四、数组实例的find()和findIndex()\"></a>四、数组实例的find()和findIndex()</h3><blockquote>\n<ul>\n<li>find方法，用于找出第一个符合条件的<strong>数组成员</strong>。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。</li>\n<li>findIndex返回第一个符合条件的数组成员的<strong>位置</strong>，如果所有成员都不符合条件，则返回-1。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">-5</span>, <span class=\"number\">10</span>].find(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &lt; <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// -5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 10</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"五、数组实例的fill\"><a href=\"#五、数组实例的fill\" class=\"headerlink\" title=\"五、数组实例的fill()\"></a>五、数组实例的fill()</h3><blockquote>\n<p>使用给定值，填充一个数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></div><div class=\"line\"><span class=\"comment\">//从1号位开始，向原数组填充7，到2号位之前结束</span></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure>\n<h3 id=\"六、数组实例的entries-，keys-和values\"><a href=\"#六、数组实例的entries-，keys-和values\" class=\"headerlink\" title=\"六、数组实例的entries()，keys()和values()\"></a>六、数组实例的entries()，keys()和values()</h3><blockquote>\n<p>keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 'a'</span></div><div class=\"line\"><span class=\"comment\">// 'b'</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0 \"a\"</span></div><div class=\"line\"><span class=\"comment\">// 1 \"b\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"七、数组实例的includes\"><a href=\"#七、数组实例的includes\" class=\"headerlink\" title=\"七、数组实例的includes()\"></a>七、数组实例的includes()</h3><blockquote>\n<p>返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似,方法的第二个参数表示搜索的起始位置，默认为0</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h3 id=\"八、数组的空位\"><a href=\"#八、数组的空位\" class=\"headerlink\" title=\"八、数组的空位\"></a>八、数组的空位</h3><blockquote>\n<ul>\n<li>forEach(), filter(), every() 和some()都会跳过空位</li>\n<li>map()会跳过空位，但会保留这个值</li>\n<li>join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// forEach方法</span></div><div class=\"line\">[,<span class=\"string\">'a'</span>].forEach(<span class=\"function\">(<span class=\"params\">x,i</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(i)); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"comment\">// filter方法</span></div><div class=\"line\">[<span class=\"string\">'a'</span>,,<span class=\"string\">'b'</span>].filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"literal\">true</span>) <span class=\"comment\">// ['a','b']</span></div><div class=\"line\"><span class=\"comment\">// every方法</span></div><div class=\"line\">[,<span class=\"string\">'a'</span>].every(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x===<span class=\"string\">'a'</span>) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"comment\">// some方法</span></div><div class=\"line\">[,<span class=\"string\">'a'</span>].some(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x !== <span class=\"string\">'a'</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"comment\">// map方法</span></div><div class=\"line\">[,<span class=\"string\">'a'</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">1</span>) <span class=\"comment\">// [,1]</span></div><div class=\"line\"><span class=\"comment\">// join方法</span></div><div class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>].join(<span class=\"string\">'#'</span>) <span class=\"comment\">// \"#a##\"</span></div><div class=\"line\"><span class=\"comment\">// toString方法</span></div><div class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>].toString() <span class=\"comment\">// \",a,,\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>ES6则是明确将空位转为undefined。尽量建议避免出现空位。</p>\n</blockquote>\n","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6数值的扩展","url":"http://yoursite.com/2017/05/03/读书笔记-es6数值的扩展/","content":"<h2 id=\"数值的扩展\"><a href=\"#数值的扩展\" class=\"headerlink\" title=\"数值的扩展\"></a><strong>数值的扩展</strong></h2><h3 id=\"一、Number-isFinite-Number-isNaN\"><a href=\"#一、Number-isFinite-Number-isNaN\" class=\"headerlink\" title=\"一、Number.isFinite(), Number.isNaN()\"></a>一、Number.isFinite(), Number.isNaN()</h3><blockquote>\n<ul>\n<li>Number.isFinite()  检查一个数值是否为有限的（finite）</li>\n<li>Number.isNaN()  检查一个值是否为NaN</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Number.isFinite()</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">15</span>); <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">0.8</span>); <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">NaN</span>); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">Infinity</span>); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite(-<span class=\"literal\">Infinity</span>); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"string\">'foo'</span>); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"string\">'15'</span>); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">true</span>); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"comment\">//Number.isNaN()</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">15</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">'15'</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">true</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">9</span>/<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">'true'</span>/<span class=\"number\">0</span>) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">'true'</span>/<span class=\"string\">'true'</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h3 id=\"二、Number-parseInt-Number-parseFloat\"><a href=\"#二、Number-parseInt-Number-parseFloat\" class=\"headerlink\" title=\"二、Number.parseInt(), Number.parseFloat()\"></a>二、Number.parseInt(), Number.parseFloat()</h3><blockquote>\n<p>全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>.parseInt === <span class=\"built_in\">parseInt</span> <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.parseFloat === <span class=\"built_in\">parseFloat</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h3 id=\"三、Number-isInteger\"><a href=\"#三、Number-isInteger\" class=\"headerlink\" title=\"三、Number.isInteger()\"></a>三、Number.isInteger()</h3><blockquote>\n<p>判断一个值是否为整数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">25</span>) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">25.0</span>) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">25.1</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"string\">\"15\"</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"literal\">true</span>) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"四、安全整数和Number-isSafeInteger\"><a href=\"#四、安全整数和Number-isSafeInteger\" class=\"headerlink\" title=\"四、安全整数和Number.isSafeInteger()\"></a>四、安全整数和Number.isSafeInteger()</h3><blockquote>\n<p>JavaScript能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。Number.isSafeInteger() 用来判断一个整数是否落在这个范围之内</p>\n</blockquote>\n<h3 id=\"五、Math-trunc\"><a href=\"#五、Math-trunc\" class=\"headerlink\" title=\"五、Math.trunc()\"></a>五、Math.trunc()</h3><blockquote>\n<p>去除一个数的小数部分，返回整数部分</p>\n</blockquote>\n<h3 id=\"六、Math-sign\"><a href=\"#六、Math-sign\" class=\"headerlink\" title=\"六、Math.sign()\"></a>六、Math.sign()</h3><blockquote>\n<p>判断一个数到底是正数、负数、还是零</p>\n<ul>\n<li>参数为正数，返回+1；</li>\n<li>参数为负数，返回-1；</li>\n<li>参数为0，返回0；</li>\n<li>参数为-0，返回-0;</li>\n<li>其他值，返回NaN。</li>\n</ul>\n</blockquote>\n<h3 id=\"七、Math-signbit\"><a href=\"#七、Math-signbit\" class=\"headerlink\" title=\"七、Math.signbit()\"></a>七、Math.signbit()</h3><blockquote>\n<p>判断一个数的符号位是否设置了</p>\n<ul>\n<li>如果参数是NaN，返回false</li>\n<li>如果参数是-0，返回true</li>\n<li>如果参数是负值，返回true</li>\n<li>其他情况返回false</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">2</span>) <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">-2</span>) <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">0</span>) <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">-0</span>) <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h3 id=\"八、指数运算符\"><a href=\"#八、指数运算符\" class=\"headerlink\" title=\"八、指数运算符( ** )\"></a>八、指数运算符( ** )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> <span class=\"comment\">// 4</span></div><div class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 8</span></div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","es6"]},{"title":"DIY一个自己的音乐播放器","url":"http://yoursite.com/2017/04/27/’DIY一个自己的音乐播放器/","content":"<blockquote>\n<p>前言：在最近的一个外包项目<a href=\"http://www.zblmchina.com/#/post\" target=\"_blank\" rel=\"external\">中包联盟</a>(PC端)中使用到了video，遇到了好多坑。突发奇想来踩一踩audio的坑😀，果然一入深似海，👇下面将分享我的DIY之路-Vue音乐播放器。<br>注：本项目为开源项目，不能用于商业应用，仅供学习。有问题或建议发我邮箱：hjingren@aliyun.com</p>\n</blockquote>\n<p>[温馨提示：pc浏览f12手机模式最佳,手机建议wifi下访问]</p>\n<h3 id=\"预览地址：-http-hjingren-cn-magic-music\"><a href=\"#预览地址：-http-hjingren-cn-magic-music\" class=\"headerlink\" title=\"预览地址： http://hjingren.cn/magic-music\"></a><strong>预览地址：</strong> <a href=\"http://hjingren.cn/magic-music\" target=\"_blank\" rel=\"external\">http://hjingren.cn/magic-music</a></h3><h3 id=\"Github地址：-https-github-com-hzzly-MagicMusic\"><a href=\"#Github地址：-https-github-com-hzzly-MagicMusic\" class=\"headerlink\" title=\"Github地址： https://github.com/hzzly/MagicMusic\"></a><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/MagicMusic\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/MagicMusic</a></h3><p>欢迎大家的star啦😄~</p>\n<p>先来个预览：</p>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/magic-music1.gif\" alt=\"magic-music1\"></p>\n<p>更多预览：<a href=\"http://hjingren.cn/magic-music/pic.html\" target=\"_blank\" rel=\"external\">更多</a></p>\n<p>👉老铁们，准备发车(技能点)：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"external\">vue文档</a></li>\n<li><a href=\"https://router.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"external\">vue-router文档</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"external\">vuex文档</a> 不想看文档的可以看看我这篇博客<a href=\"https://hzzly.github.io/2017/04/04/vuex%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"external\">vuex学习实践笔记</a></li>\n<li><a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"external\">axios文档</a> 或者这篇博客 <a href=\"https://blog.ygxdxx.com/2017/02/01/Vuex2&amp;Axios-Develop/\" target=\"_blank\" rel=\"external\">Vuex2 与 Axios 开发</a>(我也是参考这篇，感谢作者😁)</li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">es6(阮一峰的es6入门)</a> 可以参考<a href=\"https://hzzly.github.io/tags/es6/\" target=\"_blank\" rel=\"external\">我的es6之路</a>(还在继续,轻喷)</li>\n<li><a href=\"https://doc.webpack-china.org/\" target=\"_blank\" rel=\"external\">webpack2(中文网站)</a></li>\n<li><a href=\"https://hzzly.github.io/2017/03/25/%E6%B5%85%E8%B0%88Promise/\" target=\"_blank\" rel=\"external\">Promise (浅谈Promise)</a></li>\n<li><a href=\"https://hzzly.github.io/2017/03/03/Web%E7%9A%84Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B/\" target=\"_blank\" rel=\"external\">flex (Web的flex弹性盒模型)</a></li>\n<li><a href=\"https://hzzly.github.io/2017/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E8%A7%A3%E5%86%B3/\" target=\"_blank\" rel=\"external\">移动端屏幕适配的解决 (flexible+rem)</a></li>\n<li><a href=\"https://hzzly.github.io/2017/04/26/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8sessionStorage%E4%B8%8ElocalStorage/\" target=\"_blank\" rel=\"external\">本地存储(sessionStorage、localStorage)</a></li>\n<li><a href=\"https://github.com/hilongjw/vue-lazyload?from=gold\" target=\"_blank\" rel=\"external\">图片懒加载</a></li>\n</ul>\n</blockquote>\n<p>👉坐好，出发</p>\n<h3 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h3><h4 id=\"1、首页\"><a href=\"#1、首页\" class=\"headerlink\" title=\"1、首页\"></a>1、首页</h4><blockquote>\n<ul>\n<li>[x] 轮播</li>\n<li>[x] 个性推荐[流行、古典、轻音乐、流行]</li>\n<li>[x] 歌曲操作<ul>\n<li>[x] 加入播放列表</li>\n<li>[ ] 喜欢</li>\n<li>[ ] 分享</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"2、底部播放控件\"><a href=\"#2、底部播放控件\" class=\"headerlink\" title=\"2、底部播放控件\"></a>2、底部播放控件</h4><blockquote>\n<ul>\n<li>[x] 播放</li>\n<li>[x] 暂停</li>\n<li>[x] 下一曲</li>\n<li>[x] 播放进度条</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"3、播放页面\"><a href=\"#3、播放页面\" class=\"headerlink\" title=\"3、播放页面\"></a>3、播放页面</h4><blockquote>\n<ul>\n<li>[x] 上一曲</li>\n<li>[x] 播放</li>\n<li>[x] 暂停</li>\n<li>[x] 下一曲</li>\n<li>[x] 播放进度条[弧形进度条]</li>\n<li>[x] 歌词滚动</li>\n<li>[x] 播放的歌词高亮</li>\n<li>[ ] 播放模式[单曲循环、列表循环、随机播放]</li>\n</ul>\n</blockquote>\n<h4 id=\"4、播放列表\"><a href=\"#4、播放列表\" class=\"headerlink\" title=\"4、播放列表\"></a>4、播放列表</h4><blockquote>\n<ul>\n<li>[x] 播放歌曲高亮</li>\n<li>[x] 切歌(单击切歌)</li>\n<li>[x] 删歌(点击右侧小X)</li>\n<li>[ ] 清空播放列表</li>\n<li>[ ] 本地缓存播放列表</li>\n</ul>\n</blockquote>\n<h4 id=\"5、排行榜\"><a href=\"#5、排行榜\" class=\"headerlink\" title=\"5、排行榜\"></a>5、排行榜</h4><blockquote>\n<ul>\n<li>[x] 热门排行榜</li>\n<li>[x] 排行榜里的歌曲(单击播放)</li>\n</ul>\n</blockquote>\n<h4 id=\"6、音乐搜索\"><a href=\"#6、音乐搜索\" class=\"headerlink\" title=\"6、音乐搜索\"></a>6、音乐搜索</h4><p>输入搜索关键词，点击<code>放大镜</code>图标</p>\n<blockquote>\n<ul>\n<li>[x] 单曲(单击或点击歌曲操作(…)添加至音乐播放列表，部分音乐会存在版权问题无法播放)</li>\n<li>[x] 歌手</li>\n<li>[x] 专辑</li>\n<li>[x] 歌单</li>\n<li>[x] 用户</li>\n<li>[x] 本地缓存搜索列表</li>\n</ul>\n</blockquote>\n<h4 id=\"7、侧边栏\"><a href=\"#7、侧边栏\" class=\"headerlink\" title=\"7、侧边栏\"></a>7、侧边栏</h4><blockquote>\n<ul>\n<li>[x] 头像</li>\n<li>[x] 菜单<ul>\n<li>[x] 个人中心</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>感谢作者把api整理的这么好(点个赞👍)</p>\n<blockquote>\n<p><a href=\"https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=%e6%90%9c%e7%b4%a2%e9%9f%b3%e4%b9%90\" target=\"_blank\" rel=\"external\">网易云音乐 NodeJS 版 API</a></p>\n</blockquote>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">|——MagicMusic/</div><div class=\"line\">|   |——build/</div><div class=\"line\">|   |——confg/</div><div class=\"line\">|   |——node_modules/</div><div class=\"line\">|   |——src/</div><div class=\"line\">|   |   |——assets/                 //静态文件</div><div class=\"line\">|   |   |——components/             //公共组件</div><div class=\"line\">|   |   |——api/</div><div class=\"line\">|   |   |   |——index.js            //axios封装与api</div><div class=\"line\">|   |   |——pages/                  //存放项目页面</div><div class=\"line\">|   |   |   |——classical.vue       //古典歌曲页面</div><div class=\"line\">|   |   |   |——collection.vue      //排行榜</div><div class=\"line\">|   |   |   |——home.vue            //首页</div><div class=\"line\">|   |   |   |——light.vue           //轻音乐歌曲页面</div><div class=\"line\">|   |   |   |——login.vue           //登录页面</div><div class=\"line\">|   |   |   |——popular.vue         //流行歌曲页面</div><div class=\"line\">|   |   |   |——radio.vue           //电台歌曲页面</div><div class=\"line\">|   |   |   |——rank.vue            //排行榜列表</div><div class=\"line\">|   |   |   |——search.vue          //搜索页</div><div class=\"line\">|   |   |   |——user.vue            //用户</div><div class=\"line\">|   |   |——router/                 </div><div class=\"line\">|   |   |   |——index.js            //页面路由</div><div class=\"line\">|   |   |——util                    //公用方法</div><div class=\"line\">|   |   |——vuex /                  //存放vuex代码</div><div class=\"line\">|   |   |   |——modules /           //数据模块</div><div class=\"line\">|   |   |   |——store.js            //vuex主入口</div><div class=\"line\">|   |   |   |——types.js            //vuex的types文件</div><div class=\"line\">|   |   |——App.vue                 //父组件</div><div class=\"line\">|   |   |——main.js                 //入口文件</div><div class=\"line\">|   |——static/</div><div class=\"line\">|   |——.babelrc</div><div class=\"line\">|   |——.editorconfig</div><div class=\"line\">|   |——.gitgnore</div><div class=\"line\">|   |——index.html</div><div class=\"line\">|   |——package.json</div><div class=\"line\">|   |——README.md</div></pre></td></tr></table></figure>\n<h3 id=\"开发心得与总结\"><a href=\"#开发心得与总结\" class=\"headerlink\" title=\"开发心得与总结\"></a>开发心得与总结</h3><h4 id=\"1、轮播图\"><a href=\"#1、轮播图\" class=\"headerlink\" title=\"1、轮播图\"></a>1、轮播图</h4><p>首先感谢作者<a href=\"https://github.com/ShanaMaid/vue-image-scroll\" target=\"_blank\" rel=\"external\">ShanaMaid/vue-image-scroll</a>开源的代码，我把代码copy下来自己进行了一点修改(没有手指滑动效果)，因为这是移动端，少不了的手指滑动切换，所以添加了<a href=\"https://github.com/vuejs/vue-touch#next\" target=\"_blank\" rel=\"external\">vue-touch</a>(偷偷告诉你，vue-touch的next分支还是支持vue2.0的😜)。<a href=\"https://github.com/hzzly/MagicMusic/blob/master/src/components/banner.vue\" target=\"_blank\" rel=\"external\">代码传送门</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) in image\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[move[index]]\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">v-touch</span> <span class=\"attr\">class</span>=<span class=\"string\">\"vuetouch\"</span></span></div><div class=\"line\">            <span class=\"attr\">v-on:swipeleft</span>=<span class=\"string\">\"nextPic\"</span></div><div class=\"line\">            <span class=\"attr\">v-on:swiperight</span>=<span class=\"string\">\"prePic\"</span>&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">v-touch</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">    nextPic(event) &#123;</div><div class=\"line\">        let temp = this.move.pop()</div><div class=\"line\">        this.move.unshift(temp)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    prePic(event) &#123;</div><div class=\"line\">        let temp = this.move.shift()</div><div class=\"line\">        this.move.push(temp)</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2、歌曲操作-喜欢，分享，加入播放列表-动画、播放列表展开与删除歌曲动画\"><a href=\"#2、歌曲操作-喜欢，分享，加入播放列表-动画、播放列表展开与删除歌曲动画\" class=\"headerlink\" title=\"2、歌曲操作(喜欢，分享，加入播放列表)动画、播放列表展开与删除歌曲动画\"></a>2、歌曲操作(喜欢，分享，加入播放列表)动画、播放列表展开与删除歌曲动画</h4><blockquote>\n<p><code>Vue</code>提供了<code>transition</code>的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过渡</p>\n<ul>\n<li>条件渲染 （使用 v-if）</li>\n<li>条件展示 （使用 v-show）</li>\n<li>动态组件</li>\n<li>组件根节点</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;transition name=\"move\"&gt;</div><div class=\"line\">    &lt;div class=\"menu\" v-show=\"item.menuShow\"&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/transition&gt;</div><div class=\"line\">&lt;transition-group name=\"slide\" tag=\"div\" class=\"list-wrapper\"&gt;</div><div class=\"line\">    &lt;div class=\"item\" v-for=\"(item, index) in listenLists\" :key=\"item\"&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/transition-group&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>transition-group</code>一组过度动画，这里有个小坑的，之前看官网列表过渡的栗子，给每一项设置唯一的key值，一般都会用index。所以在做的时候就把index传给key，结果过渡老是不对，后来换成对应的<code>item</code>就正常了(生无可恋脸)。</p>\n</blockquote>\n<h4 id=\"3、直线进度条、弧形进度条\"><a href=\"#3、直线进度条、弧形进度条\" class=\"headerlink\" title=\"3、直线进度条、弧形进度条\"></a>3、直线进度条、弧形进度条</h4><blockquote>\n<p>西班牙建筑大师曾说过：“直线属于人类，曲线则归于上帝”。在这里我大胆的使用了弧形来作为进度条，(几大热门音乐APP貌似还没有弧形进度条😄)。</p>\n</blockquote>\n<p>这里我用到了Vue的<strong>绑定内联样式</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//直线进度条</div><div class=\"line\">&lt;div class=\"progress-bar\"&gt;</div><div class=\"line\">    &lt;div class=\"play\"</div><div class=\"line\">        :style=\"&#123;width: (now / duration).toFixed(3)*100 + '%'&#125;\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">//弧形进度条</div><div class=\"line\">//因为用到了弧形，所以我这里用到了`border-radius`来使它变成一个大圆，然后平移`translateX`居中，其它不要的部分`overflow: hidden`。</div><div class=\"line\">//这里用两个div来表示进度条，一条固定的进度条，一条慢慢增加。</div><div class=\"line\">&lt;div class=\"process\" @click=\"showToast\"&gt;</div><div class=\"line\">    &lt;div class=\"line\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=\"pro\" :style=\"&#123;transform: `translateX($&#123;translateX&#125;) rotate($&#123;deg*1 + 56.5*((now / size).toFixed(3))&#125;deg)`&#125;\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4、本地存储\"><a href=\"#4、本地存储\" class=\"headerlink\" title=\"4、本地存储\"></a>4、本地存储</h4><blockquote>\n<p>将一些数据缓存到localStorage，可以减少Http请求，从而优化页面加载时间。</p>\n</blockquote>\n<p>在这个项目中首页歌曲列表以及搜索历史用到了本地缓存，拿搜索历史来举栗：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">created() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!localStorage.searchHistory) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> searchHistory = [<span class=\"string\">'前端'</span>, <span class=\"string\">'童话镇'</span>, <span class=\"string\">'刚好遇见你'</span>]</div><div class=\"line\">        localStorage.searchHistory = <span class=\"built_in\">JSON</span>.stringify(searchHistory)</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    _search(keywords) &#123;</div><div class=\"line\">        <span class=\"comment\">//判断搜索列表中是否已存在</span></div><div class=\"line\">        <span class=\"keyword\">let</span> searchHistory = <span class=\"built_in\">JSON</span>.parse(localStorage.searchHistory)</div><div class=\"line\">        <span class=\"keyword\">let</span> find = searchHistory.findIndex(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> val === keywords</div><div class=\"line\">        &#125;)</div><div class=\"line\">        find === <span class=\"number\">-1</span> ? localStorage.searchHistory = <span class=\"built_in\">JSON</span>.stringify([keywords, ...searchHistory]) : <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"5、图片懒加载\"><a href=\"#5、图片懒加载\" class=\"headerlink\" title=\"5、图片懒加载\"></a>5、图片懒加载</h4><p>使用了<a href=\"https://github.com/hilongjw/vue-lazyload?from=gold\" target=\"_blank\" rel=\"external\">vue-lazyload</a>插件<br>用法👉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install vue-lazyload</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//main.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> VueLazyLoad <span class=\"keyword\">from</span> <span class=\"string\">'vue-lazyload'</span></div><div class=\"line\"><span class=\"keyword\">import</span> def_lazy_img <span class=\"keyword\">from</span> <span class=\"string\">'../static/img/loading.gif'</span> <span class=\"comment\">//懒加载的默认图片</span></div><div class=\"line\">Vue.use(VueLazyLoad,&#123;</div><div class=\"line\">    <span class=\"attr\">loading</span>: def_lazy_img</div><div class=\"line\">&#125;) <span class=\"comment\">//使用懒加载组件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在使用img标签的地方使用</span></div><div class=\"line\">&lt;img v-lazy=<span class=\"string\">\"item.al.picUrl\"</span> alt=<span class=\"string\">\"\"</span>&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"6、歌词滚动与高亮\"><a href=\"#6、歌词滚动与高亮\" class=\"headerlink\" title=\"6、歌词滚动与高亮\"></a>6、歌词滚动与高亮</h4><p>因为api提供的歌词包括时间，如：<code>[03:57.280]原谅我这一生不羁放纵爱自由</code><br>所以首先要进行字符串切割：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=\"lyric\"&gt;</div><div class=\"line\">    &lt;div class=\"roll-lyric\" v-html=\"lyrics\" ref=\"lyric\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">computed: &#123;</div><div class=\"line\">    lyrics() &#123;</div><div class=\"line\">        let lyrics = ''</div><div class=\"line\">        this.lyricArr = []</div><div class=\"line\">        if (this.lyric) &#123;</div><div class=\"line\">            let arr = this.lyric.split('\\n')</div><div class=\"line\">            for (let item of arr) &#123;</div><div class=\"line\">                if (item) &#123;</div><div class=\"line\">                    let arr2 = item.split(']')</div><div class=\"line\">                    this.lyricArr.push(arr2[0].substring(1,3)*60+arr2[0].substring(4)*1)</div><div class=\"line\">                    if (arr2) &#123;</div><div class=\"line\">                        lyrics += `&lt;p class='lyrichook' style='margin: 10px 0'&gt;$&#123;arr2[1]&#125;&lt;/p&gt;`</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            lyrics = '暂无歌词~'</div><div class=\"line\">        &#125;</div><div class=\"line\">        return lyrics</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在播放的监听事件中与播放的当前做对比：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$refs.myAudio.addEventListener(<span class=\"string\">'play'</span>, () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pDOM = [...document.querySelectorAll(<span class=\"string\">'.lyrichook'</span>)]</div><div class=\"line\">    timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.now = audioDOM.currentTime</div><div class=\"line\">        <span class=\"keyword\">this</span>.lyricArr.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(item) == <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.now)) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.pDOM.forEach(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</div><div class=\"line\">                    p.style.color = <span class=\"string\">'rgba(255,255,255,.8)'</span> <span class=\"comment\">//其它歌词清除高亮</span></div><div class=\"line\">                &#125;);</div><div class=\"line\">                <span class=\"keyword\">this</span>.pDOM[index].style.color = <span class=\"string\">'#f12c61'</span> <span class=\"comment\">//歌词高亮</span></div><div class=\"line\">                <span class=\"keyword\">this</span>.$refs.lyric.style.transform = <span class=\"string\">`translateY(-<span class=\"subst\">$&#123;(index<span class=\"number\">-2</span>)*<span class=\"number\">25</span>&#125;</span>px)`</span> <span class=\"comment\">//歌词滚动</span></div><div class=\"line\">            &#125; </div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>到这就ok了😜</p>\n<h4 id=\"7、vuex状态管理\"><a href=\"#7、vuex状态管理\" class=\"headerlink\" title=\"7、vuex状态管理\"></a>7、vuex状态管理</h4><p>推荐官方调试工具 <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">devtools extension</a></p>\n<blockquote>\n<p>想进一步理解vuex，可以看这篇博客<a href=\"https://hzzly.github.io/2017/04/04/vuex%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"external\">vuex学习实践笔记</a></p>\n</blockquote>\n<p>之前看到好多人写的vuex，把整个项目的数据放到了一个state里，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。</p>\n<blockquote>\n<p>所以我建议(个人见解，轻喷)：将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters。这样方便管理与后期的维护。</p>\n</blockquote>\n<p>车已到站✌️。</p>\n<p>不知不觉写了这么多，老铁们凑合这看吧😁，觉得还行的可以点个star，<strong>你的star是我继续开源创作的动力</strong>，谢谢！！！</p>\n<p><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/MagicMusic\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/MagicMusic</a><br>欢迎大家的star啦~</p>\n","categories":[],"tags":["随笔","vue"]},{"title":"本地存储sessionStorage与localStorage","url":"http://yoursite.com/2017/04/26/本地存储sessionStorage与localStorage/","content":"<blockquote>\n<ul>\n<li>sessionStorage 数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时， 之前的存储已经被清除。</li>\n<li>localStorage 是一个持久化的存储，它并不局限于会话。除非主动删除数据，否则数据是永远不会过期的。</li>\n</ul>\n</blockquote>\n<h3 id=\"一、localStorage和sessionStorage操作\"><a href=\"#一、localStorage和sessionStorage操作\" class=\"headerlink\" title=\"一、localStorage和sessionStorage操作\"></a>一、localStorage和sessionStorage操作</h3><blockquote>\n<p>localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等</p>\n</blockquote>\n<h3 id=\"1-setItem存储value\"><a href=\"#1-setItem存储value\" class=\"headerlink\" title=\"1.setItem存储value\"></a>1.setItem存储value</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sessionStorage.setItem(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"hzzly\"</span>);</div><div class=\"line\">localStorage.setItem(<span class=\"string\">\"blog\"</span>, <span class=\"string\">\"hzzly.github.io\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"2-getItem获取value\"><a href=\"#2-getItem获取value\" class=\"headerlink\" title=\"2.getItem获取value\"></a>2.getItem获取value</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name = sessionStorage.getItem(<span class=\"string\">\"name\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> blog = localStorage.getItem(<span class=\"string\">\"blog\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-removeItem删除key\"><a href=\"#3-removeItem删除key\" class=\"headerlink\" title=\"3.removeItem删除key\"></a>3.removeItem删除key</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sessionStorage.removeItem(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">localStorage.removeItem(<span class=\"string\">\"blog\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"4-clear清除所有的key-value\"><a href=\"#4-clear清除所有的key-value\" class=\"headerlink\" title=\"4.clear清除所有的key/value\"></a>4.clear清除所有的key/value</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sessionStorage.clear();</div><div class=\"line\">localStorage.clear();</div></pre></td></tr></table></figure>\n<h3 id=\"5-其他操作方法：点操作和\"><a href=\"#5-其他操作方法：点操作和\" class=\"headerlink\" title=\"5.其他操作方法：点操作和[]\"></a>5.其他操作方法：点操作和[]</h3><blockquote>\n<p>web Storage不但可以用自身的setItem,getItem等方便存取，也可以像普通对象一样用点(.)操作符，及[]的方式进行数据存储及读取，像如下的代码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//存</span></div><div class=\"line\">localStorage.name = <span class=\"string\">\"hzzly\"</span>; </div><div class=\"line\">localStorage[<span class=\"string\">\"age\"</span>] = <span class=\"string\">\"21\"</span>; </div><div class=\"line\">sessionStorage.name = <span class=\"string\">\"hzzly\"</span>; </div><div class=\"line\">sessionStorage[<span class=\"string\">\"age\"</span>] = <span class=\"string\">\"21\"</span>;</div><div class=\"line\"><span class=\"comment\">//取</span></div><div class=\"line\"><span class=\"keyword\">let</span> name1 = localStorage.name</div><div class=\"line\"><span class=\"keyword\">let</span> age1 = localStorage[<span class=\"string\">\"age\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> name2 = sessionStorage.name</div><div class=\"line\"><span class=\"keyword\">let</span> age2 = sessionStorage[<span class=\"string\">\"age\"</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"6-localStorage和sessionStorage的key和length属性实现遍历\"><a href=\"#6-localStorage和sessionStorage的key和length属性实现遍历\" class=\"headerlink\" title=\"6.localStorage和sessionStorage的key和length属性实现遍历\"></a>6.localStorage和sessionStorage的key和length属性实现遍历</h3><blockquote>\n<p>sessionStorage和localStorage提供的key()和length可以方便的实现存储的数据遍历，例如下面的代码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> storage = <span class=\"built_in\">window</span>.localStorage; </div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len = storage.length; i  &lt;  len; i++)&#123;     </div><div class=\"line\">\t<span class=\"keyword\">let</span> key = storage.key(i);     </div><div class=\"line\">\t<span class=\"keyword\">let</span> value = storage.getItem(key);     </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">\"=\"</span> + value); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二、实例\"><a href=\"#二、实例\" class=\"headerlink\" title=\"二、实例\"></a>二、实例</h3><blockquote>\n<p>storage只能存储字符串的数据，对于JS中常用的数组或对象却不能直接存储，可以用下面两个方法进行转换：</p>\n<ul>\n<li>JSON.stringify() 用于从一个对象解析出字符串</li>\n<li>JSON.parse() 用于从一个字符串中解析出json对象</li>\n</ul>\n</blockquote>\n<h3 id=\"1-localStorage-sessionStorage存取数组\"><a href=\"#1-localStorage-sessionStorage存取数组\" class=\"headerlink\" title=\"1.localStorage/sessionStorage存取数组\"></a>1.localStorage/sessionStorage存取数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//存</span></div><div class=\"line\"><span class=\"keyword\">let</span> language = [<span class=\"string\">'HTML/HTML5'</span>, <span class=\"string\">'CSS/CSS3'</span>, <span class=\"string\">'JavaScript'</span>, <span class=\"string\">'Vue'</span>, <span class=\"string\">'React'</span>]</div><div class=\"line\">localStorage.language = <span class=\"built_in\">JSON</span>.stringify(language)</div><div class=\"line\">sessionStorag.language = <span class=\"built_in\">JSON</span>.stringify(language)</div><div class=\"line\"><span class=\"comment\">//取</span></div><div class=\"line\"><span class=\"keyword\">let</span> storageLanguage = <span class=\"built_in\">JSON</span>.parse(localStorage.language)</div></pre></td></tr></table></figure>\n<h3 id=\"2-localStorage存取对象\"><a href=\"#2-localStorage存取对象\" class=\"headerlink\" title=\"2.localStorage存取对象\"></a>2.localStorage存取对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//存</span></div><div class=\"line\"><span class=\"keyword\">let</span> myInfo = &#123;</div><div class=\"line\">\t<span class=\"string\">'name'</span>: <span class=\"string\">'hzzly'</span>,</div><div class=\"line\">\t<span class=\"string\">'age'</span>: <span class=\"number\">21</span>,</div><div class=\"line\">\t<span class=\"string\">'school'</span>: <span class=\"string\">'ECUT'</span>,</div><div class=\"line\">\t<span class=\"string\">'city'</span>: <span class=\"string\">'NanChang'</span></div><div class=\"line\">&#125;</div><div class=\"line\">localStorage.myInfo = <span class=\"built_in\">JSON</span>.stringify(myInfo)</div><div class=\"line\">sessionStorag.myInfo = <span class=\"built_in\">JSON</span>.stringify(myInfo)</div><div class=\"line\"><span class=\"comment\">//取</span></div><div class=\"line\"><span class=\"keyword\">let</span> storageLanguage = <span class=\"built_in\">JSON</span>.parse(localStorage.myInfo)</div></pre></td></tr></table></figure>","categories":[],"tags":["随笔"]},{"title":"读书笔记-es6字符串的扩展","url":"http://yoursite.com/2017/04/22/读书笔记-es6字符串的扩展/","content":"<h2 id=\"字符串的扩展\"><a href=\"#字符串的扩展\" class=\"headerlink\" title=\"字符串的扩展\"></a><strong>字符串的扩展</strong></h2><h3 id=\"一、字符串的遍历器接口\"><a href=\"#一、字符串的遍历器接口\" class=\"headerlink\" title=\"一、字符串的遍历器接口\"></a>一、字符串的遍历器接口</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> codePoint <span class=\"keyword\">of</span> <span class=\"string\">'foo'</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(codePoint)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// \"f\"</span></div><div class=\"line\"><span class=\"comment\">// \"o\"</span></div><div class=\"line\"><span class=\"comment\">// \"o\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"二、at\"><a href=\"#二、at\" class=\"headerlink\" title=\"二、at\"></a>二、at</h3><p>返回字符串给定位置的字符<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//es5</span></div><div class=\"line\"><span class=\"string\">'abc'</span>.charAt(<span class=\"number\">0</span>) <span class=\"comment\">// \"a\"</span></div><div class=\"line\"><span class=\"comment\">//es6</span></div><div class=\"line\"><span class=\"string\">'abc'</span>.at(<span class=\"number\">0</span>) <span class=\"comment\">// \"a\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"三、indexOf-includes-startsWith-endsWith\"><a href=\"#三、indexOf-includes-startsWith-endsWith\" class=\"headerlink\" title=\"三、indexOf(), includes(), startsWith(), endsWith()\"></a>三、indexOf(), includes(), startsWith(), endsWith()</h3><blockquote>\n<ul>\n<li>indexOf() 确定一个字符串是否包含在另一个字符串中(es5)</li>\n<li>includes() 返回布尔值，表示是否找到了参数字符串。</li>\n<li>startsWith() 返回布尔值，表示参数字符串是否在源字符串的头部。</li>\n<li>endsWith()返回布尔值，表示参数字符串是否在源字符串的尾部。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\">s.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>支持第二个参数，表示开始搜索的位置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\">s.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p>\n</blockquote>\n<h3 id=\"四、repeat\"><a href=\"#四、repeat\" class=\"headerlink\" title=\"四、repeat()\"></a>四、repeat()</h3><blockquote>\n<p>返回一个新字符串，表示将原字符串重复n次。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></div><div class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"五、padStart-，padEnd\"><a href=\"#五、padStart-，padEnd\" class=\"headerlink\" title=\"五、padStart()，padEnd()\"></a>五、padStart()，padEnd()</h3><blockquote>\n<p>字符串补全长度</p>\n<ul>\n<li>padStart() 头部补全</li>\n<li>padEnd() 尾部补全<br>第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。如果省略第二个参数，默认使用空格补全长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'ababx'</span></div><div class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'abax'</span></div><div class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xabab'</span></div><div class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xaba'</span></div></pre></td></tr></table></figure>\n<h3 id=\"六、模板字符串\"><a href=\"#六、模板字符串\" class=\"headerlink\" title=\"六、模板字符串\"></a>六、模板字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></div><div class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"hzzly\"</span>, time = <span class=\"string\">\"today\"</span>;</div><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>, how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span></div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6变量的解构赋值","url":"http://yoursite.com/2017/04/21/读书笔记-es6变量的解构赋值/","content":"<h2 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a><strong>变量的解构赋值</strong></h2><blockquote>\n<p>这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n</blockquote>\n<h3 id=\"一、数组的解构赋值\"><a href=\"#一、数组的解构赋值\" class=\"headerlink\" title=\"一、数组的解构赋值\"></a>一、数组的解构赋值</h3><p>数组的元素是按次序排列的，变量的取值由它的位置决定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\">a <span class=\"comment\">// 1</span></div><div class=\"line\">b <span class=\"comment\">// 2</span></div><div class=\"line\">c <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">head <span class=\"comment\">// 1</span></div><div class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>默认值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</div><div class=\"line\">foo <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h4 id=\"栗子：\"><a href=\"#栗子：\" class=\"headerlink\" title=\"栗子：\"></a>栗子：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 返回一个数组</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</div></pre></td></tr></table></figure>\n<h3 id=\"二、对象的解构赋值\"><a href=\"#二、对象的解构赋值\" class=\"headerlink\" title=\"二、对象的解构赋值\"></a>二、对象的解构赋值</h3><p>对象的属性没有次序，变量必须与属性同名，才能取到正确的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>默认值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</div><div class=\"line\">x <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<h4 id=\"栗子：-1\"><a href=\"#栗子：-1\" class=\"headerlink\" title=\"栗子：\"></a>栗子：</h4><blockquote>\n<ul>\n<li>将现有对象的方法，赋值到某个变量。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span>    </div><div class=\"line\"><span class=\"comment\">// 返回一个对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>提取json数据</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</div><div class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>,</div><div class=\"line\">  <span class=\"attr\">status</span>: <span class=\"string\">\"OK\"</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</div><div class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></div></pre></td></tr></table></figure>\n<h3 id=\"三、字符串的解构赋值\"><a href=\"#三、字符串的解构赋值\" class=\"headerlink\" title=\"三、字符串的解构赋值\"></a>三、字符串的解构赋值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hzzly'</span></div><div class=\"line\">a <span class=\"comment\">// \"h\"</span></div><div class=\"line\">b <span class=\"comment\">// \"z\"</span></div><div class=\"line\">c <span class=\"comment\">// \"z\"</span></div><div class=\"line\">d <span class=\"comment\">// \"l\"</span></div><div class=\"line\">e <span class=\"comment\">// \"y\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//length属性</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</div><div class=\"line\">len <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<h3 id=\"四、函数参数的解构赋值\"><a href=\"#四、函数参数的解构赋值\" class=\"headerlink\" title=\"四、函数参数的解构赋值\"></a>四、函数参数的解构赋值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","es6"]},{"title":"读书笔记-es6let与const","url":"http://yoursite.com/2017/04/09/读书笔记-es6let与const/","content":"<h2 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a><strong>let和const</strong></h2><blockquote>\n<p>两种新的声明变量的方法</p>\n</blockquote>\n<h3 id=\"一、let\"><a href=\"#一、let\" class=\"headerlink\" title=\"一、let\"></a>一、let</h3><p>用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>\n<blockquote>\n<ul>\n<li>1.块级作用域</li>\n<li>2.不存在变量提升</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>3.暂时性死区</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p>\n<blockquote>\n<ul>\n<li>4.不允许重复声明</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二、const\"><a href=\"#二、const\" class=\"headerlink\" title=\"二、const\"></a>二、const</h3><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const一旦声明变量，就必须立即初始化，不能留到以后赋值。<br>只在声明所在的块级作用域内有效。</p>\n<blockquote>\n<p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div><div class=\"line\">foo.prop <span class=\"comment\">// 123</span></div><div class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></div><div class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p>\n</blockquote>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/learn-es6\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/learn-es6</a></p>\n<p>文章来源<a href=\"https://hzzly.github.io/\" target=\"_blank\" rel=\"external\">hzzly博客技术分享</a></p>\n","categories":[],"tags":["随笔","es6"]},{"title":"vuex学习实践笔记","url":"http://yoursite.com/2017/04/04/vuex学习实践笔记/","content":"<h3 id=\"Vuex是什么？\"><a href=\"#Vuex是什么？\" class=\"headerlink\" title=\"Vuex是什么？\"></a><strong>Vuex是什么？</strong></h3><blockquote>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n</blockquote>\n<p>栗如(travel store)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> types <span class=\"keyword\">from</span> <span class=\"string\">'../types'</span></div><div class=\"line\"><span class=\"comment\">//数据</span></div><div class=\"line\"><span class=\"keyword\">const</span> state = &#123;</div><div class=\"line\">    <span class=\"attr\">travelsList</span>: [],</div><div class=\"line\">    <span class=\"attr\">searchKey</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">page</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">limit</span>: <span class=\"number\">20</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">scroll</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//用户行为(可以处理异步),触发 mutations 来改变 state</span></div><div class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取约跑步列表</div><div class=\"line\">     */</div><div class=\"line\">    getTravelsList(&#123; commit &#125;) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(state.scroll) &#123;</div><div class=\"line\">            commit(types.GET_TRAVELS_PAGE_NUM)</div><div class=\"line\">            commit(types.COM_LOADING_STATUS, <span class=\"literal\">true</span>),</div><div class=\"line\">            commit(types.GET_TRAVELS_SCORLL_STATUS, <span class=\"literal\">false</span>)</div><div class=\"line\">            api.TravelsList()</div><div class=\"line\">                .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(res)</div><div class=\"line\">                    commit(types.COM_LOADING_STATUS, <span class=\"literal\">false</span>),</div><div class=\"line\">                    commit(types.GET_TRAVELS_SCORLL_STATUS, <span class=\"literal\">true</span>)</div><div class=\"line\">                    commit(types.GET_TRAVELS_LIST, res)</div><div class=\"line\">                &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 参加</div><div class=\"line\">     */</div><div class=\"line\">    joinTravel(&#123; commit &#125;, id) &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//可以过滤 state 中的数据</span></div><div class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</div><div class=\"line\">    <span class=\"attr\">travelsList</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.travelsList,</div><div class=\"line\">    <span class=\"attr\">travelListIndex</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.travelsList.slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//唯一能改变 state 的方法(纯函数)</span></div><div class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</div><div class=\"line\">    [types.GET_TRAVELS_LIST](state, res) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(state.searchKey.page &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            state.travelsList = res.data</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            state.travelsList = state.travelsList.concat(res.data)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    [types.GET_TRAVELS_SEARCH_KEY](state, params) &#123;</div><div class=\"line\">        state.searchKey = params</div><div class=\"line\">    &#125;,</div><div class=\"line\">    [types.GET_TRAVELS_PAGE_NUM](state) &#123;</div><div class=\"line\">        state.searchKey[<span class=\"string\">'page'</span>] += <span class=\"number\">1</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    [types.GET_TRAVELS_SCORLL_STATUS](state, status) &#123;</div><div class=\"line\">        state.scroll = status</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//导出一个 travel store 模块</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    state,</div><div class=\"line\">    actions,</div><div class=\"line\">    getters,</div><div class=\"line\">    mutations</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>每一个 Vuex 应用的核心就是 store（仓库）。”store” 基本上就是一个容器，它包含着你的应用中大部分的状态(state)数据。</p>\n<blockquote>\n<ul>\n<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>\n<li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交(commit) mutations。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>\n</ul>\n</blockquote>\n<p>用一张图来理解一下<br><img src=\"http://omt3u4bph.bkt.clouddn.com/vuex2.jpg\" alt=\"vuex\"></p>\n<blockquote>\n<p>客户端(Client) -&gt; action -&gt; mutations -&gt; state -&gt; 客户端</p>\n</blockquote>\n<p>可以看出在vuex中数据是单一流向的：视图(view)触发action，action提交(commit)到mutations，mutations改变state(数据)，state的改变，相应的组件也会相应的更新。</p>\n<a id=\"more\"></a>\n<h3 id=\"1-State\"><a href=\"#1-State\" class=\"headerlink\" title=\"1.State\"></a><strong>1.State</strong></h3><blockquote>\n<p>单一状态树，唯一数据源，能够直接清晰的读懂数据的结构。</p>\n</blockquote>\n<h4 id=\"1-1在-Vue-组件中获得数据\"><a href=\"#1-1在-Vue-组件中获得数据\" class=\"headerlink\" title=\"1.1在 Vue 组件中获得数据\"></a>1.1在 Vue 组件中获得数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//store</span></div><div class=\"line\"><span class=\"keyword\">const</span> state = &#123;</div><div class=\"line\">    <span class=\"attr\">travelsList</span>: [],</div><div class=\"line\">    <span class=\"attr\">searchKey</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">page</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">limit</span>: <span class=\"number\">20</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">scroll</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在view中直接获取</span></div><div class=\"line\">data () &#123; </div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    \t<span class=\"attr\">scroll</span>: <span class=\"keyword\">this</span>.$store.state.scroll</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h4 id=\"1-2mapState-辅助函数\"><a href=\"#1-2mapState-辅助函数\" class=\"headerlink\" title=\"1.2mapState 辅助函数\"></a>1.2mapState 辅助函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: mapState([</div><div class=\"line\">\t<span class=\"comment\">// 映射 this.scroll 为 this.$store.state.scroll</span></div><div class=\"line\">\t<span class=\"string\">'scroll'</span></div><div class=\"line\">])</div><div class=\"line\"><span class=\"comment\">//或对象展开运算符</span></div><div class=\"line\">computed: &#123;</div><div class=\"line\">\t...mapState(&#123;</div><div class=\"line\">\t\t<span class=\"string\">'scroll'</span></div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-Getters\"><a href=\"#2-Getters\" class=\"headerlink\" title=\"2.Getters\"></a><strong>2.Getters</strong></h3><blockquote>\n<p>对state数据进行过滤或直接返回</p>\n</blockquote>\n<h4 id=\"2-1在-Vue-组件中获得Getters数据\"><a href=\"#2-1在-Vue-组件中获得Getters数据\" class=\"headerlink\" title=\"2.1在 Vue 组件中获得Getters数据\"></a>2.1在 Vue 组件中获得Getters数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//store</span></div><div class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</div><div class=\"line\">    <span class=\"attr\">travelsList</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.travelsList,</div><div class=\"line\">    <span class=\"attr\">travelListIndex</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.travelsList.slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在view中直接获取</span></div><div class=\"line\">data () &#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">travelListIndex</span>: <span class=\"keyword\">this</span>.$store.getters.travelListIndex</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h4 id=\"2-2mapGetters-辅助函数\"><a href=\"#2-2mapGetters-辅助函数\" class=\"headerlink\" title=\"2.2mapGetters 辅助函数\"></a>2.2mapGetters 辅助函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: mapGetters([</div><div class=\"line\">    <span class=\"comment\">// 映射 this.travelListIndex 为 this.$store.state.travelListIndex</span></div><div class=\"line\">    <span class=\"string\">'travelListIndex'</span></div><div class=\"line\">])</div><div class=\"line\"><span class=\"comment\">//或对象展开运算符</span></div><div class=\"line\">computed: &#123;</div><div class=\"line\">    ...mapGetters(&#123;</div><div class=\"line\">        <span class=\"string\">'travelListIndex'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-Mutations\"><a href=\"#3-Mutations\" class=\"headerlink\" title=\"3.Mutations\"></a><strong>3.Mutations</strong></h3><blockquote>\n<p>要更改 Vuex 的 store 中的数据，唯一方法是提交 mutation。每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行数据更改的地方。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</div><div class=\"line\">    <span class=\"comment\">//使用常量替代 Mutation 事件类型</span></div><div class=\"line\">    [types.GET_TRAVELS_LIST](state, res) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(state.searchKey.page &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            state.travelsList = res.data</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            state.travelsList = state.travelsList.concat(res.data)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>当我们在这改变数据时，其它引用此state数据的 Vue 组件也会自动得到更新。</p>\n</blockquote>\n<h3 id=\"4-Actions\"><a href=\"#4-Actions\" class=\"headerlink\" title=\"4.Actions\"></a><strong>4.Actions</strong></h3><blockquote>\n<p>用户的一些行为，来提交到mutations改变数据。可在这进行异步操作。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</div><div class=\"line\">    <span class=\"comment\">//es6的参数解构</span></div><div class=\"line\">    getTravelsList(&#123; commit &#125;) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(state.scroll) &#123;</div><div class=\"line\">            commit(types.GET_TRAVELS_PAGE_NUM)</div><div class=\"line\">            commit(types.COM_LOADING_STATUS, <span class=\"literal\">true</span>),</div><div class=\"line\">            commit(types.GET_TRAVELS_SCORLL_STATUS, <span class=\"literal\">false</span>)</div><div class=\"line\">            api.TravelsList()</div><div class=\"line\">                .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(res)</div><div class=\"line\">                    commit(types.COM_LOADING_STATUS, <span class=\"literal\">false</span>),</div><div class=\"line\">                    commit(types.GET_TRAVELS_SCORLL_STATUS, <span class=\"literal\">true</span>)</div><div class=\"line\">                    commit(types.GET_TRAVELS_LIST, res)</div><div class=\"line\">                &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    joinTravel(&#123; commit &#125;, id) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-1分发-Action\"><a href=\"#4-1分发-Action\" class=\"headerlink\" title=\"4.1分发 Action\"></a>4.1分发 Action</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">created() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.travelListIndex.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'getTravelsList'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h4 id=\"4-2mapActions-辅助函数\"><a href=\"#4-2mapActions-辅助函数\" class=\"headerlink\" title=\"4.2mapActions 辅助函数\"></a>4.2mapActions 辅助函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">    ...mapActions([</div><div class=\"line\">      <span class=\"string\">'getTravelsList'</span> <span class=\"comment\">// 映射 this.getTravelsList() 为 this.$store.dispatch('getTravelsList')</span></div><div class=\"line\">    ]),</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-Modules\"><a href=\"#5-Modules\" class=\"headerlink\" title=\"5.Modules\"></a><strong>5.Modules</strong></h3><blockquote>\n<p>当应用变得很大时，store 对象会变得臃肿不堪。为了解决这个问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</div><div class=\"line\">  <span class=\"attr\">state</span>: &#123; ... &#125;,</div><div class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</div><div class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;,</div><div class=\"line\">  <span class=\"attr\">getters</span>: &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</div><div class=\"line\">  <span class=\"attr\">state</span>: &#123; ... &#125;,</div><div class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</div><div class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">  <span class=\"attr\">modules</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: moduleA,</div><div class=\"line\">    <span class=\"attr\">b</span>: moduleB</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></div><div class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></div></pre></td></tr></table></figure>\n<h3 id=\"6-项目实践\"><a href=\"#6-项目实践\" class=\"headerlink\" title=\"6.项目实践\"></a><strong>6.项目实践</strong></h3><blockquote>\n<ul>\n<li><a href=\"https://hzzly.github.io/2017/03/08/%E8%BF%9B%E9%98%B6vue%E5%85%A8%E5%AE%B6%E6%A1%B6/\" target=\"_blank\" rel=\"external\">进阶vue全家桶</a></li>\n<li><a href=\"https://hzzly.github.io/2017/04/27/%E2%80%99DIY%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/\" target=\"_blank\" rel=\"external\">DIY一个自己的音乐播放器</a></li>\n</ul>\n</blockquote>\n","categories":[],"tags":["随笔","vuex"]},{"title":"读书笔记-es5Array对象","url":"http://yoursite.com/2017/03/30/读书笔记-es5Array对象/","content":"<h3 id=\"1-创建-Array-对象的语法：\"><a href=\"#1-创建-Array-对象的语法：\" class=\"headerlink\" title=\"1.创建 Array 对象的语法：\"></a>1.创建 Array 对象的语法：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size);</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(element0, element1, ..., elementn)</div></pre></td></tr></table></figure>\n<h3 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2.属性\"></a>2.属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>constructor</td>\n<td style=\"text-align:right\">返回对创建此对象的数组函数的引用</td>\n</tr>\n<tr>\n<td>length</td>\n<td style=\"text-align:right\">设置或返回数组中元素的数目</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td style=\"text-align:right\">允许向对象添加属性和方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3.常用方法\"></a>3.常用方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>concat()</td>\n<td style=\"text-align:right\">连接两个或更多的数组，并返回结果</td>\n</tr>\n<tr>\n<td>join()</td>\n<td style=\"text-align:right\">把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td style=\"text-align:right\">删除并返回数组的最后一个元素</td>\n</tr>\n<tr>\n<td>push()</td>\n<td style=\"text-align:right\">向数组的末尾添加一个或更多元素，并返回新的长度</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td style=\"text-align:right\">颠倒数组中元素的顺序</td>\n</tr>\n<tr>\n<td>shift()</td>\n<td style=\"text-align:right\">删除并返回数组的第一个元素</td>\n</tr>\n<tr>\n<td>unshift()</td>\n<td style=\"text-align:right\">向数组的开头添加一个或更多元素，并返回新的长度</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td style=\"text-align:right\">从某个已有的数组返回选定的元素</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td style=\"text-align:right\">对数组的元素进行排序</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td style=\"text-align:right\">删除元素，并向数组添加新元素</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td style=\"text-align:right\">返回某个字符串对象的原始值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-栗子\"><a href=\"#4-栗子\" class=\"headerlink\" title=\"4.栗子\"></a>4.栗子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//concat()</span></div><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">a.concat(<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">//[1,2,3,4,5]</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"comment\">//join()</span></div><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">a.join() <span class=\"comment\">//1,2,3</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"comment\">//slice()</span></div><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">a.slice(<span class=\"number\">1</span>) <span class=\"comment\">//[2,3]</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">a.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//[2]</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"comment\">//splice()</span></div><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</div><div class=\"line\">a.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>) <span class=\"comment\">//[2]</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</div><div class=\"line\">a.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">'hzzly'</span>) <span class=\"comment\">//[2]</span></div><div class=\"line\">a <span class=\"comment\">//[1, \"hzzly\", 3, 4, 5]</span></div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","es5"]},{"title":"读书笔记-es5String对象","url":"http://yoursite.com/2017/03/29/读书笔记-es5String对象/","content":"<h3 id=\"1-创建-String-对象的语法：\"><a href=\"#1-创建-String-对象的语法：\" class=\"headerlink\" title=\"1.创建 String 对象的语法：\"></a>1.创建 String 对象的语法：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(s);</div><div class=\"line\"><span class=\"built_in\">String</span>(s);</div></pre></td></tr></table></figure>\n<h3 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2.属性\"></a>2.属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>constructor</td>\n<td style=\"text-align:right\">对创建该对象的函数的引用</td>\n</tr>\n<tr>\n<td>length</td>\n<td style=\"text-align:right\">字符串的长度</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td style=\"text-align:right\">允许向对象添加属性和方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3.常用方法\"></a>3.常用方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>charAt()</td>\n<td style=\"text-align:right\">返回在指定位置的字符</td>\n</tr>\n<tr>\n<td>concat()</td>\n<td style=\"text-align:right\">连接字符串</td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td style=\"text-align:right\">检索字符串</td>\n</tr>\n<tr>\n<td>lastIndexOf()</td>\n<td style=\"text-align:right\">从后向前搜索字符串</td>\n</tr>\n<tr>\n<td>match()</td>\n<td style=\"text-align:right\">找到一个或多个正则表达式的匹配</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td style=\"text-align:right\">提取字符串的片断，并在新的字符串中返回被提取的部分</td>\n</tr>\n<tr>\n<td>split()</td>\n<td style=\"text-align:right\">把字符串分割为字符串数组</td>\n</tr>\n<tr>\n<td>toLowerCase()</td>\n<td style=\"text-align:right\">把字符串转换为小写</td>\n</tr>\n<tr>\n<td>toUpperCase()</td>\n<td style=\"text-align:right\">把字符串转换为大写</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td style=\"text-align:right\">返回字符串</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td style=\"text-align:right\">返回某个字符串对象的原始值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-栗子\"><a href=\"#4-栗子\" class=\"headerlink\" title=\"4.栗子\"></a>4.栗子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//charAt()</span></div><div class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"Hello world!\"</span></div><div class=\"line\">str.charAt(<span class=\"number\">1</span>) <span class=\"comment\">//e</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"comment\">//concat()</span></div><div class=\"line\"><span class=\"keyword\">let</span> str1=<span class=\"string\">\"Hello \"</span></div><div class=\"line\"><span class=\"keyword\">let</span> str2=<span class=\"string\">\"world!\"</span></div><div class=\"line\">str1.concat(str2) <span class=\"comment\">//Hello world!</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"comment\">//indexOf()</span></div><div class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"Hello world!\"</span></div><div class=\"line\">str.indexOf(<span class=\"string\">\"Hello\"</span>) <span class=\"comment\">//0</span></div><div class=\"line\">str.indexOf(<span class=\"string\">\"World\"</span>) <span class=\"comment\">//-1 (没有就返回-1)</span></div><div class=\"line\">str.indexOf(<span class=\"string\">\"world\"</span>) <span class=\"comment\">//6</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"comment\">//slice()</span></div><div class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"Hello happy world!\"</span></div><div class=\"line\">str.slice(<span class=\"number\">6</span>) <span class=\"comment\">//happy world!</span></div><div class=\"line\">-</div><div class=\"line\"><span class=\"comment\">//split()</span></div><div class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"How are you doing today?\"</span></div><div class=\"line\">str.split(<span class=\"string\">\" \"</span>) <span class=\"comment\">//[\"How\", \"are\", \"you\", \"doing\", \"today?\"]</span></div><div class=\"line\">str.split(<span class=\"string\">\"\"</span>) <span class=\"comment\">//[\"H\", \"o\", \"w\", \" \", \"a\", \"r\", \"e\", \" \", \"y\", \"o\", \"u\", \" \", \"d\", \"o\", \"i\", \"n\", \"g\", \" \", \"t\", \"o\", \"d\", \"a\", \"y\", \"?\"]</span></div><div class=\"line\">str.split(<span class=\"string\">\" \"</span>,<span class=\"number\">3</span>) <span class=\"comment\">//[\"How\", \"are\", \"you\"]</span></div></pre></td></tr></table></figure>","categories":[],"tags":["随笔","es5"]},{"title":"Express与MongoDB的缠绵","url":"http://yoursite.com/2017/03/25/Express与MongoDB的缠绵/","content":"<h3 id=\"前奏\"><a href=\"#前奏\" class=\"headerlink\" title=\"前奏\"></a><strong>前奏</strong></h3><p>Express 是什么？</p>\n<blockquote>\n<p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n</blockquote>\n<p>全局安装express<a href=\"http://www.expressjs.com.cn/starter/generator.html\" target=\"_blank\" rel=\"external\">脚手架</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install express-generator -g</div></pre></td></tr></table></figure></p>\n<p>创建express项目<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ express myapp</div><div class=\"line\">$ <span class=\"built_in\">cd</span> myapp</div><div class=\"line\">$ npm install</div><div class=\"line\">$ DEBUG=myapp npm start</div></pre></td></tr></table></figure></p>\n<p>MongoDB与Mongoose？</p>\n<blockquote>\n<ul>\n<li>MongoDB是一个对象数据库，是用来存储数据的；存储的数据格式为JSON。</li>\n<li>Mongoose是封装了MongoDB操作(增删改查等)的一个对象模型库,是用来操作这些数据的。</li>\n</ul>\n</blockquote>\n<p>安装MongoDB：<br><a href=\"https://www.mongodb.com/download-center?jmp=nav\" target=\"_blank\" rel=\"external\">https://www.mongodb.com/download-center?jmp=nav</a></p>\n<p>安装Mongoose：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install mongoose --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"一、连接MongoDB\"><a href=\"#一、连接MongoDB\" class=\"headerlink\" title=\"一、连接MongoDB\"></a><strong>一、连接MongoDB</strong></h3><blockquote>\n<p>在项目根目录下新建/lib/mongo.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> db = mongoose.connect(<span class=\"string\">'mongodb://localhost:27017/myblog'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = db</div></pre></td></tr></table></figure>\n<blockquote>\n<p>要连接的数据库为myblog</p>\n</blockquote>\n<h3 id=\"二、Schema\"><a href=\"#二、Schema\" class=\"headerlink\" title=\"二、Schema\"></a><strong>二、Schema</strong></h3><a id=\"more\"></a>\n<blockquote>\n<p>一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，不具备对数据库的操作能力，仅仅只是数据库模型在程序片段中的一种表现，可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架</p>\n</blockquote>\n<p><strong>新建一个用户Schema</strong></p>\n<blockquote>\n<p>在项目根目录下新建/models/users.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>);</div><div class=\"line\"><span class=\"comment\">//一个用户模型</span></div><div class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</div><div class=\"line\">\t<span class=\"attr\">username</span>    : &#123; <span class=\"attr\">type</span>:<span class=\"built_in\">String</span> &#125;,</div><div class=\"line\">\t<span class=\"attr\">password</span>    : &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</div><div class=\"line\">\t<span class=\"attr\">avatar</span>      : &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</div><div class=\"line\">\t<span class=\"attr\">age</span>         : &#123; <span class=\"attr\">type</span>:<span class=\"built_in\">Number</span>, <span class=\"attr\">default</span>:<span class=\"number\">0</span> &#125;,</div><div class=\"line\">\t<span class=\"attr\">description</span> : &#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</div><div class=\"line\">\t<span class=\"attr\">email</span>       : &#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;,</div><div class=\"line\">\t<span class=\"attr\">github</span>      : &#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;,</div><div class=\"line\">\t<span class=\"attr\">time</span>        : &#123; <span class=\"attr\">type</span>:<span class=\"built_in\">Date</span>, <span class=\"attr\">default</span>:<span class=\"built_in\">Date</span>.now &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//创建Model</span></div><div class=\"line\"><span class=\"keyword\">var</span> UserModel = db.model(<span class=\"string\">\"user\"</span>, UserSchema );</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = UserModel</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>user：数据库中的集合名称,当我们对其添加数据时如果user已经存在，则会保存到其目录下，如果不存在，则会创建user集合，然后在保存数据。</li>\n<li>拥有了Model，我们也就拥有了操作数据库的金钥匙，就可以使用Model来进行增删改查的具体操作。</li>\n</ul>\n</blockquote>\n<p><strong>Entity</strong></p>\n<blockquote>\n<p>Entity–由Model创建的实体，使用save方法保存数据，Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性。所以此项目主要用的Model。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UserEntity = <span class=\"keyword\">new</span> UserModel(&#123;</div><div class=\"line\">\t<span class=\"attr\">name</span> : <span class=\"string\">\"hzzly\"</span>,</div><div class=\"line\">\t<span class=\"attr\">age</span>  : <span class=\"number\">21</span>,</div><div class=\"line\">\t<span class=\"attr\">email</span>: <span class=\"string\">\"hjingren@aliyun.com\"</span>,</div><div class=\"line\">\t<span class=\"attr\">github</span>: <span class=\"string\">'https://github.com/hzzly'</span></div><div class=\"line\">&#125;);</div><div class=\"line\">UserEntity.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error,doc</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"error :\"</span> + error);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(doc);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"三、封装数据库的CURD\"><a href=\"#三、封装数据库的CURD\" class=\"headerlink\" title=\"三、封装数据库的CURD\"></a><strong>三、封装数据库的CURD</strong></h3><blockquote>\n<ul>\n<li>在lib文件下新建api.js</li>\n<li>采用Promise封装对数据库的操作，避免回调地狱，使得代码能够更好的被读懂和维护。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UserModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/users'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 添加数据</div><div class=\"line\">\t * @param  &#123;[type]&#125; data 需要保存的数据对象</div><div class=\"line\">\t */</div><div class=\"line\">\tsave(data) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//model.create(保存的对象,callback)</span></div><div class=\"line\">\t\t\tUserModel.create(data, (error, doc) =&gt; &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t\t\t\treject(error)</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\tresolve(doc)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tfind(data=&#123;&#125;, fields=<span class=\"literal\">null</span>, options=&#123;&#125;) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//model.find(需要查找的对象(如果为空，则查找到所有数据), 属性过滤对象[可选参数], options[可选参数], callback)</span></div><div class=\"line\">\t\t\tUserModel.find(data, fields, options, (error, doc) =&gt; &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t\t\t\treject(error)</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\tresolve(doc)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tfindOne(data) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//model.findOne(需要查找的对象,callback)</span></div><div class=\"line\">\t\t\tUserModel.findOne(data, (error, doc) =&gt; &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t\t\t\treject(error)</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\tresolve(doc)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tfindById(data) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//model.findById(需要查找的id对象 ,callback)</span></div><div class=\"line\">\t\t\tUserModel.findById(data, (error, doc) =&gt; &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t\t\t\treject(error)</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\tresolve(doc)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tupdate(conditions, update) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//model.update(查询条件,更新对象,callback)</span></div><div class=\"line\">\t\t\tUserModel.update(conditions, update, (error, doc) =&gt; &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t\t\t\treject(error)</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\tresolve(doc)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tremove(conditions) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//model.update(查询条件,callback)</span></div><div class=\"line\">\t\t\tUserModel.remove(conditions, (error, doc) =&gt; &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t\t\t\treject(error)</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\t\tresolve(doc)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"四、使用\"><a href=\"#四、使用\" class=\"headerlink\" title=\"四、使用\"></a><strong>四、使用</strong></h3><blockquote>\n<p>在/routers/index.js中使用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> api = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/api'</span>);</div><div class=\"line\">router.post(<span class=\"string\">'/login'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> user = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">username</span> : req.body.username,</div><div class=\"line\">\t\t<span class=\"attr\">password</span>: req.body.password</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tapi.findOne(user)</div><div class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">router.post(<span class=\"string\">'/sign_up'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> user = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">username</span> : req.body.username,</div><div class=\"line\">\t\t<span class=\"attr\">password</span>: req.body.password,</div><div class=\"line\">\t\t<span class=\"attr\">email</span>: req.body.email</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tapi.save(user)</div><div class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">router.get(<span class=\"string\">'/user_list'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//返回所有用户</span></div><div class=\"line\">\tapi.find(&#123;&#125;)</div><div class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t<span class=\"comment\">//返回只包含一个键值name、age的所有记录</span></div><div class=\"line\">\tapi.find(&#123;&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>, <span class=\"attr\">age</span>:<span class=\"number\">1</span>, <span class=\"attr\">_id</span>:<span class=\"number\">0</span>&#125;)</div><div class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t<span class=\"comment\">//返回所有age大于18的数据</span></div><div class=\"line\">\tapi.find(&#123;<span class=\"string\">\"age\"</span>:&#123;<span class=\"string\">\"$gt\"</span>:<span class=\"number\">18</span>&#125;&#125;)</div><div class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t<span class=\"comment\">//返回20条数据</span></div><div class=\"line\">\tapi.find(&#123;&#125;,<span class=\"literal\">null</span>,&#123;<span class=\"attr\">limit</span>:<span class=\"number\">20</span>&#125;)</div><div class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t<span class=\"comment\">//查询所有数据，并按照age降序顺序返回数据</span></div><div class=\"line\">\tapi.find(&#123;&#125;,<span class=\"literal\">null</span>,&#123;<span class=\"attr\">sort</span>:&#123;<span class=\"attr\">age</span>:<span class=\"number\">-1</span>&#125;&#125;) <span class=\"comment\">//1是升序，-1是降序</span></div><div class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(result)\t\t\t</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>项目Github地址：</strong> <a href=\"https://github.com/hzzly/express-mongodb\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/express-mongodb</a><br>如果对你有帮助，欢迎star</p>\n<p>文章来源<a href=\"https://hzzly.github.io/\" target=\"_blank\" rel=\"external\">hzzly博客技术分享</a></p>\n","categories":[],"tags":["随笔"]},{"title":"浅谈Promise","url":"http://yoursite.com/2017/03/25/浅谈Promise/","content":"<p>接触过promise的的都知道它的应用场景和用途，Promise可以用来避免异步操作函数里的嵌套回调（callback hell）问题，因为解决异步最直接的方法是回调嵌套，将后一个的操作放在前一个操作的异步回调里，但如果操作多了，就会有很多层的嵌套(<strong>回调地狱</strong>)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(url1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data1</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something...</span></div><div class=\"line\">    $.ajax(url2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data2</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something...</span></div><div class=\"line\">        $.ajax(url3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data3</span>)</span>&#123;</div><div class=\"line\">            <span class=\"comment\">// do something...</span></div><div class=\"line\">            done(data3); <span class=\"comment\">// 返回数据</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Promise学术点的描述：</p>\n<blockquote>\n<p>promise代表一个异步操作的执行返回状态，这个执行返回状态在promise对象创建时未必已知。它允许你为异步操作的成功或失败指定处理方法。</p>\n</blockquote>\n<p>这使得异步方法可以像同步方法那样返回值：异步方法会返回一个包含了原返回状态的 promise 对象来替代原返回状态。</p>\n<h3 id=\"Promise的表现\"><a href=\"#Promise的表现\" class=\"headerlink\" title=\"Promise的表现\"></a><strong>Promise的表现</strong></h3><p>如果使用回调方法处理多个操作的异步场景，判断某个操作成功或失败的控制在于声明的匿名函数里面，使用Promise对象则可以重新定义异步执行的状态和控制逻辑。</p>\n<p>promises的最重要的特点就是它把我们处理任何函数调用的成功或者失败的方式规范成了可预测的形式，特别是如果这个调用实际上的异步的。</p>\n<p>Promise中有几个状态：</p>\n<blockquote>\n<ul>\n<li>pending: 初始状态。 非 fulfilled 或 rejected。</li>\n<li>resolved: 成功的操作。也有的成为fulfilled 。</li>\n<li>rejected: 失败的操作。</li>\n</ul>\n</blockquote>\n<p>状态转换关系为：</p>\n<blockquote>\n<p>pending-&gt;resolved(fulfilled)，pending-&gt;rejected。</p>\n</blockquote>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a><strong>用法</strong></h3><p>说了这么多，直接上代码。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// do somthing, maybe async</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (success)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> resolve(res);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> reject(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// do something... e.g</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// deal the err.</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>或封装成方法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// do somthing, maybe async</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (success)&#123;</div><div class=\"line\">            resolve(res);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            reject(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">fetch(data)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(res)</div><div class=\"line\">    &#125;, err =&gt; &#123;</div><div class=\"line\">        <span class=\"comment\">// deal the err.</span></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"异步嵌套回调\"><a href=\"#异步嵌套回调\" class=\"headerlink\" title=\"异步嵌套回调\"></a><strong>异步嵌套回调</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadAsync1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//异步操作</span></div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'异步任务1'</span>);</div><div class=\"line\">            resolve(<span class=\"string\">'异步任务1传过来的值'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;);          </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadAsync2</span>(<span class=\"params\">data1</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//异步操作</span></div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'异步任务2'</span>);</div><div class=\"line\">            resolve(<span class=\"string\">'异步任务2传过来的值'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;);          </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadAsync3</span>(<span class=\"params\">data2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//异步操作</span></div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'异步任务3'</span>);</div><div class=\"line\">            resolve(<span class=\"string\">'异步任务3传过来的值'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;);          </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadAsync1()</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data1</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> loadAsync2(data1)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data2</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> loadAsync3(data2)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(okFn, failFn)</div></pre></td></tr></table></figure></p>\n<p>没有返回值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadAsync1()</div><div class=\"line\">    .then(data1 =&gt; &#123;</div><div class=\"line\">        loadAsync2(data1)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(data2 =&gt;&#123;</div><div class=\"line\">        loadAsync3(data2)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(res =&gt; console.log(res))</div></pre></td></tr></table></figure></p>\n<p>输出的值为：</p>\n<blockquote>\n<p>异步任务1<br>异步任务1传过来的值<br>异步任务2<br>异步任务2传过来的值<br>异步任务3<br>异步任务3传过来的值</p>\n</blockquote>\n<h3 id=\"promise-all方法\"><a href=\"#promise-all方法\" class=\"headerlink\" title=\"promise.all方法\"></a><strong>promise.all方法</strong></h3><blockquote>\n<p>Promise.all 可以接收一个元素为 Promise 对象的数组作为参数，当这个数组里面所有的 Promise 对象都变为 resolve 时，该方法才会返回。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        resolve(<span class=\"string\">\"第一个promise\"</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">3000</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        resolve(<span class=\"string\">\"第二个promise\"</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2])</div><div class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [\"第一个promise\", \"第二个promise\"]</span></div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>上面的代码中，all接收一个数组作为参数，p1,p2是并行执行的，等两个都执行完了，才会进入到then，all会把所有的结果放到一个数组中返回，所以我们打印出我们的结果为一个数组。</p>\n<blockquote>\n<p>值得注意的是，虽然p2的执行顺序比p1快，但是all会按照参数里面的数组顺序来返回结果。all的使用场景类似于，玩游戏的时候，需要提前将游戏需要的资源提前准备好，才进行页面的初始化。</p>\n</blockquote>\n<p>之后会有express操作mongondb的基于Promise的封装，敬请期待！</p>\n","categories":[],"tags":["随笔"]},{"title":"移动端touch事件","url":"http://yoursite.com/2017/03/22/移动端touch事件/","content":"<h3 id=\"4个touch事件\"><a href=\"#4个touch事件\" class=\"headerlink\" title=\"4个touch事件\"></a><strong>4个touch事件</strong></h3><p><strong>touchstart</strong> 事件：当手指触摸屏幕时候触发，即使已经有一个手指放在屏幕上也会触发。<br><strong>touchmove</strong> 事件：当手指在屏幕上滑动的时候连续地触发。调用preventDefault()事件可以阻止滚动。<br><strong>touchend</strong> 事件：当手指从屏幕上离开的时候触发。<br><strong>touchcancel</strong> 事件：触摸结束的时候触发</p>\n<h3 id=\"触摸事件：\"><a href=\"#触摸事件：\" class=\"headerlink\" title=\"触摸事件：\"></a><strong>触摸事件：</strong></h3><p><strong>touches：</strong>当前位于屏幕上的所有手指的列表。<br><strong>targetTouches：</strong>位于当前DOM元素上手指的列表。<br><strong>changedTouches：</strong>涉及当前事件手指的列表。</p>\n<h3 id=\"Touch对象属性\"><a href=\"#Touch对象属性\" class=\"headerlink\" title=\"Touch对象属性\"></a><strong>Touch对象属性</strong></h3><p>每个Touch对象包含的属性如下： </p>\n<blockquote>\n<p>clientX：触摸目标在视口中的x坐标。<br>clientY：触摸目标在视口中的y坐标。<br>identifier：标识触摸的唯一ID。<br>pageX：触摸目标在页面中的x坐标。<br>pageY：触摸目标在页面中的y坐标。<br>screenX：触摸目标在屏幕中的x坐标。<br>screenY：触摸目标在屏幕中的y坐标。<br>target：触摸的DOM节点目标。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>,touch,<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchmove'</span>,touch,<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchend'</span>,touch,<span class=\"literal\">false</span>);     </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">touch</span> (<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> event = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">    <span class=\"keyword\">var</span> oInp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"inp\"</span>);</div><div class=\"line\">    <span class=\"keyword\">switch</span>(event.type)&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"touchstart\"</span>:</div><div class=\"line\">            oInp.innerHTML =<span class=\"string\">`Touch started ( <span class=\"subst\">$&#123;event.touches[<span class=\"number\">0</span>].clientX&#125;</span> , <span class=\"subst\">$&#123;event.touches[<span class=\"number\">0</span>].clientY&#125;</span> )`</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"touchend\"</span>:</div><div class=\"line\">            oInp.innerHTML =<span class=\"string\">`&lt;br&gt;Touch end ( <span class=\"subst\">$&#123;event.changedTouches[<span class=\"number\">0</span>].clientX&#125;</span> , <span class=\"subst\">$&#123;event.changedTouches[<span class=\"number\">0</span>].clientY&#125;</span> )`</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"touchmove\"</span>:</div><div class=\"line\">            event.preventDefault();</div><div class=\"line\">            oInp.innerHTML =<span class=\"string\">`&lt;br&gt;Touch moved ( <span class=\"subst\">$&#123;event.touches[<span class=\"number\">0</span>].clientX&#125;</span> , <span class=\"subst\">$&#123;event.touches[<span class=\"number\">0</span>].clientY&#125;</span> )`</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"事件-包括鼠标事件-发生的顺序如下：\"><a href=\"#事件-包括鼠标事件-发生的顺序如下：\" class=\"headerlink\" title=\"事件(包括鼠标事件)发生的顺序如下：\"></a><strong>事件(包括鼠标事件)发生的顺序如下：</strong></h3><p>(1) touchstart<br>(2) mouseover<br>(3) mousemove(一次)<br>(4) mousedown<br>(5) mouseup<br>(6) click<br>(7) touchend</p>\n","categories":[],"tags":["随笔"]},{"title":"一个Vue+Canvas的酷炫后台管理","url":"http://yoursite.com/2017/03/21/一个Vue-Canvas的酷炫后台管理/","content":"<blockquote>\n<p>又一个Vue+Cnavas酷炫的后台管理，依然前后端分离（用PC打开，还没适配移动端）。</p>\n</blockquote>\n<p><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/canvas-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/canvas-vue</a><br><strong>demo地址：</strong> <a href=\"http://hjingren.cn/curriculum-design/\" target=\"_blank\" rel=\"external\">http://hjingren.cn/curriculum-design/</a><br>账号：hzzly  密码：123456<br>欢迎大家的star啦~</p>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a><strong>技术栈</strong></h3><p>前台:</p>\n<blockquote>\n<ul>\n<li>vue-cli</li>\n<li>vue</li>\n<li>vue-router</li>\n<li>webpack</li>\n<li>canvas</li>\n<li>ajax</li>\n</ul>\n</blockquote>\n<p>后台:</p>\n<blockquote>\n<ul>\n<li>wamp</li>\n<li>PHP(ThinkPHP)</li>\n<li>mysql</li>\n</ul>\n</blockquote>\n<h3 id=\"功能说明\"><a href=\"#功能说明\" class=\"headerlink\" title=\"功能说明\"></a><strong>功能说明</strong></h3><ul>\n<li>登录<ul>\n<li>用户登录</li>\n<li>管理员登录</li>\n</ul>\n</li>\n<li>注册<ul>\n<li>用户注册</li>\n</ul>\n</li>\n<li>Canvas<ul>\n<li>流星滑过</li>\n<li>星星闪闪</li>\n<li>后台折线</li>\n<li>折线跟着鼠标滑动</li>\n</ul>\n</li>\n<li>Vue<ul>\n<li>弹出框组件</li>\n<li>路由切换动画</li>\n<li>通过Ajax调用后台接口</li>\n</ul>\n</li>\n<li>留言板(时间轴)</li>\n<li>添加房屋信息</li>\n<li>出租 求租</li>\n<li>出售 求购</li>\n<li>个人信息修改</li>\n<li>密码修改</li>\n<li>……</li>\n</ul>\n<blockquote>\n<p>1.登录注册模块</p>\n</blockquote>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/canvas-login.gif\" alt=\"canvas-login\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>2.后台管理页面</p>\n</blockquote>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/admin.gif\" alt=\"admin\"></p>\n<blockquote>\n<p>3.留言板(时间轴特效)</p>\n</blockquote>\n<p><img src=\"http://omt3u4bph.bkt.clouddn.com/msgboard.gif\" alt=\"msgboard\"></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a><strong>目录结构</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">|——canvas-vue/</div><div class=\"line\">|   |——build/</div><div class=\"line\">|   |——confg/</div><div class=\"line\">|   |——node_modules/</div><div class=\"line\">|   |——src/</div><div class=\"line\">|   |   |——assets/                 //静态文件</div><div class=\"line\">|   |   |——components/             //页面组件</div><div class=\"line\">|   |   |   |——Menu.vue            //登录注册加载页面</div><div class=\"line\">|   |   |   |——Home.vue            //后台首页</div><div class=\"line\">|   |   |   |——Login.vue           //登录页面</div><div class=\"line\">|   |   |   |——Regist.vue          //注册页面</div><div class=\"line\">|   |   |   |——Navbar.vue          //我的发布</div><div class=\"line\">|   |   |   |——Messageboard.vue    //留言板页面</div><div class=\"line\">|   |   |   |——...                 //等等</div><div class=\"line\">|   |   |——router/                 </div><div class=\"line\">|   |   |   |——index.js            //页面路由</div><div class=\"line\">|   |   |——App.vue                 //父组件</div><div class=\"line\">|   |   |——main.js                 //入口文件</div><div class=\"line\">|   |——static/                     </div><div class=\"line\">|   |——.babelrc</div><div class=\"line\">|   |——.editorconfig</div><div class=\"line\">|   |——.gitgnore</div><div class=\"line\">|   |——index.html</div><div class=\"line\">|   |——package.json</div><div class=\"line\">|   |——README.md</div></pre></td></tr></table></figure>\n<h3 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a><strong>技术点</strong></h3><blockquote>\n<ul>\n<li>登录注册切换动画–vue的transition转换动画</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;transition name=&quot;fade-out&quot;&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    &lt;/transition&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.fade-out-enter-active, .fade-out-leave-active &#123;</div><div class=\"line\">    transition: all .5s</div><div class=\"line\">&#125;</div><div class=\"line\">.fade-out-enter, .fade-out-leave-active &#123;</div><div class=\"line\">    opacity: 0;</div><div class=\"line\">    transform: translateX(-400px);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>登录注册星星与流星–canvas</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>),</div><div class=\"line\">    ctx = canvas.getContext(<span class=\"string\">'2d'</span>),</div><div class=\"line\">    width = <span class=\"built_in\">window</span>.innerWidth,</div><div class=\"line\">    height = <span class=\"built_in\">window</span>.innerHeight,</div><div class=\"line\">    <span class=\"comment\">//实例化月亮和星星。流星是随机时间生成，所以只初始化数组</span></div><div class=\"line\">    moon = <span class=\"keyword\">new</span> Moon(ctx, width, height),</div><div class=\"line\">    stars = <span class=\"keyword\">new</span> Stars(ctx, width, height, <span class=\"number\">200</span>),</div><div class=\"line\">    meteors = [],</div><div class=\"line\">    count = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">    canvas.width = width;</div><div class=\"line\">    canvas.height = height;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> meteorGenerator = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//x位置偏移，以免经过月亮</span></div><div class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"built_in\">Math</span>.random() * width + <span class=\"number\">800</span></div><div class=\"line\">    meteors.push(<span class=\"keyword\">new</span> Meteor(ctx, x, height))</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//每隔随机时间，生成新流星</span></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</div><div class=\"line\">        meteorGenerator()</div><div class=\"line\">    &#125;, <span class=\"built_in\">Math</span>.random() * <span class=\"number\">2000</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> frame = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</div><div class=\"line\">    count++</div><div class=\"line\">    count % <span class=\"number\">10</span> == <span class=\"number\">0</span> &amp;&amp; stars.blink()</div><div class=\"line\">    moon.draw()</div><div class=\"line\">    stars.draw()</div><div class=\"line\"> </div><div class=\"line\">    meteors.forEach(<span class=\"function\">(<span class=\"params\">meteor, index, arr</span>)=&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//如果流星离开视野之内，销毁流星实例，回收内存</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (meteor.flow()) &#123;</div><div class=\"line\">            meteor.draw()</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            arr.splice(index, <span class=\"number\">1</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    requestAnimationFrame(frame)</div><div class=\"line\">&#125;</div><div class=\"line\">meteorGenerator()</div><div class=\"line\">frame()</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>这个项目还没有完成，后期将不定期更新，敬请期待。。</p>\n<p>如果觉得还行，欢迎star<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/canvas-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/canvas-vue</a><br><strong>项目后台(PHP)地址：</strong> <a href=\"https://github.com/hzzly/canvas-vue-backstage\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/canvas-vue-backstage</a></p>\n<p>好了，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"移动端屏幕适配的解决","url":"http://yoursite.com/2017/03/15/移动端屏幕适配的解决/","content":"<blockquote>\n<p>随着手机硬件配置的飞速增长、屏幕尺寸的越来越大和网络带宽的逐渐提升，越来越多的PC业务和服务在向移动端转移。然而在这移动端的时代，为了处理各终端屏幕的适配，是否乱了手脚呢？</p>\n</blockquote>\n<p>虽然移动端的页面与PC的页面相比简单了不少，但让我们头痛的事情还是要想尽办法让页面能适配众多不同的终端设备。<br>在前几个外包项目中，我做的主要都是移动微信端的。期间也遇到了不同屏幕大小的适配问题，所以今天特来分享一下我的解决方法。</p>\n<p><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/xyy-vue</a><br><strong>demo地址：</strong> <a href=\"http://hjingren.cn/xyy-vue/\" target=\"_blank\" rel=\"external\">http://hjingren.cn/xyy-vue/</a><br>欢迎大家的star啦~</p>\n<h3 id=\"一、meta标签\"><a href=\"#一、meta标签\" class=\"headerlink\" title=\"一、meta标签\"></a><strong>一、meta标签</strong></h3><blockquote>\n<p>meta之viewport，其主要用来告诉浏览器如何规范的渲染Web页面，而你则需要告诉它视窗有多大。在开发移动端页面，我们需要在html中设置meta标签如下：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"二、手淘的flexible\"><a href=\"#二、手淘的flexible\" class=\"headerlink\" title=\"二、手淘的flexible\"></a><strong>二、手淘的flexible</strong></h3><blockquote>\n<p>flexible是一个制作H5适配的开源库，需要在html中引入，可以直接使用阿里CDN：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>执行这个JS后，会在<html>元素上增加一个data-dpr属性，以及一个font-size样式。JS会根据不同的设备添加不同的data-dpr值，比如说1、2或者3，同时会给html加上对应的font-size的值，比如说37.5px。</html></p>\n<h3 id=\"三、放弃px拥抱rem\"><a href=\"#三、放弃px拥抱rem\" class=\"headerlink\" title=\"三、放弃px拥抱rem\"></a><strong>三、放弃px拥抱rem</strong></h3><a id=\"more\"></a>\n<p>用px写的是绝对单位，这种方法肯定不行。让我们来拥抱rem吧！！！</p>\n<blockquote>\n<p>我们知道 em 的计算是基于父级元素的，在实际使用中给我们的计算带来了很大的不便。所以 rem 的出现解救了我这样不会算术的人，再也不用担心父级元素的 font-size 了，因为它始终是基于根元素（html） 的。<br>比如默认的 html font-size=16px，那么我想设置12px 的文字就是：12÷16=0.75（rem）</p>\n</blockquote>\n<p>如果对rem还有不懂的可以先看看这个<a href=\"http://www.w3cplus.com/css3/define-font-size-with-css3-rem\" target=\"_blank\" rel=\"external\">CSS3的REM设置字体大小</a></p>\n<p>刚刚我们引入了手淘的flexible，并给html加了font-size，如此一来，页面中的元素，都可以通过rem单位来设置。他们会根据html元素的font-size值做相应的计算，从而实现屏幕的适配效果。</p>\n<h3 id=\"四、CSS处理器-SASS\"><a href=\"#四、CSS处理器-SASS\" class=\"headerlink\" title=\"四、CSS处理器(SASS)\"></a><strong>四、CSS处理器(SASS)</strong></h3><ol>\n<li>使用Sass的同学，可以使用Sass的函数、混合宏这些功能来实现：</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@function px2rem(<span class=\"variable\">$px</span>, <span class=\"variable\">$base-font-size</span>: 75px) &#123;</div><div class=\"line\">    @return (<span class=\"variable\">$px</span> / <span class=\"variable\">$base-font-size</span>) * 1rem;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的这个参数$base-font-size: 75px，可以通过(psd文件的宽度/10)来计算。假如psd宽750，则$base-font-size为75px。</p>\n<p><strong>使用：</strong></p>\n<blockquote>\n<p>psd中量多少就写多少</p>\n</blockquote>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//比如量取box宽为190，高为190，则代码：</span></div><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: px2rem(<span class=\"number\">190px</span>);</div><div class=\"line\">    <span class=\"attribute\">height</span>: px2rem(<span class=\"number\">190px</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>没用过的可以用sublime的<a href=\"https://github.com/flashlizi/cssrem\" target=\"_blank\" rel=\"external\">cssrem</a>的插件实现。</li>\n</ol>\n<h3 id=\"五、图示\"><a href=\"#五、图示\" class=\"headerlink\" title=\"五、图示\"></a><strong>五、图示</strong></h3><p><img src=\"http://omt3u4bph.bkt.clouddn.com/flexible.gif\" alt=\"flexible\"></p>\n<h3 id=\"六、图示代码\"><a href=\"#六、图示代码\" class=\"headerlink\" title=\"六、图示代码\"></a><strong>六、图示代码</strong></h3><blockquote>\n<p>因为这是商业代码，所以就只贴了一部分代码，忘见谅，谢谢<br>最下面有我开源项目的代码，可以参考，如果对你有帮助的话，给个star。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//index.html</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"home\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"home-list\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-l\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../assets/images/check.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>待审核<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-r isnew\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>\t</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//index.scss</span></div><div class=\"line\">@function px2rem(<span class=\"variable\">$px</span>, <span class=\"variable\">$base-font-size</span>: 75px) &#123;</div><div class=\"line\">  @return (<span class=\"variable\">$px</span> / <span class=\"variable\">$base-font-size</span>) * 1rem;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.home-list</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">padding-bottom</span>: px2rem(<span class=\"number\">45px</span>);</div><div class=\"line\">  <span class=\"selector-class\">.list-item</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">    <span class=\"attribute\">width</span>: px2rem(<span class=\"number\">690px</span>);</div><div class=\"line\">    <span class=\"attribute\">height</span>: px2rem(<span class=\"number\">190px</span>);</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: px2rem(<span class=\"number\">190px</span>);</div><div class=\"line\">    <span class=\"attribute\">margin</span>: px2rem(<span class=\"number\">45px</span>) auto <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> px2rem(<span class=\"number\">50px</span>) <span class=\"number\">0</span> px2rem(<span class=\"number\">30px</span>);</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: px2rem(<span class=\"number\">20px</span>);</div><div class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">      <span class=\"attribute\">justify-content</span>: space-between;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: px2rem(<span class=\"number\">40px</span>);</div><div class=\"line\">      <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: px2rem(<span class=\"number\">90px</span>);</div><div class=\"line\">        <span class=\"attribute\">height</span>: px2rem(<span class=\"number\">65px</span>);</div><div class=\"line\">        <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">        <span class=\"attribute\">margin-right</span>: px2rem(<span class=\"number\">30px</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</div><div class=\"line\">        <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-class\">.item-r</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#666666</span>;</div><div class=\"line\">          &amp;<span class=\"selector-class\">.isnew</span> &#123;</div><div class=\"line\">            <span class=\"attribute\">color</span>: <span class=\"number\">#ff5500</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &amp;:link,&amp;:visited,&amp;:hover,&amp;:active &#123;</div><div class=\"line\">        <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"七、开源示例\"><a href=\"#七、开源示例\" class=\"headerlink\" title=\"七、开源示例\"></a><strong>七、开源示例</strong></h3><p>如果觉得还行，欢迎star<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/xyy-vue</a></p>\n<p>好了，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"移动端1px的解决方法","url":"http://yoursite.com/2017/03/13/移动端1px的解决方法/","content":"<blockquote>\n<p>在上个项目中，移动端1px问题被困扰了好久，设置1px边框，实际显示2px。<br>以下是我在项目中的解决方法，才疏学浅，轻喷。</p>\n</blockquote>\n<p>关于什么是移动端1像素边框问题，先上两张图，大家就明白了。</p>\n<p><strong>假的1px:</strong><br><img src=\"https://hzzly.github.io/img/onepx2.png\" alt=\"2px\"></p>\n<p><strong>真的1px:</strong><br><img src=\"https://hzzly.github.io/img/onepx1.png\" alt=\"1px\"></p>\n<p>原来Retine屏的分辨率始终是普通屏幕的2倍，1px的边框在devicePixelRatio=2的retina屏下会显示成2px。</p>\n<p><strong>解决方案</strong></p>\n<blockquote>\n<p>transform: scaleY()</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;border-1px&quot;&gt;&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;style type=&quot;text/scss&quot;&gt;</div><div class=\"line\">.border-1px &#123;</div><div class=\"line\">\tposition: relative;</div><div class=\"line\">\t&amp;:after&#123;</div><div class=\"line\">\t\tdisplay: block;</div><div class=\"line\">\t\tposition: absolute;</div><div class=\"line\">\t\tleft: 0;</div><div class=\"line\">\t\tbottom: 0;</div><div class=\"line\">\t\twidth: 100%;</div><div class=\"line\">\t\tborder-top: 1px solid #000;</div><div class=\"line\">\t\tcontent: &apos;&apos;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5) &#123;</div><div class=\"line\">\t.border-1px&#123;</div><div class=\"line\">\t\t&amp;::after&#123;</div><div class=\"line\">\t\t\t-webkit-transform: scaleY(0.7);</div><div class=\"line\">\t\t\ttransform: scaleY(0.7);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2) &#123;</div><div class=\"line\">\t.border-1px&#123;</div><div class=\"line\">\t\t&amp;::after&#123;</div><div class=\"line\">\t\t\t-webkit-transform: scaleY(0.5);</div><div class=\"line\">\t\t\ttransform: scaleY(0.5);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>到这已经成功解决了1px问题。</p>\n<p>好了，吃饭去喽，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"axios在vue中的简单配置与使用","url":"http://yoursite.com/2017/03/12/axios在vue中的简单配置与使用/","content":"<blockquote>\n<p>尤雨溪之前在微博发布消息，不再继续维护vue-resource，并推荐大家开始使用 axios 。</p>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/axios.png\" alt=\"axios\"></p>\n<h2 id=\"一、axios-简介\"><a href=\"#一、axios-简介\" class=\"headerlink\" title=\"一、axios 简介\"></a><strong>一、axios 简介</strong></h2><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p>\n<blockquote>\n<ul>\n<li>从浏览器中创建 XMLHttpRequest</li>\n<li>从 node.js 发出 http 请求</li>\n<li>支持 Promise API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防止 CSRF/XSRF</li>\n</ul>\n</blockquote>\n<h2 id=\"二、引入方式：\"><a href=\"#二、引入方式：\" class=\"headerlink\" title=\"二、引入方式：\"></a><strong>二、引入方式：</strong></h2><p>npm:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install axios</div><div class=\"line\">//淘宝源</div><div class=\"line\">$ cnpm install axios</div></pre></td></tr></table></figure></p>\n<p>bower:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ bower install axios</div></pre></td></tr></table></figure></p>\n<p>cdn:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"https://unpkg.com/axios/dist/axios.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<h2 id=\"三、vue中axios的配置\"><a href=\"#三、vue中axios的配置\" class=\"headerlink\" title=\"三、vue中axios的配置 \"></a><strong>三、vue中axios的配置 </strong></h2><blockquote>\n<p>之前那个开源项目一开始就打算用axios，在网上找了好多文章与攻略，发现好多都不太详细，所以打算自己动手配置一个，(不要怂，撸起袖子就是干)。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>我的配置：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'../util/tool'</span></div><div class=\"line\"> </div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;                        <span class=\"comment\">//响应时间</span></div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;           <span class=\"comment\">//配置请求头</span></div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'你的接口地址'</span>;   <span class=\"comment\">//配置接口地址</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//POST传参序列化(添加请求拦截器)</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">//在发送请求之前做某件事</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span>)&#123;</div><div class=\"line\">        config.data = qs.stringify(config.data);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">     _.toast(<span class=\"string\">\"错误的传参\"</span>, <span class=\"string\">'fail'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//返回状态判断(添加响应拦截器)</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//对响应数据做些事</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!res.data.success)&#123;</div><div class=\"line\">        <span class=\"comment\">// _.toast(res.data.msg);</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">    _.toast(<span class=\"string\">\"网络异常\"</span>, <span class=\"string\">'fail'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//返回一个Promise(发送post请求)</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">url, params</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        axios.post(url, params)</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">                resolve(response.data);</div><div class=\"line\">            &#125;, err =&gt; &#123;</div><div class=\"line\">                reject(err);</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">               reject(error)</div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"四、vue中使用配置好的axios\"><a href=\"#四、vue中使用配置好的axios\" class=\"headerlink\" title=\"四、vue中使用配置好的axios\"></a><strong>四、vue中使用配置好的axios</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 用户登录</div><div class=\"line\">     */</div><div class=\"line\">    Login(params) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/users/api/userLogin'</span>, params)</div><div class=\"line\">    &#125;,  </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 用户注册</div><div class=\"line\">     */</div><div class=\"line\">    Regist(params) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/users/api/userRegist'</span>, params)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 发送注册验证码</div><div class=\"line\">     */</div><div class=\"line\">    RegistVerifiCode(tellphone) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/users/api/registVerifiCode'</span>, &#123;<span class=\"attr\">tellphone</span>: tellphone&#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果觉得还行，欢迎star<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/xyy-vue</a><br><strong>demo地址：</strong> <a href=\"http://hjingren.cn/xyy-vue/\" target=\"_blank\" rel=\"external\">http://hjingren.cn/xyy-vue/</a></p>\n<p>好了，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"开源的收获","url":"http://yoursite.com/2017/03/09/开源的收获/","content":"<blockquote>\n<p>第一次在github上发布了开源《Qu约》后，不到两天，被人star了137次，fork了25次，这个成绩大大出乎了我自己的意料！</p>\n</blockquote>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/xyy-vue</a><br><strong>demo地址：</strong> <a href=\"http://hjingren.cn/xyy-vue/\" target=\"_blank\" rel=\"external\">http://hjingren.cn/xyy-vue/</a><br>欢迎大家的star啦~</p>\n<p>同时也让我收获到了许多：</p>\n<blockquote>\n<ol>\n<li>github首次破百</li>\n</ol>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/github.png\" alt=\"github\"></p>\n<blockquote>\n<ol>\n<li>掘金的阅读量与喜欢量同时给他人带来了不一样的价值</li>\n</ol>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/juejin.png\" alt=\"juejin\"></p>\n<blockquote>\n<ol>\n<li>segmentfault的阅读量、收藏量与声望值，把其中的价值传给他人</li>\n</ol>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/segmentfault.png\" alt=\"segmentfault\"></p>\n<blockquote>\n<ol>\n<li>收获了一个offer</li>\n<li>给我以后就业增加了一份保证</li>\n<li>结交了好多同行开发者</li>\n</ol>\n</blockquote>\n<p>分享与开源，让技术生生不息。借用一本书de名字，Just for fun。开源是一种情怀，happy hacking！</p>\n<p>革命尚未成功，我们还需努力。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"进阶vue全家桶","url":"http://yoursite.com/2017/03/08/进阶vue全家桶/","content":"<blockquote>\n<p>有人说只会vue不会vuex还只是个切图仔，所以本项目将带领你进阶vue全家桶。前端结合Vue2.0全家桶(vue+vue-router+vuex+axios+es6+sass)以及后端Node,一个<a href=\"https://hzzly.github.io/2017/03/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%B0%9D%E8%AF%95/\" target=\"_blank\" rel=\"external\">前后端分离</a>的练手项目。本项目可以作为一个前端vue进阶项目，从前端flex布局到前端vue以及组件分离的使用，再到后端Node以及Leancloud的结合，是一个打通前后端流程的一个项目。欢迎大家前来star。如果有任何问题，可以给我留言，我们互相学习讨论，一起进步。注：本项目为开源项目，非本人同意不能用于商业应用。</p>\n</blockquote>\n<h3 id=\"预览地址：-https-github-com-hzzly-xyy-vue\"><a href=\"#预览地址：-https-github-com-hzzly-xyy-vue\" class=\"headerlink\" title=\"预览地址： https://github.com/hzzly/xyy-vue\"></a><strong>预览地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/xyy-vue</a></h3><h3 id=\"Github地址：-http-hjingren-cn-xyy-vue\"><a href=\"#Github地址：-http-hjingren-cn-xyy-vue\" class=\"headerlink\" title=\"Github地址： http://hjingren.cn/xyy-vue/\"></a><strong>Github地址：</strong> <a href=\"http://hjingren.cn/xyy-vue/\" target=\"_blank\" rel=\"external\">http://hjingren.cn/xyy-vue/</a></h3><p>欢迎大家的star啦~</p>\n<h2 id=\"功能说明\"><a href=\"#功能说明\" class=\"headerlink\" title=\"功能说明\"></a>功能说明</h2><ul>\n<li>首页轮播图</li>\n<li>首页热门活动</li>\n<li>约跑步活动列表</li>\n<li>约出行活动列表</li>\n<li>个人中心<ul>\n<li>查看个人活动</li>\n<li>学生认证(待开发)</li>\n<li>学生信息修改</li>\n<li>消息通知(后台接口待开发)</li>\n<li>选择高校(待开发)</li>\n</ul>\n</li>\n<li>登录</li>\n<li>注册</li>\n<li>活动详情<ul>\n<li>活动报名</li>\n</ul>\n</li>\n<li>活动发布<ul>\n<li>时间选择组件</li>\n<li>地址选择组件</li>\n<li>文件上传</li>\n</ul>\n</li>\n<li>axios的封装</li>\n<li>……</li>\n</ul>\n<h2 id=\"公共组件\"><a href=\"#公共组件\" class=\"headerlink\" title=\"公共组件\"></a>公共组件</h2><blockquote>\n<ul>\n<li>弹出文字组件</li>\n<li>弹出框组件</li>\n<li>loading组件</li>\n<li>toast组件</li>\n<li>时间选择器组件</li>\n<li>地址选择器组件</li>\n<li>……</li>\n</ul>\n</blockquote>\n<p><img src=\"https://hzzly.github.io/img/xyy-vue.gif\" alt=\"xyy-vue\"></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">|——xyy-vue/</div><div class=\"line\">|   |——build/</div><div class=\"line\">|   |——confg/</div><div class=\"line\">|   |——node_modules/</div><div class=\"line\">|   |——src/</div><div class=\"line\">|   |   |——assets/                 //静态文件</div><div class=\"line\">|   |   |——components/             //公共组件</div><div class=\"line\">|   |   |——fetch/</div><div class=\"line\">|   |   |   |——api.js              //axios封装与api</div><div class=\"line\">|   |   |——pages/                  //存放项目页面</div><div class=\"line\">|   |   |   |——Detail.vue          //活动详情页面</div><div class=\"line\">|   |   |   |——Home.vue            //首页</div><div class=\"line\">|   |   |   |——Login.vue           //登录页面</div><div class=\"line\">|   |   |   |——Navbar.vue          //我的发布</div><div class=\"line\">|   |   |   |——NotFound.vue        //出错页面</div><div class=\"line\">|   |   |   |——Post.vue            //发布活动页面</div><div class=\"line\">|   |   |   |——Regist.vue          //注册页面</div><div class=\"line\">|   |   |   |——Set.vue             //设置页面</div><div class=\"line\">|   |   |   |——Sport.vue           //约跑步活动列表页面</div><div class=\"line\">|   |   |   |——Travel.vue          //约出行活动列表页面</div><div class=\"line\">|   |   |   |——User.vue            //个人中心页面</div><div class=\"line\">|   |   |   |——UserInfo.vue        //个人详情页面</div><div class=\"line\">|   |   |   |——UserMsg.vue         //消息列表页面</div><div class=\"line\">|   |   |——router/                 </div><div class=\"line\">|   |   |   |——index.js            //页面路由</div><div class=\"line\">|   |   |——util                    //公用方法</div><div class=\"line\">|   |   |——vuex /                  //存放vuex代码</div><div class=\"line\">|   |   |   |——modules /           //数据模块</div><div class=\"line\">|   |   |   |——store.js            //vuex主入口</div><div class=\"line\">|   |   |   |——types.js            //vuex的types文件</div><div class=\"line\">|   |   |——App.vue                 //父组件</div><div class=\"line\">|   |   |——main.js                 //入口文件</div><div class=\"line\">|   |——static/</div><div class=\"line\">|   |——.babelrc</div><div class=\"line\">|   |——.editorconfig</div><div class=\"line\">|   |——.gitgnore</div><div class=\"line\">|   |——index.html</div><div class=\"line\">|   |——package.json</div><div class=\"line\">|   |——README.md</div></pre></td></tr></table></figure>\n<h2 id=\"主要难点\"><a href=\"#主要难点\" class=\"headerlink\" title=\"主要难点\"></a>主要难点</h2><p>1.各个组件数据的共享</p>\n<blockquote>\n<p>传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。而且也会导致代码难以维护</p>\n</blockquote>\n<p>解决方法：采用<a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"external\">vuex</a>进行状态管理，把所有事件和状态存储在store对象中，在组件中通过计算属性获得事件，因此就有了实时性。</p>\n<blockquote>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>每一个 Vuex 应用的核心就是 store（仓库）。”store” 基本上就是一个容器，它包含着应用中大部分的状态(state)。</p>\n<p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>\n<p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交(commit) <strong>mutations</strong>。这样使得我们可以方便地跟踪每一个状态的变化。</p>\n</blockquote>\n<p>代码如下(以一个user module为例)：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">//vuex/modules/user.js</div><div class=\"line\">import api from '../../fetch/api'</div><div class=\"line\">import * as types from '../types'</div><div class=\"line\"> </div><div class=\"line\">const state = &#123;</div><div class=\"line\">    // 用户登录状态</div><div class=\"line\">    loginStatus: JSON.parse(localStorage.getItem('loginStatus')) || false,</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">const actions = &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 用户登录</div><div class=\"line\">     */</div><div class=\"line\">    setUserInfo(&#123; commit &#125;, res) &#123;</div><div class=\"line\">        localStorage.setItem('loginStatus', true)</div><div class=\"line\">        commit(types.SET_LOGIN_STATUS, true)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    /**</div><div class=\"line\">     * 退出登录</div><div class=\"line\">     */</div><div class=\"line\">    setSignOut(&#123; commit &#125;) &#123;</div><div class=\"line\">        localStorage.removeItem('loginStatus')</div><div class=\"line\">        commit(types.SET_LOGIN_STATUS, false)</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">const getters = &#123;</div><div class=\"line\">    loginStatus: state =&gt; state.loginStatus</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">const mutations = &#123;</div><div class=\"line\">    [types.SET_LOGIN_STATUS](state, status) &#123;</div><div class=\"line\">        state.loginStatus = status</div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">export default &#123;</div><div class=\"line\">    state,</div><div class=\"line\">    actions,</div><div class=\"line\">    getters,</div><div class=\"line\">    mutations</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">//User.vue</div><div class=\"line\">&lt;template&gt;</div><div class=\"line\">\t&lt;div class=\"user\"&gt;</div><div class=\"line\">\t\t&lt;div v-if=\"!loginStatus\"&gt;</div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">\t\t&lt;div v-else&gt;\t</div><div class=\"line\">\t\t\t...\t\t</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">import &#123; mapGetters &#125; from 'vuex'</div><div class=\"line\">export default &#123;</div><div class=\"line\">\tcomputed: &#123;</div><div class=\"line\">\t\t...mapGetters([</div><div class=\"line\">\t\t\t'loginStatus'</div><div class=\"line\">\t\t])</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>2.时间选择组件(要可选择时间段)</p>\n<blockquote>\n<p><strong>规则：</strong></p>\n<ul>\n<li>默认值为：开始日期在后天，结束日期在第六天</li>\n<li>今天以前不可选择</li>\n<li>点击某个日子，则将最近的节点移动过</li>\n<li>如果离两个节点一样，则将开始日期移动过去</li>\n<li>两个节点也可选到1天里；显示为各一半</li>\n</ul>\n</blockquote>\n<p>一开始打算在github上搜索一个然后直接拿来用，发现都是不符合我的设计，所以打算自己撸一个，(不要怂，撸起袖子就是干)。<br>终于经过几个晚上的奋战写出来了(期间遇到了各种坑)。<br>代码就不贴出来了  <a href=\"https://github.com/hzzly/xyy-vue/blob/master/src/components/timePicker.vue\" target=\"_blank\" rel=\"external\">代码传送门</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虽然只是做了个小小的个人开源项目，但是我感觉收获还是很大的，很多知识点掌握得更加的牢固，对 <strong>vue全家桶</strong> 的理解又更深了一些。这个项目还没有完成，后期将不定期更新，敬请期待。。</p>\n<p>如果觉得还行，欢迎star<br><strong>项目地址：</strong> <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/xyy-vue</a></p>\n<p>好了，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"webpack工程化","url":"http://yoursite.com/2017/03/07/webpack工程化/","content":"<h3 id=\"一、webpack是什么\"><a href=\"#一、webpack是什么\" class=\"headerlink\" title=\"一、webpack是什么\"></a>一、webpack是什么</h3><blockquote>\n<p>webpack is a module bundler. webpack takes modules with dependencies and generates static assets representing those modules</p>\n</blockquote>\n<p>webpack 是一个模块打包工具，输入为包含依赖关系的模块集，输出为打包合并的前端静态资源。在上一节的前端工程化中，已经介绍过，webpack 是同时支持 AMD 和 CommonJs 的模块定义方式，不仅如此，webpack 可以将任何前端资源视为模块，如 css，图片，文本。</p>\n<h3 id=\"二、为什么要使用它\"><a href=\"#二、为什么要使用它\" class=\"headerlink\" title=\"二、为什么要使用它\"></a>二、为什么要使用它</h3><p>在 webpack 出现之前，已经有了一些打包工具，如 Browserify、grunt、gulp… 这些打包工具工具功能单一，只能完成特定的任务，然而 web 前端工程是复杂的，一个 webapp 对于业务代码的要求可能有：</p>\n<blockquote>\n<ul>\n<li>代码可以分块，实现按需加载</li>\n<li>首屏加载时间要尽量减少</li>\n<li>需要集成一些第三方库</li>\n</ul>\n</blockquote>\n<p>webpack 的出现正式为了解决这些问题，在 webpack 中，提供了一下这些功能：</p>\n<a id=\"more\"></a>\n<p><strong>1.代码分块：</strong> webpack 有两种类型的模块依赖，一种是同步的，一种是异步的。在打包的过程中可以将代码输出为代码块（chunk），代码块可以实现按需加载。 异步加载的代码块通过分割点（spliting point）来确定。<br><strong>2.Loaders：</strong> Webpack 本身只会处理 Javascript，为了实现将其他资源也定义为模块，并转化为 Javascript， Webpack 定义 loaders , 不同的 loader 可以将对应的资源转化为 Javascript 模块。<br><strong>3.智能的模块解析：</strong> webpack 可以很容易将第三方库转化为模块集成到项目代码中，模块的依赖可以用表达式的方式（这在其他打包工具中是没有支持的），这种模块依赖叫做动态模块依赖。<br><strong>4.插件系统：</strong> webpack 的可定制化在于其插件系统，其本身的很多功能也是通过插件的方式实现，插件系统形成了 webpack 的生态，是的可以使用很多开源的第三方插件。</p>\n<h3 id=\"三、webpack-核心思想\"><a href=\"#三、webpack-核心思想\" class=\"headerlink\" title=\"三、webpack 核心思想\"></a>三、webpack 核心思想</h3><p><strong>1.万物皆模块：</strong> 在 webpack 的世界中，除了 Javascript，其他任何资源都可以当做模块的方式引用。<br><strong>2.按需加载：</strong> webapp 的优化关键在于代码体积，当应用体积增大，实现代码的按需加载是毕需，这也是 webpack 出现的根本原因。<br><strong>3.可定制化：</strong> 任何一个工具都不可能解决所有问题，提供解决方案才是最可行的，webpack 基于可定制化的理念构建，通过插件系统，配置文件，可以实现大型项目的定制需求。</p>\n<h3 id=\"四、安装配置\"><a href=\"#四、安装配置\" class=\"headerlink\" title=\"四、安装配置\"></a>四、安装配置</h3><p>在此之前你应该已经安装了 node.js.</p>\n<p>全局安装webapck或webpack-dev-server(开启一个本地服务)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install webpack -g</div><div class=\"line\">$ npm install webpack-dev-server -g</div></pre></td></tr></table></figure></p>\n<p>在项目中安装webpack和webpack-dev-server<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install webpack --save-dev</div><div class=\"line\">$ npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure></p>\n<p><strong>webpack使用</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//name.js</span></div><div class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'hzzly'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> name</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> name <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>).textContent = <span class=\"string\">`hello~<span class=\"subst\">$&#123;name&#125;</span>`</span></div></pre></td></tr></table></figure></p>\n<p>1.命令行的使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack src/index.js dist/bundle.js</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>语法：webpack 要打包的文件 打包输出的文件</p>\n</blockquote>\n<p>2.配置文件的使用<br>在项目目录下创建 webpack.config.js如下(简单的配置)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">'./src/index.js'</span>,  <span class=\"comment\">//入口</span></div><div class=\"line\">  output: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'./dist/'</span>,    <span class=\"comment\">//输出路径</span></div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>   <span class=\"comment\">//输出文件名</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">loaders</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js[x]?$/</span>,</div><div class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span>,  <span class=\"comment\">//处理.js或.jsx文件loader</span></div><div class=\"line\">        query: &#123;</div><div class=\"line\">          <span class=\"attr\">presets</span>: [<span class=\"string\">'env'</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">\"style-loader!css-loader\"</span>   <span class=\"comment\">//处理.css文件loader</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg)$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'url-loader?limit=8192'</span>    <span class=\"comment\">//处理图片loader</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack</div><div class=\"line\">//或开启本地服务器并实时监听文件变化</div><div class=\"line\">$ webpack-dev-server --inline --colors --hot</div></pre></td></tr></table></figure></p>\n<p><strong>Github地址：</strong> <a href=\"https://github.com/hzzly/webpack\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/webpack</a><br>欢迎大家的star啦~</p>\n<p>好了，装了一大波，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"前后端分离的尝试","url":"http://yoursite.com/2017/03/06/前后端分离的尝试/","content":"<p>首次尝试前后端分离是在一个外包项目中:</p>\n<blockquote>\n<p>点匠科技 o2o的家装类 移动项目微信平台前端开发主要工作内容是将原有的android、ios 应用 配合后端工程师开发一套 微信产品,个人角色为 前端开发工程师 负责界面 html css vue 前后端数据联调等工作</p>\n</blockquote>\n<p><a href=\"http://www.dianjiang99.com/html/user_center/user_center.html\" target=\"_blank\" rel=\"external\">项目地址</a><br>(测试账号:15103585135 测试密码:123456)</p>\n<p>这次的项目<strong>技术栈</strong></p>\n<blockquote>\n<ul>\n<li>vue vue-router vuex </li>\n<li>weui</li>\n<li>sass</li>\n<li>es6 ajax</li>\n</ul>\n</blockquote>\n<p>通过这次项目，让我体会到了这种前后端分离的快感，所以特来分享一波。</p>\n<p>如果你没有尝试过前后端分离的工作流程，那么可以先试想一下这样的流程改变：</p>\n<a id=\"more\"></a>\n<p><strong>把流程从</strong></p>\n<blockquote>\n<ul>\n<li>PM：“我要这个功能”</li>\n<li>后端：“这个先找前端做个模板”</li>\n<li>前端：“模板做完了”</li>\n<li>后端：“我来对接一下，这里样式不对”</li>\n<li>前端：“我改完了”</li>\n<li>后端：“功能交付”</li>\n<li>PM：“春节要加这个活动”</li>\n<li>后端：“这个先找前端改个模板”</li>\n<li>前端：“模板做完了”</li>\n<li>后端：“我来对接一下，这里样式不对”</li>\n<li>前端：“我改完了”</li>\n<li>后端：“功能交付”</li>\n</ul>\n</blockquote>\n<p><strong>变成</strong></p>\n<blockquote>\n<ul>\n<li>PM：“我要这个功能”</li>\n<li>前端：“我要接口”</li>\n<li>后端：“接口完成了”</li>\n<li>前端：“我来对接一下，功能交付”</li>\n<li>PM：“春节要加这个活动”</li>\n<li>前端：“需要增加接口”</li>\n<li>后端：“接口完成了”</li>\n<li>前端：“我来对接一下，功能交付”</li>\n</ul>\n</blockquote>\n<p><strong>由此可见，前后端分离的主要概念就是：后台只需提供API接口，前端调用AJAX实现数据呈现。</strong></p>\n<p>前后端分离的实现对技术人员尤其是前端人员的要求会上升一个层次，前端的工作不只是切页面写模板或是处理一些简单的js逻辑，前端需要处理服务器返回的各种数据格式，还需要掌握一系列的数据处理逻辑、MVVM思想和各种主流前端框架(React, Vue..)。</p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>对于前后端分离的意义我们也可以看做是前端渲染的意义，我主要总结了下面四点：</p>\n<p><strong>1. 彻底解放前端</strong></p>\n<blockquote>\n<p>前端不再需要向后台提供模板或是后台在前端html中嵌入后台代码，前后端解耦，增加可读性。</p>\n</blockquote>\n<p><strong>2. 提高工作效率，分工更加明确</strong></p>\n<blockquote>\n<p>前后端分离的工作流程可以使前端只关注前端的事，后台只关心后台的活，两者开发可以同时进行，在后台还没有时间提供接口的时候，前端可以先将数据写死或者调用本地的json文件即可，页面的增加和路由的修改也不必再去麻烦后台，开发更加灵活。</p>\n</blockquote>\n<p><strong>3. 局部性能提升</strong></p>\n<blockquote>\n<p>通过前端路由的配置，我们可以实现页面的按需加载，无需一开始加载首页便加载网站的所有的资源，服务器也不再需要解析前端页面，在页面交互及用户体验上有所提升。</p>\n</blockquote>\n<p><strong>4. 降低维护成本</strong></p>\n<blockquote>\n<p>通过目前主流的前端MVVM框架，我们可以非常快速的定位及发现问题的所在，客户端的问题不再需要后台人员参与及调试，代码重构及可维护性增强。</p>\n</blockquote>\n<p><strong>面对快速发展的前端，我们应该去适应其带来的工作方式和流程的改变，目前的前后端分离的工作方式必然是今后的趋势所在，作为一个前端开发人员，我们应当承担这个普及前端新知识和改变现状的职责。</strong></p>\n<p>我的<a href=\"https://github.com/hzzly\" target=\"_blank\" rel=\"external\">Github</a></p>\n<p>好了，装了一大波，溜了溜了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"前端入坑笔记–JavaScript类型检测","url":"http://yoursite.com/2017/03/05/前端入坑笔记–JavaScript类型检测/","content":"<p><strong>JavaScript变量可以用来保存两种类型的值：基本类型值和引用类型值</strong></p>\n<blockquote>\n<ul>\n<li>5种基本数据类型：String Number Boolean Undefined  Null  </li>\n<li>引用类型：Object  Array  Data  RegExp  Function  Error  Map  …   </li>\n</ul>\n</blockquote>\n<p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值</p>\n<h2 id=\"一、typeof\"><a href=\"#一、typeof\" class=\"headerlink\" title=\"一、typeof\"></a>一、typeof</h2><p>   typeof 用来判断各种数据类型,有两种写法：typeof xxx, typeof(xxx) </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'hzzly'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">22</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> d;</div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> a );       <span class=\"comment\">//string</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> b );       <span class=\"comment\">//boolean</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> c );       <span class=\"comment\">//number</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> d );       <span class=\"comment\">//undefined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> e );       <span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> o );       <span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> f );       <span class=\"comment\">//function</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> &#123;&#125; );      <span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"keyword\">typeof</span> [] );      <span class=\"comment\">//object</span></div></pre></td></tr></table></figure>\n<p>这里面包含了js里面的五种数据类型  number   string    boolean   undefined     object和函数类型 function</p>\n<p>看到这里你肯定会问了：我怎么去区分对象，数组和null呢?</p>\n<p>接下来我们就用到另外两个利器：Object.prototype.toString.call   instanceof/constructor</p>\n<a id=\"more\"></a>\n<h2 id=\"二、Object-prototype-toString-call\"><a href=\"#二、Object-prototype-toString-call\" class=\"headerlink\" title=\"二、Object.prototype.toString.call\"></a>二、Object.prototype.toString.call</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gettype=<span class=\"built_in\">Object</span>.prototype.toString</div><div class=\"line\"> </div><div class=\"line\">gettype.call(<span class=\"string\">'hzzly'</span>)        输出 [object <span class=\"built_in\">String</span>]</div><div class=\"line\"> </div><div class=\"line\">gettype.call(<span class=\"number\">22</span>)             输出 [object <span class=\"built_in\">Number</span>]</div><div class=\"line\"> </div><div class=\"line\">gettype.call(<span class=\"literal\">true</span>)           输出 [object <span class=\"built_in\">Boolean</span>]</div><div class=\"line\"> </div><div class=\"line\">gettype.call(<span class=\"literal\">undefined</span>)      输出 [object Undefined]</div><div class=\"line\"> </div><div class=\"line\">gettype.call(<span class=\"literal\">null</span>)           输出 [object Null]</div><div class=\"line\"> </div><div class=\"line\">gettype.call(&#123;&#125;)             输出 [object <span class=\"built_in\">Object</span>]</div><div class=\"line\"> </div><div class=\"line\">gettype.call([])             输出 [object <span class=\"built_in\">Array</span>]</div><div class=\"line\"> </div><div class=\"line\">gettype.call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)   输出 [object <span class=\"built_in\">Function</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"三、instanceof-constructor\"><a href=\"#三、instanceof-constructor\" class=\"headerlink\" title=\"三、instanceof/constructor\"></a>三、instanceof/constructor</h2><p>根据规定，所有引用类型的值都是Object的实例。因此，在检测一个引用类型值和Object 构造函数时，instanceof 操作符始终会返回true。当然，如果使用instanceof 操作符检测基本类型的值，则该操作符始终会返回false，因为基本类型不是对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log([] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);         <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"regexp\">/^$/</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>);      <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log([] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);        <span class=\"comment\">//true</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log([].constructor === <span class=\"built_in\">Array</span>);    <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log([].constructor === <span class=\"built_in\">Object</span>);   <span class=\"comment\">//false 我们的constructor可以避免instanceof检测的时候,用Object也是true的问题</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125;.constructor === <span class=\"built_in\">Object</span>);   <span class=\"comment\">//true</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>);         <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<p>   看到这里，刚才的问题我们解决了</p>\n<p>   <strong>检测数组</strong>，ECMAScript5新增了Array.isArray() 方法。这个方法的目的是最终确定某个值到底是不是数组，而不管它是在哪个全局执行环境中创建。这个方法的用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>( <span class=\"built_in\">Array</span>.isArray(value) )&#123;</div><div class=\"line\"> <span class=\"comment\">//对数组执行某些操作</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"四、题外话\"><a href=\"#四、题外话\" class=\"headerlink\" title=\"四、题外话\"></a>四、题外话</h2><p>基本类型值与引用类型值具有如下特点：</p>\n<blockquote>\n<ul>\n<li>基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中</li>\n<li>从一个变量向另一个变量复制基本类型的值，会创建这个值得一个副本</li>\n<li>引用类型的值是对象，保存在堆内存中</li>\n<li>包含引用类型值得变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li>\n<li>从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象</li>\n</ul>\n</blockquote>\n<p><img src=\"http://hjingren.cn/publicImages/refuel.jpg\" alt=\"refuel\"></p>\n<p>好了，遛了遛了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"手把手用Node的socket.io撸一个简单聊天室","url":"http://yoursite.com/2017/03/04/手把手用Node的socket.io撸一个简单聊天室/","content":"<h5 id=\"点击查看效果\"><a href=\"#点击查看效果\" class=\"headerlink\" title=\"点击查看效果\"></a><a href=\"http://hjingren.cn:3000/\" target=\"_blank\" rel=\"external\">点击查看效果</a></h5><blockquote>\n<ul>\n<li>Socket.IO用于浏览器与Node.js之间实现实时通信。</li>\n<li>Socket.IO设计的目标是支持任何的浏览器，任何Mobile设备。</li>\n<li>支持主流的PC浏览器 (IE,Safari,Chrome,Firefox,Opera等)，</li>\n<li>Mobile浏览器(iphone Safari/ipad Safari/Android WebKit/WebOS WebKit等)。</li>\n<li>Socket.IO解决了实时的通信问题，并统一了服务端与客户端的编程方式。</li>\n<li>启动了socket以后，就像建立了一条客户端与服务端的管道，两边可以互通有无。</li>\n</ul>\n</blockquote>\n<h2 id=\"一、初始化一个Express项目\"><a href=\"#一、初始化一个Express项目\" class=\"headerlink\" title=\"一、初始化一个Express项目\"></a>一、初始化一个Express项目</h2><p>通过应用生成器工具 express 可以快速创建一个应用的骨架。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 全局安装express 脚手架</div><div class=\"line\">$ npm install express-generator -g</div><div class=\"line\"> </div><div class=\"line\">//在当前工作目录创建一个命名为 chat-node 的应用</div><div class=\"line\">$ express <span class=\"_\">-e</span> chat-node</div><div class=\"line\"> </div><div class=\"line\">//安装所有依赖</div><div class=\"line\">$ <span class=\"built_in\">cd</span> chat-node </div><div class=\"line\">$ npm install</div><div class=\"line\"> </div><div class=\"line\">//启动这个应用（MacOS 或 Linux 平台）：</div><div class=\"line\">$ npm start</div></pre></td></tr></table></figure>\n<p>然后在浏览器中打开 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a> 网址就可以看到这个应用了</p>\n<h2 id=\"二、安装Socket-IO\"><a href=\"#二、安装Socket-IO\" class=\"headerlink\" title=\"二、安装Socket.IO\"></a>二、安装Socket.IO</h2><p>这里使用 npm 安装到项目依赖中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install socket.io --save</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"三、整合Socket-IO到项目中\"><a href=\"#三、整合Socket-IO到项目中\" class=\"headerlink\" title=\"三、整合Socket.IO到项目中\"></a>三、整合Socket.IO到项目中</h2><p>找到服务开启的www文件</p>\n<blockquote>\n<p>根目录 &gt; bin &gt; www</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在创建服务器(var server = http.createServer(app))之后添加如下代码</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(server);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 在线用户</span></div><div class=\"line\"><span class=\"keyword\">var</span> onlineUser = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">// 在线人数</span></div><div class=\"line\"><span class=\"keyword\">var</span> onlineCount = <span class=\"number\">0</span>;</div><div class=\"line\"> </div><div class=\"line\">io.on(<span class=\"string\">'connection'</span>, (socket) =&gt; &#123;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 监听新用户加入</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a user connected'</span>);</div><div class=\"line\"> </div><div class=\"line\">  socket.on(<span class=\"string\">'disconnect'</span>, () =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'user disconnected'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">//监听post数据加入</span></div><div class=\"line\">  socket.on(<span class=\"string\">'post'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">say</span>) </span>&#123;</div><div class=\"line\">    io.emit(<span class=\"string\">'post'</span>, say)   <span class=\"comment\">//通过io的emit把数据发送到前台</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>通过传递server(HTTP服务器)来初始化socket.io的一个新实例，然后监听连接sockets的connection事件，并将其记录到控制台。</p>\n<h2 id=\"三、修改前台代码\"><a href=\"#三、修改前台代码\" class=\"headerlink\" title=\"三、修改前台代码\"></a>三、修改前台代码</h2><p>在 views 目录下新建一个index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>聊天室<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"chat\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"chatApp\"</span> <span class=\"attr\">v-cloak</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room-list\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in msgList\"</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"msg-detail\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"send-box\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"写点什么喃...\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"sendMsg\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSendMsg\"</span>&gt;</span>发送<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我在里面引入了socket.io以及vue(更好的渲染数据)</p>\n<h2 id=\"四、编写业务代码\"><a href=\"#四、编写业务代码\" class=\"headerlink\" title=\"四、编写业务代码\"></a>四、编写业务代码</h2><blockquote>\n<p>在 public &gt; javascripts 下新建一个index.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> socket = io();  <span class=\"comment\">//加载socket.io-client会暴露一个全局io并连接。</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> vue = <span class=\"keyword\">new</span> Vue(&#123;  <span class=\"comment\">//实例化一个Vue实例</span></div><div class=\"line\">\tel: <span class=\"string\">\"#chatApp\"</span>,</div><div class=\"line\">\tdata() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;        <span class=\"comment\">//数据驱动</span></div><div class=\"line\">\t\t\tsendMsg: <span class=\"string\">''</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">msgList</span>: []</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tmounted() &#123;             </div><div class=\"line\">\t\tsocket.on(<span class=\"string\">'post'</span>, (say) =&gt; &#123;   <span class=\"comment\">//接收服务端的 post 命令</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.msgList.push(say)       <span class=\"comment\">//添加到msgList中给前台渲染出来</span></div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">\t\tdoSendMsg() &#123;                  <span class=\"comment\">//监听按钮发送的事件</span></div><div class=\"line\">\t\t\tsocket.emit(<span class=\"string\">'post'</span>, <span class=\"keyword\">this</span>.sendMsg)    <span class=\"comment\">//把要发送的数据emit到服务端</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.sendMsg = <span class=\"string\">''</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"五、在对应路由中打开index-html\"><a href=\"#五、在对应路由中打开index-html\" class=\"headerlink\" title=\"五、在对应路由中打开index.html\"></a>五、在对应路由中打开index.html</h2><blockquote>\n<p>在 routes &gt; index.js 修改如下代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* GET home page. */</span></div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  res.sendFile(path.join(__dirname, <span class=\"string\">'../views'</span>, <span class=\"string\">'index.html'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后在浏览器中打开 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a> 网址就可以看到这个应用de效果了</p>\n<p><img src=\"https://hzzly.github.io/img/chat-node1.gif\" alt=\"chat-node1\"></p>\n<h5 id=\"Github-Demo\"><a href=\"#Github-Demo\" class=\"headerlink\" title=\"Github Demo\"></a><a href=\"https://github.com/hzzly/chat-node\" target=\"_blank\" rel=\"external\">Github Demo</a></h5><p>欢迎star</p>\n<p>好了，遛了遛了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"Web的Flex弹性盒模型","url":"http://yoursite.com/2017/03/03/Web的Flex弹性盒模型/","content":"<h2 id=\"一、Flex布局是什么？\"><a href=\"#一、Flex布局是什么？\" class=\"headerlink\" title=\"一、Flex布局是什么？\"></a>一、Flex布局是什么？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>行内元素也可以使用Flex布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二、容器的属性\"><a href=\"#二、容器的属性\" class=\"headerlink\" title=\"二、容器的属性\"></a>二、容器的属性</h2><blockquote>\n<ul>\n<li>[ flex-direction ]</li>\n<li>[ flex-wrap ]</li>\n<li>[ flex-flow ]</li>\n<li>[ justify-content ]</li>\n<li>[ align-self ]</li>\n<li>[ align-items ]</li>\n<li>[ align-content ]</li>\n<li>[ order ]</li>\n</ul>\n</blockquote>\n<h5 id=\"点击查看实例\"><a href=\"#点击查看实例\" class=\"headerlink\" title=\"点击查看实例\"></a><a href=\"http://hjingren.cn/flex/\" target=\"_blank\" rel=\"external\">点击查看实例</a></h5><blockquote>\n<p>下方为简略图</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://hzzly.github.io/img/flex.png\" alt=\"flex\"></p>\n<p>好了，遛了遛了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"博客正式上线","url":"http://yoursite.com/2017/03/02/博客正式上线/","content":"<p>折腾了一个晚上，终于把Github Page上的博客搭起来了，有点小激动。哈哈哈，蛋定蛋定。<br>之前一直想弄一个博客来着，偶然间发现了这个基于Node的Hexo博客，还可以放到Github上，很方便。<br>你也可以试一试 (:<br>好了，不扯这么多了，此博客将记录我学习的笔记、知识，并将其中承载的价值传给他人。</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日报，杂文，所见所想</li>\n<li>撰写发布技术博客（代码支持）</li>\n<li>撰写发布学术论文</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Refuel</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">constructor</span> (refuel) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.refuel = refuel</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\trefuel () &#123;</div><div class=\"line\">\t\talert(<span class=\"keyword\">this</span>.refuel)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Refuel(<span class=\"string\">'加油！！！'</span>);</div></pre></td></tr></table></figure>\n<p><img src=\"http://hjingren.cn/publicImages/refuel.jpg\" alt=\"refuel\"></p>\n<p>好了，遛了遛了。。。</p>\n","categories":[],"tags":["随笔"]},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"@font-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\nhtml.page-home {\n  height: 100%;\n  /*background-image: url('/images/bg.jpg')*/\n  background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n  background-blend-mode: screen;\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"我的作品、项目","url":"http://yoursite.com/project/index.html","content":"<h1 id=\"外包\"><a href=\"#外包\" class=\"headerlink\" title=\"外包\"></a>外包</h1><ul>\n<li><strong>中包联盟</strong><br>全套前端界面</li>\n</ul>\n<blockquote>\n<ul>\n<li>PC官网（Vue+Vue-Router） <a href=\"http://www.zblmchina.com\" target=\"_blank\" rel=\"external\">http://www.zblmchina.com</a></li>\n<li>微信微官网（Vue+Vue-Router+Swiper） <a href=\"http://www.zblmchina.com/m/index.html\" target=\"_blank\" rel=\"external\">http://www.zblmchina.com/m/</a></li>\n<li>PC后台管理 <a href=\"http://www.zblmchina.com/admin/index.php\" target=\"_blank\" rel=\"external\">http://www.zblmchina.com/admin/index.php</a></li>\n<li>微信后台管理 </li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>点匠环保工程</strong><br>一个微信公众号的招工系统,使用了手淘的flexible移动端适配方案,jquery+vue+weui,前后端分离,各种Vue组件</li>\n</ul>\n<blockquote>\n<p><a href=\"http://www.dianjiang99.com/html/user_center/user_center.html\" target=\"_blank\" rel=\"external\">http://www.dianjiang99.com/html/user_center/user_center.html</a><br>(测试账号:15103585135 测试密码:123456)</p>\n</blockquote>\n<h1 id=\"个人项目\"><a href=\"#个人项目\" class=\"headerlink\" title=\"个人项目\"></a>个人项目</h1><ul>\n<li><strong>《Qu约》开源项目</strong></li>\n</ul>\n<blockquote>\n<p>项目地址： <a href=\"https://github.com/hzzly/xyy-vue\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/xyy-vue</a><br>demo地址： <a href=\"http://hjingren.cn/xyy-vue/\" target=\"_blank\" rel=\"external\">http://hjingren.cn/xyy-vue/</a></p>\n</blockquote>\n<ul>\n<li><strong>Vue音乐播放器</strong></li>\n</ul>\n<blockquote>\n<p>项目地址： <a href=\"https://github.com/hzzly/MagicMusic\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/MagicMusic</a><br>demo地址： <a href=\"http://hjingren.cn/magic-music\" target=\"_blank\" rel=\"external\"> http://hjingren.cn/magic-music</a></p>\n</blockquote>\n<ul>\n<li><strong>Vue仿qq音乐播放页面</strong></li>\n</ul>\n<blockquote>\n<p>正在进行中，敬请期待。。</p>\n</blockquote>\n<ul>\n<li><strong>日历组件</strong></li>\n</ul>\n<blockquote>\n<p>项目地址： <a href=\"https://github.com/hzzly/vue-datetime-pickerc\" target=\"_blank\" rel=\"external\">https://github.com/hzzly/vue-datetime-picker</a><br>demo地址： <a href=\"http://hjingren.cn/mydemo/datepickerv2/dist/\" target=\"_blank\" rel=\"external\"> http://hjingren.cn/mydemo/datepickerv2/dist/</a></p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]}]