<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hzzly</title>
  
  <subtitle>上善若水，笃学敦行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-21T06:30:10.486Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hzzly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js处理long型丢失精度问题</title>
    <link href="http://yoursite.com/2020/01/21/JavaScript%E5%A4%84%E7%90%86Long%E5%9E%8B%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6/"/>
    <id>http://yoursite.com/2020/01/21/JavaScript处理Long型丢失精度/</id>
    <published>2020-01-21T06:03:51.000Z</published>
    <updated>2020-01-21T06:30:10.486Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目后端为Prong开发了一个基于snowflake算法的Java分布式ID组件，将实体主键从原来的String类型的UUID修改成了Long型的分布式ID。修改后发现前端显示的ID和数据库中的ID不一致。例如数据库中存储的是：812782555915911412，显示出来却成了812782555915911400，后面2位变成了0，精度丢失了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">812782555915911412</span>);</span><br><span class="line"><span class="number">812782555915911400</span></span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>这是因为JavaScript中数字的精度是有限的，Java的Long类型的数字超出了JavaScript的处理范围。JavaScript内部只有一种数字类型Number，所有数字都是采用IEEE 754 标准定义的双精度64位格式存储，即使整数也是如此。这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。其结构如图：</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/long/long.png" alt="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/long/long.png"></p><p>各位的含义如下：</p><ul><li>1位（s） 用来表示符号位，0表示正数，1表示负数</li><li>11位（e） 用来表示指数部分</li><li>52位（f） 表示小数部分（即有效数字）</li></ul><p>双精度浮点数(<code>double</code>)并不是能够精确表示范围内的所有数， 虽然双精度浮点型的范围看上去很大: 。 可以表示的最大整数可以很大，但能够精确表示，使用算数运算的并没有这么大。因为小数部分最大是 <code>52</code> 位，因此 JavaScript 中能精准表示的最大整数是 ，十进制即 <code>9007199254740991</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>L&lt;&lt;<span class="number">53</span>);</span><br><span class="line"><span class="number">9007199254740991</span></span><br></pre></td></tr></table></figure><p>JavaScript 有所谓的最大和最小安全值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER);</span><br><span class="line"><span class="number">9007199254740991</span></span><br><span class="line"><span class="number">-9007199254740991</span></span><br></pre></td></tr></table></figure><p><code>安全</code> 意思是说能够 <code>one-by-one</code> 表示的整数，也就是说在范围内，双精度数表示和整数是一对一的，在这个范围以内，所有的整数都有唯一的浮点数表示，这叫做安全整数。</p><p>而超过这个范围，会有两个或更多整数的双精度表示是相同的；即超过这个范围，有的整数是无法精确表示的，只能大约(round)到与它相近的浮点数（说到底就是科学计数法）表示，这种情况下叫做<code>不安全整数</code>，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>); <span class="comment">// 结果：9007199254740992，精度未丢失</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">2</span>); <span class="comment">// 结果：9007199254740992，精度丢失</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">3</span>); <span class="comment">// 结果：9007199254740994，精度未丢失</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">4</span>); <span class="comment">// 结果：9007199254740996，精度丢失</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">5</span>); <span class="comment">// 结果：9007199254740996，精度未丢失</span></span><br></pre></td></tr></table></figure><p>而 <code>Java</code> 的 <code>Long</code> 类型的有效位数是63位（扣除一位符号位），其最大值为，十进制为9223372036854775807。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(Long.MAX_VALUE);</span><br><span class="line">    System.out.println((<span class="number">1L</span>&lt;&lt;<span class="number">63</span>) -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">9223372036854775807</span></span><br><span class="line"><span class="number">9223372036854775807</span></span><br></pre></td></tr></table></figure><p>所以只要java传给JavaScript的 <code>Long</code> 类型的值超过9007199254740991，就有可能产生精度丢失，从而导致数据和逻辑出错。</p><blockquote><p>和其他编程语言（如 C 和 Java）不同，JavaScript 不区分整数值和浮点数值，所有数字在 JavaScript 中均用浮点数值表示，所以在进行数字运算的时候要特别注意精度缺失问题。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p><p>进一步阅读：<a href="https://wangdoc.com/javascript/types/number.html" target="_blank" rel="noopener">JavaScript 教程 - 数据类型 - 数值</a></p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决办法就是让Javascript把数字当成字符串进行处理。对Javascript来说如果不进行运算，数字和字符串处理起来没有什么区别。当然如果需要进行运算，只能采用其他方法，例如JavaScript的一些开源库 bignum、bigint等支持长整型的处理。Java进行JSON处理的时候是能够正确处理long型的，只需要将数字转化成字符串就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目后端为Prong开发了一个基于snowflake算法的Java分布式ID组件，将实体主键从原来的String类型的UUID修改成了Long型的分布式ID。修改后发现前端显示的ID和数据库中的ID不一致。例如数据库中存储的是：812782555915911412，显示
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="随便" scheme="http://yoursite.com/tags/%E9%9A%8F%E4%BE%BF/"/>
    
  </entry>
  
  <entry>
    <title>h5手机键盘弹出收起的处理</title>
    <link href="http://yoursite.com/2020/01/19/h5%E6%89%8B%E6%9C%BA%E9%94%AE%E7%9B%98%E5%BC%B9%E5%87%BA%E6%94%B6%E8%B5%B7%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2020/01/19/h5手机键盘弹出收起的处理/</id>
    <published>2020-01-19T07:30:32.000Z</published>
    <updated>2020-01-19T07:34:31.854Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：前端时间也是应项目的需求开始了h5移动端的折腾之旅，在目前中台的基础上扩展了两个ToC移动端项目，下面就是在h5移动端表单页面键盘弹出收起兼容性的一些总结。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在 h5 项目中，我们会经常遇到一些表单页面，在输入框获取焦点时，会自动触发键盘弹起，而键盘弹出在 IOS 与 Android 的 webview 中表现并非一致，同时当我们主动触发键盘收起时也同样存在差异化。</p><h3 id="键盘弹出"><a href="#键盘弹出" class="headerlink" title="键盘弹出"></a>键盘弹出</h3><ul><li>IOS：IOS系统 的键盘处在窗口的最上层，当键盘弹起时，webview 的高度 height 并没有改变，只是 scrollTop 发生变化，页面可以滚动。且页面可以滚动的最大限度为弹出的键盘的高度，而只有键盘弹出时页面恰好也滚动到最底部时，scrollTop 的变化值为键盘的高度，其他情况下则无法获取。这就导致在 IOS 情况下难以获取键盘的真实高度。</li><li>Android: 在Android系统中，键盘也是处在窗口的最上层，键盘弹起时，如果输入框在靠近底部的话，就会被键盘挡住，只有你输入的时候输入框才会滚动到可视化区域。</li></ul><h3 id="键盘收起"><a href="#键盘收起" class="headerlink" title="键盘收起"></a>键盘收起</h3><ul><li>IOS：触发键盘上的按钮收起键盘或者输入框以外的页面区域时，输入框会失去焦点，因此会触发输入框的 blur 事件；当键盘收起时，页面底部会出现一个空白区域，页面会被顶起。</li><li>Android: 触发键盘上的按钮收起键盘时，输入框并不会失去焦点，因此不会触发页面的 blur 事件；触发输入框以外的区域时，输入框会失去焦点，触发输入框的 blur 事件。</li></ul><h2 id="期望的结果"><a href="#期望的结果" class="headerlink" title="期望的结果"></a>期望的结果</h2><p>针对不同系统触发键盘弹出收起时的差异化，我们希望功能流畅的同时，尽量保持用户体验的一致性。</p><h2 id="对症下药"><a href="#对症下药" class="headerlink" title="对症下药"></a>对症下药</h2><p>上面我们理清了目前市面上两大主要系统的差异性，接下来就需对症下药了。</p><p>在 h5 中目前没有接口可以直接监听键盘事件，但我们可以通过分析键盘弹出、收起的触发过程及表现形式，来判断键盘是弹出还是收起的状态。</p><ul><li>键盘弹出：输入框获取焦点时会自动触发键盘的弹起动作，因此，我们可以监听 focusin 事件，在里面实现键盘弹出后所需的页面逻辑。</li><li><p>键盘收起：当触发其他页面区域收起键盘时，我们可以监听 focusout 事件，在里面实现键盘收起后所需的页面逻辑。而在通过键盘按钮收起键盘时在 ios 与 android 端存在差异化表现，下面具体分析：</p><ul><li>IOS：触发了 focusout 事件，仍然通过该办法监听。</li><li>Android：没有触发 focusout 事件。在 android 中，键盘的状态切换（弹出、收起）不仅和输入框关联，同时还会影响到 webview 高度的变化，那我们就可以通过监听 webview height 的变化来判断键盘是否收起。</li></ul></li></ul><h3 id="系统判断"><a href="#系统判断" class="headerlink" title="系统判断"></a>系统判断</h3><p>在实践中我们可以通过 userAgent 来判断目前的系统：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLocaleLowerCase();</span><br><span class="line"><span class="keyword">const</span> isIOS = <span class="regexp">/iphone|ipad|ipod/</span>.test(ua);</span><br><span class="line"><span class="keyword">const</span> isAndroid = <span class="regexp">/android/</span>.test(ua);</span><br></pre></td></tr></table></figure><h3 id="IOS-处理"><a href="#IOS-处理" class="headerlink" title="IOS 处理"></a>IOS 处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isReset = <span class="literal">true</span>; <span class="comment">//是否归位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.focusinHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  isReset = <span class="literal">false</span>; <span class="comment">//聚焦时键盘弹出，焦点在输入框之间切换时，会先触发上一个输入框的失焦事件，再触发下一个输入框的聚焦事件</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.focusoutHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  isReset = <span class="literal">true</span>;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//当焦点在弹出层的输入框之间切换时先不归位</span></span><br><span class="line">    <span class="keyword">if</span> (isReset) &#123;</span><br><span class="line">        <span class="built_in">window</span>.scroll(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">//确定延时后没有聚焦下一元素，是由收起键盘引起的失焦，则强制让页面归位</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'focusin'</span>, <span class="keyword">this</span>.focusinHandler);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'focusout'</span>, <span class="keyword">this</span>.focusoutHandler);</span><br></pre></td></tr></table></figure><h3 id="Android-处理"><a href="#Android-处理" class="headerlink" title="Android 处理"></a>Android 处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originHeight = <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.resizeHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> resizeHeight = <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">  <span class="keyword">const</span> activeElement = <span class="built_in">document</span>.activeElement;</span><br><span class="line">  <span class="keyword">if</span> (resizeHeight &lt; originHeight) &#123;</span><br><span class="line">    <span class="comment">// 键盘弹起后逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (activeElement &amp;&amp; (activeElement.tagName === <span class="string">"INPUT"</span> || activeElement.tagName === <span class="string">"TEXTAREA"</span>)) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        activeElement.scrollIntoView(&#123; <span class="attr">block</span>: <span class="string">'center'</span> &#125;);<span class="comment">//焦点元素滚到可视区域的问题</span></span><br><span class="line">      &#125;,<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 键盘收起后逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.resizeHandler);</span><br></pre></td></tr></table></figure><h2 id="react-封装"><a href="#react-封装" class="headerlink" title="react 封装"></a>react 封装</h2><p>在 react 中我们可以写一个类装饰器来修饰表单组件。</p><blockquote><p>类装饰器：类装饰器在类声明之前被声明（紧靠着类声明）。 类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keyboard.tsx</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description: 键盘处理装饰器</span></span><br><span class="line"><span class="comment"> * @Author: hzzly</span></span><br><span class="line"><span class="comment"> * @LastEditors: hzzly</span></span><br><span class="line"><span class="comment"> * @Date: 2020-01-09 09:36:40</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-01-10 12:08:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keyboard = <span class="function"><span class="params">()</span> =&gt;</span> (WrappedComponent: any) =&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    focusinHandler: <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">void</span>) | <span class="literal">undefined</span>;</span><br><span class="line">    focusoutHandler: <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">void</span>) | <span class="literal">undefined</span>;</span><br><span class="line">    resizeHandler: <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">void</span>) | <span class="literal">undefined</span>;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLocaleLowerCase();</span><br><span class="line">      <span class="keyword">const</span> isIOS = <span class="regexp">/iphone|ipad|ipod/</span>.test(ua);</span><br><span class="line">      <span class="keyword">const</span> isAndroid = <span class="regexp">/android/</span>.test(ua);</span><br><span class="line">      <span class="keyword">if</span> (isIOS) &#123;</span><br><span class="line">        <span class="comment">// 上面 IOS 处理</span></span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isAndroid) &#123;</span><br><span class="line">        <span class="comment">// 上面 Android 处理</span></span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.focusinHandler &amp;&amp; <span class="keyword">this</span>.focusoutHandler) &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.removeEventListener(<span class="string">'focusin'</span>, <span class="keyword">this</span>.focusinHandler);</span><br><span class="line">        <span class="built_in">document</span>.body.removeEventListener(<span class="string">'focusout'</span>, <span class="keyword">this</span>.focusoutHandler);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.resizeHandler) &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.resizeHandler);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default keyboard;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PersonForm.tsx</span></span><br><span class="line">@keyboard()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonForm</span> <span class="keyword">extends</span> <span class="title">PureComponent</span>&lt;</span>&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PersonForm;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：前端时间也是应项目的需求开始了h5移动端的折腾之旅，在目前中台的基础上扩展了两个ToC移动端项目，下面就是在h5移动端表单页面键盘弹出收起兼容性的一些总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>记npm login的一次异常解决</title>
    <link href="http://yoursite.com/2019/12/23/%E8%AE%B0npm%20login%E7%9A%84%E4%B8%80%E6%AC%A1%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2019/12/23/记npm login的一次异常解决/</id>
    <published>2019-12-23T05:40:08.000Z</published>
    <updated>2019-12-23T05:41:46.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在工作中，我们常常会将一些通用性代码，比如一些工具类、公用业务逻辑代码以及团队定制化的UI库等，发布到私有npm仓库。需要的项目直接安装使用即可。</p><p>在一次组件开发完将要上传的私服的时候，通过 <code>npm login</code> 登录私服一直报错，出现了如下两种报错：</p><h2 id="登录报错npm-ERR-code-E401"><a href="#登录报错npm-ERR-code-E401" class="headerlink" title="登录报错npm ERR! code E401"></a>登录报错npm ERR! code E401</h2><p>npm登录时报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm login</span><br><span class="line">Username: 你的nexus用户名</span><br><span class="line">Password: 你的nexus用户密码</span><br><span class="line">Email: (this IS public) 你的邮箱</span><br><span class="line">npm ERR! code E401</span><br><span class="line">npm ERR! Unable to authenticate, need: BASIC realm=<span class="string">"Sonatype Nexus Repository Manager"</span></span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\Administrator\AppData\Roaming\npm-cache\_logs\XXX-debug.log</span><br></pre></td></tr></table></figure><p>这时在我的mac上可以正常登录，说明是客户端的问题。</p><p>原因可能是本机使用过其他账号登录过，但是没有退出登录。果然在npm的配置文件 <code>.npmrc</code> 文件中找到了问题。</p><p>解决方案，检查 <code>~/.npmrc</code> 文件，删除 <code>xlab-npm-group</code> 和 <code>xlab-npm-private</code> 相关的token记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">registry=http://**********:20001/repository/xlab-npm-group/</span><br><span class="line">//**********:20001/repository/xlab-npm-group/:_authToken=XXXX     // 删除这行</span><br><span class="line">//**********:20001/repository/xlab-npm-group/:_authToken=XXXX        // 删除这行</span><br><span class="line">always-auth=true</span><br><span class="line">home=https://www.npmjs.org</span><br><span class="line">//**********:20001/repository/xlab-npm-private/:_authToken=XXXX  // 删除这行</span><br></pre></td></tr></table></figure><p>修改后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">registry=http://**********:20001/repository/xlab-npm-group/</span><br><span class="line">always-auth=true</span><br><span class="line">home=https://www.npmjs.org</span><br></pre></td></tr></table></figure><p>保存后重新登录成功。</p><h2 id="登录报错npm-ERR-code-E500"><a href="#登录报错npm-ERR-code-E500" class="headerlink" title="登录报错npm ERR! code E500"></a>登录报错npm ERR! code E500</h2><p>npm登录时报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm login --registry=http://**********:20001/repository/xlab-npm-private/</span><br><span class="line">Username: 你的nexus用户名</span><br><span class="line">Password: 你的nexus用户密码</span><br><span class="line">Email: (this IS public) 你的邮箱</span><br><span class="line">npm ERR! code E500</span><br><span class="line">npm ERR! 500 Server Error -PUT =http://**********:20001/repository/xlab-npm-private/-/user/org.couchdb.user:XXX</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!  /Users/XXX/.npm/_logs/XXX-debug.log</span><br></pre></td></tr></table></figure><p>这时在另外的机器登录也是同样错误，说明是可能是服务器问题。</p><p>解决方案，通知管理员检查服务器是否正常。管理员检查后发现服务器OOM了：</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/npm/npm-error.png" alt="npm-error"></p><p>重启服务器容器后，重新登录成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在工作中，我们常常会将一些通用性代码，比如一些工具类、公用业务逻辑代码以及团队定制化的UI库等，发布到私有npm仓库。需要的项目直接安装使用
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="异常" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>flutter初探</title>
    <link href="http://yoursite.com/2019/12/19/flutter%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/12/19/flutter初探/</id>
    <published>2019-12-19T01:59:31.000Z</published>
    <updated>2019-12-19T02:11:07.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>忙完公司的工作之后，终于能腾出点时间来学习了，除了将基础和源码的学习补回来，还利用闲余的时间玩了一下flutter。刚开始我觉得Flutter的布局嵌套语法很恶心，内心是及其排斥的，但是在学了之后，我只想说：“真香！”</p><h2 id="移动开发的现状"><a href="#移动开发的现状" class="headerlink" title="移动开发的现状"></a>移动开发的现状</h2><p>随着移动互联网的高速发展，移动App的开发模式也在快速更迭中发展。<br>最初，为了能够在不同系统环境上运行，通常要求开发团队进行多平台并行开发。通常，开发Android和iOS App一共需要两个开发团队，维护两套源代码，分别进行测试。</p><p>后来，开发者们逐渐意识到，这样的开发效率并不高，成本却不低。因此诞生了一个接一个的跨平台解决方案。比如react-native、weex、cordova、ionic等等。但无一例外地，它们都无法摆脱低性能的JavaScript或者原生代码依赖，或多或少地存在不足。<br>所以急需一个真正能够打通多平台且高性能的框架来“救场”，Flutter则应运而生。</p><h2 id="认识-Flutter"><a href="#认识-Flutter" class="headerlink" title="认识 Flutter"></a>认识 Flutter</h2><p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。作为一种全新的响应式，跨平台，高性能的移动开发框架。从开源以来，已经得到越来越多开发者的喜爱。其中闲鱼、腾讯、美团、字节跳动等大厂都有自己成熟的团队并有深度实践。赶快学起来！</p><h3 id="Flutter-特性"><a href="#Flutter-特性" class="headerlink" title="Flutter 特性"></a>Flutter 特性</h3><p>那么，Flutter 究竟有哪些特性吸引着这么多开发者的喜爱呢呢？</p><ol><li>热重载（Hot Reload）：有热重载真的太舒服了，可以帮助开发者更高效地进行开发和测试，更利于修复Bug，就这一点比原生安卓制作简直不知道高到哪里去了。</li><li>统一的应用开发体验：Flutter拥有丰富的库，帮助开发者快速实现项目需求。同时，大部分的工具和库同时支持Android和iOS；</li><li>界面生动：Flutter支持跨平台开发，同样支持Material Design（原生Android设计语言）和Cupertino（原生iOS设计语言）风格的控件。开发者可根据设计需要实现不同风格的UI界面；</li><li>原生性能：无论在Android还是iOS环境中，Flutter可以提供与原生应用一样的性能，甚至支持120 HZ的高刷新率；</li><li>响应式框架：Flutter支持响应式框架，在某些场景下，开发者无需付出任何代价，即可完成不同屏幕的适配，使UI的构建更加轻松；</li><li>混合开发：Flutter可以与平台原生代码相结合，支持较新的Kotlin和Swift开发语言。借助该特性，可以轻松访问Android或iOS上的原生系统功能和系统API。</li></ol><h3 id="Flutter-核心思想"><a href="#Flutter-核心思想" class="headerlink" title="Flutter 核心思想"></a>Flutter 核心思想</h3><p><strong>一切都是控件（Widget）(Everything’s a Widget)</strong></p><p>在Flutter的世界里，包括views,view controllers,layouts等在内的概念都建立在Widget之上。widget是flutter功能的抽象描述。</p><p>也就是说，在Flutter中，一个应用就是有许许多多的Widget组合而成的。</p><h3 id="Flutter-分层架构"><a href="#Flutter-分层架构" class="headerlink" title="Flutter 分层架构"></a>Flutter 分层架构</h3><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_1.png" alt="flutter_1"></p><p>从flutter的架构图中不难看出widget是整个视图描述的基础。</p><h4 id="Flutter-Framework"><a href="#Flutter-Framework" class="headerlink" title="Flutter Framework"></a>Flutter Framework</h4><p>这是一个纯 Dart实现的 SDK，它实现了一套基础库，自底向上，我们来简单介绍一下：</p><ul><li><p>底下两层（Foundation和Animation、Painting、Gestures）在Google的一些视频中被合并为一个dart UI层，对应的是Flutter中的dart:ui包，它是Flutter引擎暴露的底层UI库，提供动画、手势及绘制能力。</p></li><li><p>Rendering层，这一层是一个抽象的布局层，它依赖于dart UI层，Rendering层会构建一个UI树，当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终将UI树绘制到屏幕上，这个过程类似于React中的虚拟DOM。Rendering层可以说是Flutter UI框架最核心的部分，它除了确定每个UI元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。</p></li><li><p>Widgets层是Flutter提供的的一套基础组件库，在基础组件库之上，Flutter还提供了 Material 和Cupertino两种视觉风格的组件库。而我们Flutter开发的大多数场景，只是和这两层打交道。</p></li></ul><h4 id="Flutter-Engine"><a href="#Flutter-Engine" class="headerlink" title="Flutter Engine"></a>Flutter Engine</h4><p>这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。</p><p>聊完架构接下来我们聊一聊flutter的生命周期。</p><h3 id="Flutter-生命周期"><a href="#Flutter-生命周期" class="headerlink" title="Flutter 生命周期"></a>Flutter 生命周期</h3><p>Flutter的生命周期主要包括两大部分：state和App。</p><h4 id="state-生命周期"><a href="#state-生命周期" class="headerlink" title="state 生命周期"></a>state 生命周期</h4><p>widget是immutable的，发生变化的时候需要重建，所以谈不上状态。StatefulWidget 中的状态保持其实是通过State类来实现的。State拥有一套自己的生命周期：</p><table><thead><tr><th>名称</th><th style="text-align:left">状态</th></tr></thead><tbody><tr><td>initState</td><td style="text-align:left">插入渲染树时调用，只调用一次</td></tr><tr><td>didChangeDependencies</td><td style="text-align:left">state依赖的对象发生变化时调用</td></tr><tr><td>didUpdateWidget</td><td style="text-align:left">组件状态改变时候调用，可能会调用多次</td></tr><tr><td>build</td><td style="text-align:left">构建Widget时调用</td></tr><tr><td>deactivate</td><td style="text-align:left">当移除渲染树的时候调用</td></tr><tr><td>dispose</td><td style="text-align:left">组件即将销毁时调用</td></tr></tbody></table><p>生命周期状态图如下：</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_2.png" alt="flutter_2"></p><p>注意：</p><blockquote><ul><li><p>didChangeDependencies有两种情况会被调用。</p><ul><li>创建时候在initState 之后被调用</li><li>在依赖的InheritedWidget发生变化的时候会被调用</li></ul></li><li><p>正常的退出流程中会执行deactivate然后执行dispose。但是也会出现deactivate以后不执行dispose，直接加入树中的另一个节点的情况。</p></li><li><p>这里的状态改变包括两种可能：1.通过setState内容改变 2.父节点的state状态改变，导致孩子节点的同步变化。</p></li></ul></blockquote><h4 id="App生命周期"><a href="#App生命周期" class="headerlink" title="App生命周期"></a>App生命周期</h4><p>如果想要知道App的生命周期,那么需要通过WidgetsBindingObserver的didChangeAppLifecycleState 来获取。通过该接口可以获取是生命周期在AppLifecycleState类中。常用状态包含如下几个：</p><table><thead><tr><th>名称</th><th style="text-align:left">状态</th></tr></thead><tbody><tr><td>resumed</td><td style="text-align:left">可见并能相应用户的输入</td></tr><tr><td>inactive</td><td style="text-align:left">处在并不活动状态，无法处理用户相应</td></tr><tr><td>paused</td><td style="text-align:left">不可见并不能相应用户的输入，但是在后台继续活动中</td></tr></tbody></table><p>一个实际场景中的例子：<br>在不考虑suspending的情况下：从后台切入前台生命周期变化如下:</p><blockquote><p>AppLifecycleState.inactive -&gt; AppLifecycleState.resumed;</p></blockquote><p>从前台压后台生命周期变化如下：</p><blockquote><p>AppLifecycleState.inactive -&gt; AppLifecycleState.paused;</p></blockquote><h2 id="Flutter-环境搭建"><a href="#Flutter-环境搭建" class="headerlink" title="Flutter 环境搭建"></a>Flutter 环境搭建</h2><p>工欲善其事必先利其器，环境搭建可以参考 <a href="https://book.flutterchina.club/chapter1/install_flutter.html" target="_blank" rel="noopener">Flutter实战</a> 一步一步来搭建。</p><h2 id="Flutter-实践"><a href="#Flutter-实践" class="headerlink" title="Flutter 实践"></a>Flutter 实践</h2><p>经过一个多礼拜的折腾，自己也尝试写了几个小demo：</p><table><thead><tr><th style="text-align:center"><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_3.png" alt="示范图片1"></th><th style="text-align:center"><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_4.png" alt="示范图片1"></th><th style="text-align:center"><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_5.png" alt="示范图片3"></th><th style="text-align:center"><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/flutter/flutter_6.png" alt="示范图片4"></th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><h2 id="优秀学习资料"><a href="#优秀学习资料" class="headerlink" title="优秀学习资料"></a>优秀学习资料</h2><ul><li><a href="https://flutterchina.club/" target="_blank" rel="noopener">Flutter中文网</a></li><li><a href="https://flutterworld.site/cn/" target="_blank" rel="noopener">Flutter World</a></li><li><a href="https://jspang.com/detailed?id=41" target="_blank" rel="noopener">Flutter免费视频-技术胖</a></li><li><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">《Flutter 实战》</a></li><li><a href="https://juejin.im/user/5ac2db47f265da2393774122/posts" target="_blank" rel="noopener">闲鱼技术团队</a></li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li><a href="https://juejin.im/post/5b9606055188255c7c6541c3" target="_blank" rel="noopener">Flutter和RN谁才是更好的跨端开发方案</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">《Flutter 实战》</a></li><li><a href="https://juejin.im/user/5ac2db47f265da2393774122/posts" target="_blank" rel="noopener">闲鱼技术团队</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;忙完公司的工作之后，终于能腾出点时间来学习了，除了将基础和源码的学习补回来，还利用闲余的时间玩了一下flutter。刚开始我觉得Flutte
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="flutter" scheme="http://yoursite.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flex: 1 详解</title>
    <link href="http://yoursite.com/2019/12/11/flex-1%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/12/11/flex-1详解/</id>
    <published>2019-12-11T09:17:34.000Z</published>
    <updated>2019-12-11T09:26:47.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间被头条hr从库里捞起来了(去年面到三面打入冷宫)，于是就接受了面试邀请，心想进不了也可以查缺补漏自己的不足。</p><p>其中就问了一道关于flex的问题：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">面试官：<span class="code">`flex: 1`</span> 是哪些属性的缩写？</span><br><span class="line"> </span><br><span class="line">我：对应三个属性(flex-grow|flex-shrink|flex-basis)。</span><br><span class="line"> </span><br><span class="line">面试官：<span class="code">`1`</span> 对应哪个属性，另外两个属性的默认值是多少？</span><br><span class="line"> </span><br><span class="line">我：当 flex 取值为一个非负数字时，则该数字为 flex-grow 值，flex-shrink 默认为 1，flex-basis 默认 0%。心想幸好当时学的时候看到过。</span><br><span class="line"> </span><br><span class="line">面试官：这三个属性分别表示的什么意思，剩余空间和溢出空间的概念有了解过吗？</span><br><span class="line"> </span><br><span class="line">我：。。。不知道</span><br><span class="line"> </span><br><span class="line">面试官：没关系，我们下一个问题。</span><br><span class="line"> </span><br><span class="line">总结：果然很头条(一个问题问到你不知道为止)。</span><br></pre></td></tr></table></figure></p><p>接下来我就来对flex对应的三个属性做个详解。</p><p>首先明确一点是，flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。</p><h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p>传统的布局是子容器在父容器中从左到右进行布局，应用 flex 进行布局，那么父容器一定设置 <code>display: flex</code>，子容器要“占有”并且“瓜分”父容器的空间，如何占有、瓜分的策略就是弹性布局的策略。这里就要解释到“剩余空间”的概念：</p><blockquote><p>子容器在父容器的“主轴”上还有多少空间可以“瓜分”，这个可以被“瓜分”的空间就叫做剩余空间。</p></blockquote><p><code>flex-grow</code> 属性定义弹性盒子项（flex-item）的放大比例(定义子容器的瓜分剩余空间的比例)，默认为0，即如果存在剩余空间，也不放大(不会去瓜分)。</p><h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p>如果子容器宽度超过父容器宽度，即使是设置了 flex-grow，但是由于没有剩余空间，就分配不到剩余空间了。这时候有两个办法：换行和压缩。由于 flex 默认不换行，那么压缩的话，怎么压缩呢，压缩多少？此时就需要用到 <code>flex-shrink</code> 属性了。</p><p><code>flex-shrink</code> 属性定义了弹性盒子项（flex-item）的缩小比例，默认为1，即如果空间不足，该子容器将缩小。</p><p>如果所有子项的 <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小。如果一个子项的 <code>flex-shrink</code> 属性为0，其他子项都为1，则空间不足时，前者不缩小。</p><p>此时，剩余空间的概念就转化成了“溢出空间”。</p><p>注意：</p><ul><li>负值对该属性无效。</li><li>如果子容器没有超出父容器，设置 flex-shrink 无效</li></ul><h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p><code>flex-basis</code> 属性定义了在分配多余空间之前，子项占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><p>它可以设为跟 width 或 height 属性一样的值（比如350px），则子项将占据固定空间。既然是跟宽度相关，那么 max-width，min-width，width 和 flex-basis 的大小优先级是怎么样的。</p><blockquote><p>max-width/min-width &gt; flex-basis &gt; width</p></blockquote><p>理解完了这三个属性接下来就看一些我们平时常写的一些简写表示的意义。</p><h2 id="flex-简写"><a href="#flex-简写" class="headerlink" title="flex 简写"></a>flex 简写</h2><p>flex 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 flex 的默认值是 0 1 auto。</p><h3 id="flex-取三个值"><a href="#flex-取三个值" class="headerlink" title="flex 取三个值"></a>flex 取三个值</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123; <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> <span class="number">200px</span>; &#125;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-取值为-none"><a href="#flex-取值为-none" class="headerlink" title="flex 取值为 none"></a>flex 取值为 none</h3><p>当 flex 取值为 none，则计算值为 0 0 auto。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123; <span class="attribute">flex</span>: none; &#125;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flex-取值为-auto"><a href="#flex-取值为-auto" class="headerlink" title="flex 取值为 auto"></a>flex 取值为 auto</h3><p>当 flex 取值为 auto，则计算值为 1 1 auto。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123; <span class="attribute">flex</span>: auto; &#125;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flex-取值为-一个非负数"><a href="#flex-取值为-一个非负数" class="headerlink" title="flex 取值为 一个非负数"></a>flex 取值为 一个非负数</h3><p>当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123; <span class="attribute">flex</span>: <span class="number">1</span>; &#125;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flex-取值为-长度或百分比"><a href="#flex-取值为-长度或百分比" class="headerlink" title="flex 取值为 长度或百分比"></a>flex 取值为 长度或百分比</h3><p>当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123; <span class="attribute">flex</span>: <span class="number">0%</span>; &#125;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123; <span class="attribute">flex</span>: <span class="number">20px</span>; &#125;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flex-取值为-两个非负数字"><a href="#flex-取值为-两个非负数字" class="headerlink" title="flex 取值为 两个非负数字"></a>flex 取值为 两个非负数字</h3><p>当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123; <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">2</span>; &#125;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flex-取值为-一个非负数字和一个长度或百分比"><a href="#flex-取值为-一个非负数字和一个长度或百分比" class="headerlink" title="flex 取值为 一个非负数字和一个长度或百分比"></a>flex 取值为 一个非负数字和一个长度或百分比</h3><p>当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123; <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">20px</span>; &#125;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后我们来用一个例子来计算子项的宽度。</p><h2 id="栗子🌰"><a href="#栗子🌰" class="headerlink" title="栗子🌰"></a>栗子🌰</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    width: 600px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.item1</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 140px;</span></span><br><span class="line"><span class="undefined">    flex: 2 1 0%;</span></span><br><span class="line"><span class="undefined">    background: blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    flex: 2 1 auto;</span></span><br><span class="line"><span class="undefined">    background: darkblue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.item3</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex: 1 1 200px;</span></span><br><span class="line"><span class="undefined">    background: lightblue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当 item-1 的 flex-basis 取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设<br>而 item-2 的 flex-basis 取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间</p></blockquote><p>主轴上父容器总尺寸：600px</p><p>剩余空间：<br>600px - 100px(item2的flex-basis值) - 200px(item3的flex-basis值) = 300px</p><p>伸缩放大系数之和(flex-grow值)：<br>2(item1) + 2(item2) + 1(item3) = 5</p><p>每一份比例所占宽度：300 / 5 = 60px;</p><p>剩余空间分配如下：</p><ul><li>item1 和 item2 各分配 2/5，各得 120px</li><li>item3 分配 1/5，得 60px</li></ul><p>各子项最终宽度为：</p><ul><li>item1 = 0%(0px) + 120px = 120px</li><li>item2 = auto(100px) + 120px = 220px</li><li>item3 = 200px + 60px = 260px</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间被头条hr从库里捞起来了(去年面到三面打入冷宫)，于是就接受了面试邀请，心想进不了也可以查缺补漏自己的不足。&lt;/p&gt;
&lt;p&gt;其中就问
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>React数据大屏的应用实践</title>
    <link href="http://yoursite.com/2019/09/24/React%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B1%8F%E7%9A%84%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/09/24/React数据大屏的应用实践/</id>
    <published>2019-09-23T17:29:17.000Z</published>
    <updated>2019-11-06T06:08:07.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据大屏与数据可视化"><a href="#数据大屏与数据可视化" class="headerlink" title="数据大屏与数据可视化"></a>数据大屏与数据可视化</h2><p>现如今大数据已无所不在，并且正被越来越广泛的被应用到历史、政治、科学、经济、商业甚至渗透到我们生活的方方面面中，获取的渠道也越来越便利。</p><p>今天我们就来聊一聊“大屏应用”，说到大屏就一定要聊到数据可视化，现如今，数据可视化由于数据分析的火热也变得火热起来，不过数据可视化并不是一个新技术，可视化数据就是用可视化的方式展现的数据。而数据大屏作为大数据展示媒介的一种，广泛运用于各种展示厅、会展、发布会及各种狂欢节中，其中不乏一些通用的处理方案：阿里的DataV、百度的Suger、腾讯RayData等等。</p><p>随着物联网、5G等各种跟连接有关的技术的出现与发展，每个人手中掌握的数据量都呈指数级增长，光看这些数是看不过来也看不懂的，“数据可视化”就是一种简化，让艰难的数据理解过程，变成——看颜色，辨长短，分高低。从而大大缩短理解数据所需的时间。</p><p>因公司的自研产品涉及到BI模块，因此数据大屏展示的需求孕育而生（数据大屏需求已经完成）。</p><p>下面是本人针对这个数据大屏需求前期做的一些探索实践，数据也是mock的。</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/bi/img2.gif" alt="bi"></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>React 全家桶（React-Router、React-Redux、React Hooks）</li><li>Webpack 编译打包</li><li>Echarts 图表组件</li><li>Socket.IO 即时通讯、通知与消息推送</li><li>Grid 网格布局</li></ul><h2 id="系统搭建"><a href="#系统搭建" class="headerlink" title="系统搭建"></a>系统搭建</h2><h3 id="图表选择"><a href="#图表选择" class="headerlink" title="图表选择"></a>图表选择</h3><p>六种基本图表涵盖了大部分图表使用场景，也是做数据可视化最常用的图表类型：</p><ul><li><strong>柱状图</strong> 用来反映分类项目之间的比较；</li><li><strong>饼图</strong> 用来反映构成，即部分占总体的比例；</li><li><strong>折线图</strong> 用来反映随时间变化的趋势；</li><li><strong>条形图</strong> 用来反映分类项目之间的比较；</li><li><strong>散点图</strong> 用来反映相关性或分布关系；</li><li><strong>地图</strong> 用来反映区域之间的分类比较。</li></ul><p>基本图表类型都有通用的样式，不过多的展开讲解。我们更多的考虑如何选择常用图表来呈现数据，达到数据可视化的目标。基本方法：<strong>明确目标</strong> —&gt; <strong>选择图形</strong> —&gt; <strong>梳理维度</strong> —&gt; <strong>突出关键信息</strong>。</p><h3 id="数据请求推送"><a href="#数据请求推送" class="headerlink" title="数据请求推送"></a>数据请求推送</h3><p>当信息一旦准备就绪，我们就需要从服务器获取它们。这里我们需要一种基于推送的方法，例如 WebSocket 协议、轮询、服务器推送事件（SSE）以及最近的 HTTP2 服务器推送。这里我们简单比较一下 WebSocket 与轮询。</p><p>轮询需要客户端定时向服务器发送ajax请求，服务器接到请求后返回响应信息。这就需要大量的占据服务器资源。同时在HTTP1.x协议中也存在一些比如线头阻塞、头部冗余等问题。所以这种方案直接pass了。</p><p>再来说说 WebSocket，建立在 TCP 协议之上，数据格式比较轻量，性能开销小，通信高效，可以发送文本，也可以发送二进制数据。同时它还没有同源限制，客户端可以与任意服务器通信。还有一点 WebSocket 通常不使用 XMLHttpRequest，因此，当我们每次需要从服务器获取更多的信息时，无需发送头部数据。反过来说，这又减少了数据发送到服务器时需要付出的高昂的数据负载代价。对于数据大屏需要实时获取数据，这无疑是最高效的。</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>数据大屏的核心就是数据的拼接，具体到展示层可以归纳成数据块的拼接。这里我们采用通用的尺寸1920*108(16:9)。尺寸确立后，接下来要对展示层进行布局和页面的划分。这里的划分，主要根据我们之前定好的业务指标进行，核心业务指标安排在中间位置、占较大面积；其余的指标按优先级依次在核心指标周围展开。一般把有关联的指标让其相邻或靠近，把图表类型相近的指标放一起，这样能减少观者认知上的负担并提高信息传递的效率。</p><p>对于这种块状(网格)布局，我们就可以使用我们强大的 CSS 布局方案 – <strong>Grid</strong>。它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。</p><p>安利一个grid 布局可视化设计工具 – <a href="https://cssgrid-generator.netlify.com/" target="_blank" rel="noopener">CSS Grid Generator</a>。可以使用它生成对应的代码，帮助咱们快速布局。</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/bi/img2.png" alt="grid"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>聊完这些通用知识我们就可以上手开发了。</p><p>我这里使用了我自己开发的脚手架（hzzly-cli）来生成react项目环境。</p><blockquote><p>有兴趣了解脚手架开发的可以看我这篇文章<a href="http://hjingren.cn/2019/07/19/%E5%8A%A8%E6%89%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/" target="_blank" rel="noopener">动手开发一个自己的项目脚手架</a></p></blockquote><p>项目结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   ├── assets // 资源目录</span><br><span class="line">│   ├── components // 公共组件目录</span><br><span class="line">│   │   ├── Card // Card组件</span><br><span class="line">│   │   ├── Charts // 图表组件目录</span><br><span class="line">│   │   │   ├── Bar // 柱状图</span><br><span class="line">│   │   │   ├── ChinaMap // 中国地图</span><br><span class="line">│   │   │   ├── Funnel // 漏斗图</span><br><span class="line">│   │   │   ├── Line // 折线图</span><br><span class="line">│   │   │   ├── Pie // 饼图</span><br><span class="line">│   │   │   └── lib // 基础图表组件</span><br><span class="line">│   │   ├── ScrollNumber // 滚动数字组件</span><br><span class="line">│   │   └── SvgIcon // Icon组件</span><br><span class="line">│   ├── global.scss</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── pages // 分块结构目录</span><br><span class="line">│   ├── router // 路由</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   ├── actions</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── reducers</span><br><span class="line">│   │   ├── sagas</span><br><span class="line">│   │   └── types.js</span><br><span class="line">│   └── utils</span><br><span class="line">│       ├── genChartData.js</span><br><span class="line">│       ├── genMapData.js</span><br><span class="line">│       ├── socket.js</span><br><span class="line">│       └── util.js</span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="Chart基础组件封装"><a href="#Chart基础组件封装" class="headerlink" title="Chart基础组件封装"></a>Chart基础组件封装</h3><p>这里对<code>echarts-for-react</code>进一步封装，其它图表组件可以直接继承使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Charts/lib/BaseChart.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> Echarts <span class="keyword">from</span> <span class="string">'echarts-for-react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseChart</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    option: PropTypes.object.isRequired,</span><br><span class="line">    data: PropTypes.object.isRequired,</span><br><span class="line">    getOption: PropTypes.func.isRequired,</span><br><span class="line">    style: PropTypes.object,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    style: &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; runAction &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.chartRef &amp;&amp; runAction) &#123;</span><br><span class="line">      <span class="keyword">const</span> chartIns = <span class="keyword">this</span>.chartRef.getEchartsInstance();</span><br><span class="line">      <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        runAction(chartIns);</span><br><span class="line">      &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; option, data, getOption, style &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> finalOption = getOption(option, data);</span><br><span class="line">    <span class="keyword">const</span> finalStyle = getStyle(style);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Echarts</span><br><span class="line">        ref=&#123;ref =&gt; &#123;</span><br><span class="line">          <span class="keyword">this</span>.chartRef = ref;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        style=&#123;finalStyle&#125;</span><br><span class="line">        option=&#123;finalOption&#125;</span><br><span class="line">        notMerge</span><br><span class="line">        lazyUpdate</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">style</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123; <span class="attr">position</span>: <span class="string">'relative'</span> &#125;,</span><br><span class="line">    style</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line.js</span></span><br><span class="line"><span class="keyword">import</span> BaseChart <span class="keyword">from</span> <span class="string">'../lib/BaseChart'</span>;</span><br><span class="line"><span class="keyword">import</span> option <span class="keyword">from</span> <span class="string">'./option'</span>;</span><br><span class="line"><span class="keyword">import</span> getOption <span class="keyword">from</span> <span class="string">'./getOption'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Line</span> <span class="keyword">extends</span> <span class="title">BaseChart</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    option,</span><br><span class="line">    getOption,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// option.js 基础配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getOption.js 计算配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seriesCreator</span>(<span class="params">series</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> series.map(<span class="function"><span class="params">e</span> =&gt;</span> (&#123;</span><br><span class="line">    type: <span class="string">'line'</span>,</span><br><span class="line">    symbol: <span class="string">'circle'</span>,</span><br><span class="line">    smooth: <span class="literal">true</span>,</span><br><span class="line">    lineStyle: &#123;</span><br><span class="line">      normal: &#123;</span><br><span class="line">        width: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...e,</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">option, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; tooltip, xAxis, yAxis, yCategory, series = [], ...rest &#125; = data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...option,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      ...option.xAxis,</span><br><span class="line">      ...xAxis,</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      ...option.tooltip,</span><br><span class="line">      ...tooltip,</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      ...option.yAxis,</span><br><span class="line">      ...yAxis,</span><br><span class="line">      data: yCategory || [],</span><br><span class="line">    &#125;,</span><br><span class="line">    series: seriesCreator(series),</span><br><span class="line">    ...rest,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Socket封装SDK"><a href="#Socket封装SDK" class="headerlink" title="Socket封装SDK"></a>Socket封装SDK</h3><p>这里对<code>socket.io-client</code>封装成SDK，方便使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = &#123;</span><br><span class="line">  wsConn: <span class="literal">null</span>,</span><br><span class="line">  config: &#123;</span><br><span class="line">    wsHost: <span class="string">'/'</span>, <span class="comment">// wesocket host</span></span><br><span class="line"></span><br><span class="line">    onConn() &#123;&#125;,</span><br><span class="line">    onDisconn() &#123;&#125;,</span><br><span class="line">    onError() &#123;&#125;,</span><br><span class="line">    onReceiveMsg() &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  init(opt) &#123;</span><br><span class="line">    socket.config = &#123; ...socket.config, ...opt &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getWs() &#123;</span><br><span class="line">    <span class="keyword">if</span> (socket.wsConn) &#123;</span><br><span class="line">      <span class="keyword">return</span> socket.wsConn;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      socket.initWs();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getWsStatus() &#123;</span><br><span class="line">    <span class="keyword">return</span> socket.wsConn ? socket.wsConn.connected : <span class="literal">false</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  initWs() &#123;</span><br><span class="line">    <span class="keyword">if</span> (socket.getWsStatus()) &#123;</span><br><span class="line">      <span class="keyword">return</span> socket.wsConn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> wsUrl = socket.config.wsHost;</span><br><span class="line"></span><br><span class="line">    socket.wsConn = io.connect(wsUrl);</span><br><span class="line">    socket.wsConn.on(<span class="string">'connect'</span>, () =&gt; &#123;</span><br><span class="line">      socket.config.onConn(socket.wsConn);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.wsConn.on(<span class="string">'message'</span>, (...param) =&gt; &#123;</span><br><span class="line">      socket.config.onReceiveMsg(...param);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.wsConn.on(<span class="string">'disconnect'</span>, () =&gt; &#123;</span><br><span class="line">      socket.config.onDisconn();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> socket.wsConn;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  reconnect() &#123;</span><br><span class="line">    <span class="keyword">if</span> (socket.wsConn) &#123;</span><br><span class="line">      <span class="keyword">if</span> (socket.wsConn.disconnected) &#123;</span><br><span class="line">        <span class="comment">// reconnect ws</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      socket.initWs();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  disconnect() &#123;</span><br><span class="line">    <span class="keyword">if</span> (socket.wsConn) &#123;</span><br><span class="line">      <span class="keyword">if</span> (socket.wsConn.connected) &#123;</span><br><span class="line">        socket.wsConn.disconnect();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  wsEmit(params) &#123;</span><br><span class="line">    <span class="keyword">if</span> (socket.wsConn) &#123;</span><br><span class="line">      socket.wsConn.emit(params.name, params.data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">  global.socket = socket;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; socket &#125;;</span><br></pre></td></tr></table></figure><h3 id="动态数字展示"><a href="#动态数字展示" class="headerlink" title="动态数字展示"></a>动态数字展示</h3><p>该数据通过socket推送实时更新。</p><p>数字过渡的动态效果为对应数位的新数字从下至上替换旧数字，如果该位数的数字没有发生变化，则没有过渡效果。</p><p><code>1、对数据进行完善并格式化</code></p><p>针对数字少于9位数进行前位补零并进行千分位格式化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_LEN = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toThousands</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = (val || <span class="number">0</span>).toString();</span><br><span class="line">  <span class="keyword">while</span> (num.length &lt; MAX_LEN) &#123;</span><br><span class="line">    num = <span class="string">`0<span class="subst">$&#123;num&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span> (num.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    result = <span class="string">`,<span class="subst">$&#123;num.slice(<span class="number">-3</span>)&#125;</span><span class="subst">$&#123;result&#125;</span>`</span>;</span><br><span class="line">    num = num.slice(<span class="number">0</span>, num.length - <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (num) &#123;</span><br><span class="line">    result = num + result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.toString().split(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2、过渡动画</code></p><p>利用样式控制过渡动画，在第一步中我们对数字进行了格式化，然后我们针对每一位数字进行比较，当数字不相等的时候添加<code>active</code>类，最后对<code>active</code>类添加动画。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环渲染每一位数字</span></span><br><span class="line">&lt;li className=&#123;<span class="string">`<span class="subst">$&#123;oldNumber[i] !== newNumber[i] ? <span class="string">'active'</span> : <span class="string">''</span>&#125;</span>`</span>&#125;&gt;</span><br><span class="line">  &lt;span className=<span class="string">"num"</span>&gt;&#123;oldNumber[i]&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;span className="num"&gt;&#123;newNumber[i]&#125;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/li&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  .num &#123;</span><br><span class="line">    <span class="selector-tag">animation</span>: <span class="selector-tag">move</span> 1<span class="selector-class">.5s</span>;</span><br><span class="line">    animation-fill-mode: forwards; // 让动画结束后保持最后一帧</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> move &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-100%);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="背景线性粒子"><a href="#背景线性粒子" class="headerlink" title="背景线性粒子"></a>背景线性粒子</h3><p>这里我使用了我自己封装的组件，可以对应框架来安装引用：</p><ul><li><a href="https://github.com/hzzly/vue-particle-line" target="_blank" rel="noopener">vue-particle-line</a></li><li><a href="https://github.com/hzzly/react-particle-line" target="_blank" rel="noopener">react-particle-line</a></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>1、项目框架目录结构采用笔者自己搭建的webpack环境：<a href="https://github.com/hzzly/webpack-template" target="_blank" rel="noopener">webpack-template</a></p><p>2、关于适配和兼容性暂时还未完善，如果后期有时间会慢慢去完善</p><p>3、此项目为笔者调研时的实践，因为时间有限，一些功能还不善，设计和布局都是自己的一些想象与参考</p><p>4、此项目作为开源学习使用，谢绝用于商业应用</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>代码已上传至我的<a href="https://github.com/hzzly/credit-bi-react" target="_blank" rel="noopener">GitHub</a>，欢迎 Star、Fork</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.woshipm.com/pd/1782868.html" target="_blank" rel="noopener">超全面设计指南：如何做大屏数据可视化设计？</a></li><li><a href="http://www.woshipm.com/data-analysis/2279512.html" target="_blank" rel="noopener">五个方面，聊聊大数据可视化的初体验</a></li><li><a href="https://juejin.im/post/5a20fe96f265da431120025b" target="_blank" rel="noopener">一个炫酷大屏展示页的打造过程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据大屏与数据可视化&quot;&gt;&lt;a href=&quot;#数据大屏与数据可视化&quot; class=&quot;headerlink&quot; title=&quot;数据大屏与数据可视化&quot;&gt;&lt;/a&gt;数据大屏与数据可视化&lt;/h2&gt;&lt;p&gt;现如今大数据已无所不在，并且正被越来越广泛的被应用到历史、政治、科学、经济、
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="大屏" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>AST的实践</title>
    <link href="http://yoursite.com/2019/09/19/AST%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/09/19/AST的实践/</id>
    <published>2019-09-19T02:04:36.000Z</published>
    <updated>2019-11-06T06:12:34.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是AST（抽象语法树）"><a href="#什么是AST（抽象语法树）" class="headerlink" title="什么是AST（抽象语法树）?"></a>什么是AST（抽象语法树）?</h2><blockquote><p>It is a hierarchical program representation that presents source code structure according to the grammar of a programming language, each AST node corresponds to an item of a source code.</p><p>AST是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p></blockquote><p>AST是一个非常基础但是同时非常重要的知识点，我们熟知的 TypeScript、babel、webpack、vue-cli 都是依赖 AST 进行开发的。</p><p>这里我们就以 babel 为例来实践一下 AST。</p><h2 id="Babel运行原理"><a href="#Babel运行原理" class="headerlink" title="Babel运行原理"></a>Babel运行原理</h2><p>Babel 作为当今最为常用的 JavaScript 编译器，在前端开发中扮演着极为重要的角色。大多数情况下，Babel 被用来转译 ECMAScript 2015+ 至可兼容浏览器的版本。</p><p>Babel 的三个主要处理步骤分别是：</p><ul><li>解析（parse）</li><li>转换（transform）</li><li>生成（generate）</li></ul><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/ast/ast1.png" alt="Babel处理步骤"></p><p>整个过程中，parsing和generation是固定不变的，最关键的是transforming步骤，通过babel插件来支持，这是其扩展性的关键。</p><p>这三个阶段分别由 @babel/parser、@babel/core、@babel/generator 执行。Babel 本质上只是一个代码的搬运工，如果不给 Babel 装上插件，它将会把输入的代码原封不动地输出。正是因为有插件的存在， Babel 才能将输入的代码进行转变，从而生成新的代码。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>输入JS源码，输出AST</p><p>parsing（解析），对应于编译器的词法分析，及语法分析阶段。输入的源码字符序列经过词法分析，生成具有词法意义的token序列（能够区分出关键字、数值、标点符号等），接着经过语法分析，生成具有语法意义的AST（能够区分出语句块、注释、变量声明、函数参数等）。</p><p>利用 @babel/parser 对源代码进行解析 得到 AST。</p><p>栗如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(info)</span><br></pre></td></tr></table></figure><p>经过parsing后，生成的AST如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"CallExpression"</span>,</span><br><span class="line">  <span class="attr">"callee"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"MemberExpression"</span>,</span><br><span class="line">    <span class="attr">"object"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">      <span class="attr">"loc"</span>: &#123;</span><br><span class="line">        <span class="attr">"identifierName"</span>: <span class="string">"console"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"console"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"property"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">      <span class="attr">"loc"</span>: &#123;</span><br><span class="line">        <span class="attr">"identifierName"</span>: <span class="string">"log"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"log"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"arguments"</span>: [</span><br><span class="line">    <span class="string">"Identifier"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">      <span class="attr">"loc"</span>: &#123;</span><br><span class="line">        <span class="attr">"identifierName"</span>: <span class="string">"log"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"info"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔥Tip: JS代码对应的AST结构可以通过<a href="https://astexplorer.net/" target="_blank" rel="noopener">AST Explorer</a>工具查看</p><p>仔细的小伙伴可能就会发现从我们的源代码到AST的过程其实就是一个分词的过程，将我们的 console.log(info) 分成 console、log、info。</p><p>有了这个 AST 树结构，我们就能进行语义层面转换了。</p><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>输入AST，输出修改过的AST</p><p>利用 @babel/traverse 对 AST 进行遍历，并解析出整个树的 path，通过挂载的 metadataVisitor 读取对应的元信息，这一步叫 set AST 过程。</p><blockquote><p>@babel/traverse 是一款用来自动遍历抽象语法树的工具，它会访问树中的所有节点，在进入每个节点时触发 enter 钩子函数，退出每个节点时触发 exit 钩子函数。开发者可在钩子函数中对 AST 进行修改。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">"@babel/traverse"</span>;</span><br><span class="line"></span><br><span class="line">traverse(ast, &#123;</span><br><span class="line">  enter(path) &#123;</span><br><span class="line">    <span class="comment">// 进入 path 后触发</span></span><br><span class="line">  &#125;,</span><br><span class="line">  exit(path) &#123;</span><br><span class="line">    <span class="comment">// 退出 path 前触发</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>transforming（转换），对应于编译器的机器无关代码优化阶段（稍微有点牵强，但二者工作内容都是修改AST），对 AST 做一些修改，比如针对上面的 log 增加一些信息方便我们调试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(info) =&gt; <span class="built_in">console</span>.log(<span class="string">'[info]'</span>, info)</span><br></pre></td></tr></table></figure><p>修改过后的 AST 结构：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"CallExpression"</span>,</span><br><span class="line">  <span class="attr">"callee"</span>: &#123;</span><br><span class="line">    // ....</span><br><span class="line">  &#125;,</span><br><span class="line">  "arguments": [</span><br><span class="line">    "StringLiteral": &#123;</span><br><span class="line">      "type": "StringLiteral",</span><br><span class="line">      "value": "'[info]'",</span><br><span class="line">    &#125;,</span><br><span class="line">    "Identifier": &#123;</span><br><span class="line">      "type": "Identifier",</span><br><span class="line">      "loc": &#123;</span><br><span class="line">        "identifierName": "log",</span><br><span class="line">      &#125;,</span><br><span class="line">      "name": "info",</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语义层面的转换具体而言就是对AST进行增、删、改操作，修改后的AST可能具有不同的语义，映射回代码字符串也不同</p><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>输入AST，输出JS源码</p><p>generation（生成），对应于编译器的代码生成阶段，把AST映射回代码字符串。</p><p>利用 @babel/generator 将 AST 树输出为转码后的代码字符串。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>说了这么多接下来我们就用代码实践一下上面的例子</p><h3 id="相关npm包"><a href="#相关npm包" class="headerlink" title="相关npm包"></a>相关npm包</h3><ul><li>@babel/parser 解析输入源码，创建AST</li><li>@babel/traverse 遍历操作AST</li><li>@babel/generator 把AST转回JS代码</li><li>@babel/types AST操作工具库</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>);</span><br><span class="line"><span class="keyword">const</span> generate = <span class="built_in">require</span>(<span class="string">'@babel/generator'</span>);</span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">'@babel/types'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. parse</span></span><br><span class="line">  <span class="keyword">const</span> ast = parser.parse(code);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. traverse</span></span><br><span class="line">  <span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    CallExpression(path) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; callee, <span class="built_in">arguments</span> &#125; = path.node;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        t.isMemberExpression(callee)</span><br><span class="line">        &amp;&amp; callee.object.name === <span class="string">'console'</span></span><br><span class="line">        &amp;&amp; callee.property.name === <span class="string">'log'</span></span><br><span class="line">        &amp;&amp; <span class="built_in">arguments</span>.length &gt; <span class="number">0</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">const</span> variableName = <span class="built_in">arguments</span>[<span class="number">0</span>].name;</span><br><span class="line">        path.node.arguments.unshift(</span><br><span class="line">          t.StringLiteral(<span class="string">`[<span class="subst">$&#123;variableName&#125;</span>]`</span>)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  traverse.default(ast, visitor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. generate</span></span><br><span class="line">  <span class="keyword">return</span> generate.default(ast, &#123;&#125;, code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`console.log(info)`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = compile(code);</span><br><span class="line"><span class="built_in">console</span>.log(result.code);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看到这，我们的 AST 实践也告一段落了。当然，文章所讲的只是一个简单的例子，但基本的原理思路八九不离十，更多的类型还得自己去探究。总之，掌握好 AST，你真的可以做很多事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是AST（抽象语法树）&quot;&gt;&lt;a href=&quot;#什么是AST（抽象语法树）&quot; class=&quot;headerlink&quot; title=&quot;什么是AST（抽象语法树）?&quot;&gt;&lt;/a&gt;什么是AST（抽象语法树）?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;It is a hie
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="AST" scheme="http://yoursite.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>JWT--JSON WEB TOKEN</title>
    <link href="http://yoursite.com/2019/09/04/JWT--JSON%20WEB%20TOKEN/"/>
    <id>http://yoursite.com/2019/09/04/JWT--JSON WEB TOKEN/</id>
    <published>2019-09-04T07:43:52.000Z</published>
    <updated>2019-09-04T07:44:59.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h2><p>JSON Web Token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">RFC 7519</a>)，该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><p>JWT是目前最流行的跨域认证解决方案之一。</p><h2 id="为什么使用JWT"><a href="#为什么使用JWT" class="headerlink" title="为什么使用JWT"></a>为什么使用JWT</h2><p>在看为什么使用之前，我们必须要先了解之前我们是如何进行验证请求的。</p><h3 id="Session认证"><a href="#Session认证" class="headerlink" title="Session认证"></a>Session认证</h3><p>在 Session 认证方式中，用户登录后发给服务器，服务器在接收并验证发送过来的账号密码请求之后，就会把这个用户信息放入 Session 中，然后把 Session 存在服务器上，这样服务器就知道了这个用户的存在，当下一次用户访问的时候，就能认证了。</p><p>但因为我们知道<strong>http协议是一种无状态的协议</strong>，也就是说当下一次用户发送请求的时候，请求中没有任何信息能表明用户身份！也就是说不知道请求是谁发出来了，这样也就不能认证了。</p><p>所以就需要利用 Cookie 来管理 Session，即把 SessionID 放入 HTTP 响应中发给客户端，并保存在客户端，当客户端发送下一次请求的时候，就把这个 SessionID 一起发送回来，这样就能这次的请求是谁发出来的了。</p><blockquote><p>扩展：Cookie 是由客户端（通常是浏览器）保存的小型文本信息，其内容是一系列的键值对，是由 HTTP 服务器设置并保存在浏览器上的信息。</p></blockquote><h3 id="Session认证的问题"><a href="#Session认证的问题" class="headerlink" title="Session认证的问题"></a>Session认证的问题</h3><ol><li><p><code>内存开销大</code>: 我们知道 Session 是存在服务器上的，实际上为了加快认证的速度，我们一般都会放在内存中，这样当用户基数大的时候，内存的开销就会很大。当然也可以将 Session 存入到 Session 表或者是缓存（redis等）中，但是依旧会有这样的问题。</p></li><li><p><code>安全性（CSRF）</code>: 因为是基于 Cookie 进行用户识别，如果 Cookie 被截获，用户就会很容易收到跨站请求伪造的攻击。</p></li><li><p><code>分布式负载均衡</code>: 因为 Session 信息是被单个服务器所保存的，所以在分布式系统中就不能适用了。比如 Session 一开始是保存在 A 服务器上，但是下一次请求的时候，这个请求被服务器负载均衡转发到了 B 服务器，而 B 服务器则没有这个 Session 信息，所以就不能用过认证了。</p></li></ol><h3 id="JWT的优点"><a href="#JWT的优点" class="headerlink" title="JWT的优点"></a>JWT的优点</h3><p>因为 JWT 是由服务端生成的，通过请求传给客户端（客户端可以以任意方式存放）。所以服务器不需要存储任何 JWT 信息。这样就能避免了上述 Session 的几个问题了。当然 JWT 还有其自身的一些优点。</p><ol><li><p><code>轻量级</code>：JWT是非常轻量级的，传输的方式多样化，可以通过URL/POST参数/HTTP头部等方式传输。</p></li><li><p><code>无状态/跨域认证</code>：token包含所有用于标识用户的信息，这消除了对会话状态的需要。如果我们使用负载均衡，我们依然可以将token传递给任何服务器，而不是存储在我们登录的同一台服务器上。</p></li><li><p><code>安全性</code>：无需担心跨站请求伪造（CSRF）攻击。</p></li></ol><h2 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a>JWT 组成</h2><p>由三个部分组成：header.payload.signature</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p><code>header</code>：包含了两个部分 typ 和 alg，分别是声明类型和JWT的加密算法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过 base64URL 加密之后得到 JWT 的第一部分信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p><code>payload</code>：负载，存放有效信息的地方。这些有效信息包含三个部分：标准中注册的声明、公共的声明 和 私有的声明。</p><ul><li>iss：JWT 的签发者</li><li>sub：JWT 所面向的用户</li><li>aud：接收 JWT 的一方</li><li>exp：JWT 的过期时间这个过期时间必须大于签发时间</li><li>nbf：JWT 起作用的开始时间，即定义在什么时间之前，该JWT都是不可用的</li><li>iat：JWT 的签发时间</li><li>jti：JWT 的唯一身份标识，主要用来作为一次性 token，从而回避重放攻击。</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"sub"</span>: <span class="string">"1234567890"</span>, </span><br><span class="line">  <span class="string">"nickname"</span>: <span class="string">"hzzly"</span>, </span><br><span class="line">  <span class="string">"username"</span>: <span class="string">"hzzly"</span>, </span><br><span class="line">  <span class="string">"scopes"</span>: [ <span class="string">"admin"</span>, <span class="string">"user"</span> ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经过 base64URL 加密之后得到 JWT 的第二部分信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmlja25hbWUiOiJoenpseSIsInVzZXJuYW1lIjoiaHp6bHkiLCJzY29wZXMiOlsiYWRtaW4iLCJ1c2VyIl19</span><br></pre></td></tr></table></figure></p><h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p><code>signature</code>：是对前两部分的签名，防止数据篡改。由三个部分组成：header、payload 和 secret。其中 header 和 payload 都是加密后的字符串，secret就是一个字符串（密钥）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> signature = HMACSHA256(base64UrlEncode(header) + <span class="string">"."</span> + base64UrlEncode(payload), secret);</span><br></pre></td></tr></table></figure><p>算出签名以后，把 header、payload、signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给客户端。</p><p>最终的jwt：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmlja25hbWUiOiJoenpseSIsInVzZXJuYW1lIjoiaHp6bHkiLCJzY29wZXMiOlsiYWRtaW4iLCJ1c2VyIl19.sXaHGg9SWyRpl-rhiSBFuD01G4yE3Gmi5m-JD7u6YyI</span><br></pre></td></tr></table></figure></p><h3 id="base64URL"><a href="#base64URL" class="headerlink" title="base64URL"></a>base64URL</h3><p>面提到，header 和 payload 串型化的算法是 base64URL。这个算法跟 base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p><h2 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h2><p>客户端收到服务器返回的 JWT，可以储存在 sessionStorage 或 localStorage 里面。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。需要把它放在 HTTP 请求的头信息 Authorization 字段里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是JWT&quot;&gt;&lt;a href=&quot;#什么是JWT&quot; class=&quot;headerlink&quot; title=&quot;什么是JWT&quot;&gt;&lt;/a&gt;什么是JWT&lt;/h2&gt;&lt;p&gt;JSON Web Token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="jwt" scheme="http://yoursite.com/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>一本正经的来了解一下HTTP2</title>
    <link href="http://yoursite.com/2019/09/01/%E4%B8%80%E6%9C%AC%E6%AD%A3%E7%BB%8F%E7%9A%84%E6%9D%A5%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BHTTP2/"/>
    <id>http://yoursite.com/2019/09/01/一本正经的来了解一下HTTP2/</id>
    <published>2019-09-01T15:44:30.000Z</published>
    <updated>2019-09-04T07:40:13.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-2介绍"><a href="#HTTP-2介绍" class="headerlink" title="HTTP/2介绍"></a>HTTP/2介绍</h2><p>维基百科：HTTP/2（超文本传输协议第2版，最初命名为HTTP 2.0），简称为h2（基于TLS/1.2或以上版本的加密连接）或h2c（非加密连接），是HTTP协议的的第二个主要版本，使用于万维网。</p><p>HTTP/2是HTTP协议自1999年HTTP 1.1发布后的首个更新，主要基于SPDY协议。它由互联网工程任务组（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组进行开发。该组织于2014年12月将HTTP/2标准提议递交至IESG进行讨论，于2015年2月17日被批准。HTTP/2标准于2015年5月以RFC 7540正式发表。</p><h2 id="HTTP-1-x存在的问题"><a href="#HTTP-1-x存在的问题" class="headerlink" title="HTTP/1.x存在的问题"></a>HTTP/1.x存在的问题</h2><p>在看为什么要使用HTTP/2之前，我们先来了解之前的HTTP/1.x存在的问题。</p><ol><li><code>线头阻塞</code>：TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。</li><li><code>多个TCP连接</code>：虽然HTTP/1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。</li><li><code>头部冗余，采用文本格式</code>：HTTP/1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。</li><li><code>客户端需要主动请求</code></li></ol><h2 id="HTTP-2的具体变化"><a href="#HTTP-2的具体变化" class="headerlink" title="HTTP/2的具体变化"></a>HTTP/2的具体变化</h2><h3 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h3><p>先来理解几个概念：</p><p><code>帧（Frame）</code>：HTTP/2数据通信的最小单位消息：指 HTTP/2 中逻辑上的 HTTP 消息。例如请求和响应等，消息由一个或多个帧组成。</p><p><code>流（Stream）</code>：存在于连接中的一个虚拟通道。流可以承载双向消息，每个流都有一个唯一的整数ID。</p><p><code>消息（Message）</code>：一个完整的HTTP请求或响应，由一个或多个帧组成。特定消息的帧在同一个流上发送，这意味着一个HTTP请求或响应只能在一个流上发送。</p><p>HTTP/2 性能提升的核心就在于二进制分帧层。HTTP2是二进制协议，他采用二进制格式传输数据而不是1.x的文本格式，二进制协议解析起来更高效。 HTTP / 1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码。</p><p>HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>上面提到HTTP/1.x的线头阻塞和多个TCP连接的问题，HTTP2的多路复用完美解决。HTTP/2让所有的通信都在一个TCP连接上完成，真正实现了请求的并发。</p><p>在一个 TCP 连接上，HTTP/2可以向服务器不断发送帧，每帧的 stream identifier 的标明这一帧属于哪个流，然后在接收时，根据 stream identifier 拼接每个流的所有帧组成一整块数据。把 HTTP/1.x 每个请求都当作一个流，那么多个请求变成多个流，请求响应数据分成多个帧，不同流中的帧交错地发送给对方，这就是 HTTP/2 中的多路复用。</p><p>流的概念实现了单连接上多请求 - 响应并行，解决了线头阻塞的问题，减少了 TCP 连接数量和 TCP 连接慢启动造成的问题</p><p>所以 HTTP/2 对于同一域名只需要创建一个连接，而不是像 HTTP/1.x 那样创建 6~8 个连接。</p><h3 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h3><p>在HTTP/1.x版本中，首部用文本格式传输，通常会给每个传输增加500-800字节的开销。当一个网站请求非常多时，而每个请求带的一些首部字段都是相同的，例如cookie、user-agent等，浪费了很多带宽资源。HTTP/2为此对消息头采用HPACK（专为HTTP/2头部设计的压缩格式）进行压缩传输，能够节省消息头占用的网络的流量。头部压缩需要在浏览器和服务器端之间：</p><ul><li>维护一份相同的静态字典，包含常见的头部名称，以及常见的头部名称和值的组合</li><li>维护一份相同的动态字典，可以动态的添加内容</li><li>通过静态Huffman编码对传输的首部字段进行编码</li></ul><p>HTTP/2的静态字典可以查看<a href="https://httpwg.org/specs/rfc7541.html#static.table.definition" target="_blank" rel="noopener">这里</a></p><p>所以我们在传输首部字段的时候，例如要传输method:GET,那我们只需要传输静态字典里面method:GET对应的索引值就可以了，一个字节搞定。像user-agent、cookie这种静态字典里面只有首部名称而没有值的首部，第一次传输需要user-agent在静态字典中的索引以及他的值，值会采用静态Huffman编码来减小体积。</p><p>第一次传输过user-agent 之后呢，浏览器和服务器端就会把它添加到自己的动态字典中。后续传输就可以传输索引了，一个字节搞定。</p><h3 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h3><p>浏览器发送一个请求，服务器主动向浏览器推送与这个请求相关的资源，这样浏览器就不用发起后续请求。<br>Server-Push 主要是针对资源内联做出的优化，相较于 HTTP/1.x 资源内联的优势:</p><ul><li>客户端可以缓存推送的资源</li><li>客户端可以拒收推送过来的资源</li><li>推送资源可以由不同页面共享</li><li>服务器可以按照优先级推送资源</li></ul><h3 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h3><p>HTTP/1.1的有一个缺点是：当一个含有确切值的Content-Length的HTTP消息被送出之后，你就很难中断它了。当然，通常你可以断开整个TCP链接（但也不总是可以这样），但这样导致的代价就是需要通过三次握手来重新建立一个新的TCP连接。</p><p>一个更好的方案是只终止当前传输的消息并重新发送一个新的。在HTTP/2里面，我们可以通过发送RST_STREAM帧来实现这种需求，从而避免浪费带宽和中断已有的连接。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>HTTP/2升级并不完全是没有副作用的，先说结论，HTTP/1.x全升HTTP/2性能不一定能提升，还是需要做一些特殊的优化。</p><ol><li><p>需要把针对HTTP/1.x的优化点摘出来改成对h2友好的，不然会影响性能，比如雪碧图，css，js行内引入，域名打散这些都是针对h1的优化，如果不针对h2做修改，收益可能是负的。</p></li><li><p>保证你的页面没有那种古老的合并资源请求的优化，比如通过xhr请求多个图片js，html片段再在客户端解析的骚操作。</p></li><li><p>h2特性在h1上不支持，所以你需要在不支持的h1浏览器里访问站点，来做性能测试，需要成本。</p></li><li><p>h2对单请求的优化有限，如果做流服务器，可能收益也不大，视频，大图片下载，多路复用也体现不出什么优势。</p></li><li><p>开启h2之后对ssl的配置可能会更复杂一些，如果不是nginx层代理开启，而是在前端机上比如nodejs服务上开启h2，服务端的改造也比较麻烦，不像静态资源那么开关方便。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/HTTP/2" target="_blank" rel="noopener">维基百科：HTTP/2</a></li><li><a href="https://ye11ow.gitbooks.io/http2-explained/content/" target="_blank" rel="noopener">《http2讲解》</a></li><li><a href="https://www.zhihu.com/question/310263956/answer/582342502" target="_blank" rel="noopener">把所有 HTTPS 项目无脑升级成 HTTP/2 会有什么坑吗?[知乎]</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP-2介绍&quot;&gt;&lt;a href=&quot;#HTTP-2介绍&quot; class=&quot;headerlink&quot; title=&quot;HTTP/2介绍&quot;&gt;&lt;/a&gt;HTTP/2介绍&lt;/h2&gt;&lt;p&gt;维基百科：HTTP/2（超文本传输协议第2版，最初命名为HTTP 2.0），简称为h2（基于
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>深究HTTPS</title>
    <link href="http://yoursite.com/2019/08/13/%E6%B7%B1%E7%A9%B6HTTPS/"/>
    <id>http://yoursite.com/2019/08/13/深究HTTPS/</id>
    <published>2019-08-13T07:44:42.000Z</published>
    <updated>2019-11-06T06:11:27.306Z</updated>
    
    <content type="html"><![CDATA[<p>前言：还没有用上https的可以看一下我之前写的<a href="http://hjingren.cn/2019/06/11/Nginx%E4%B8%8B%E5%8D%87%E7%BA%A7https/" target="_blank" rel="noopener">Nginx下升级https</a>，把你的http升级到https。</p><h2 id="HTTP和HTTPS基本概念"><a href="#HTTP和HTTPS基本概念" class="headerlink" title="HTTP和HTTPS基本概念"></a>HTTP和HTTPS基本概念</h2><p><code>HTTP</code>：超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。<br><code>HTTPS</code>：超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p><h2 id="HTTP和HTTPS的差异"><a href="#HTTP和HTTPS的差异" class="headerlink" title="HTTP和HTTPS的差异"></a>HTTP和HTTPS的差异</h2><ol><li><p>从上面概念也可以看出来HTTP是不安全的，且攻击者通过监听和中间人攻击等手段，可以获取网站帐户和敏感信息等。HTTPS被设计为可防止前述攻击，并在正确配置时被认为是安全的。</p></li><li><p>HTTP的URL由”http://“起始且默认使用端口80，而HTTPS的URL由”https://“起始且默认使用端口443。</p></li><li><p>HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。</p><ul><li>1）对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li><li>2）非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li></ul></li></ol><h2 id="简述HTTPS访问过程"><a href="#简述HTTPS访问过程" class="headerlink" title="简述HTTPS访问过程"></a>简述HTTPS访问过程</h2><p>HTTPS在进行数据传输之前会与服务器和浏览器进行一次握手，在握手时确定双方的加密密码信息。</p><p>具体过程如下：</p><ol><li><p>浏览器将支持的加密信息发送给网站服务器；</p></li><li><p>服务器会选择出一套加密算法和哈希算法，将验证身份的信息以证书（证书发布CA机构、证书有效期、公钥、证书所有者、签名等）的形式发送给浏览器；</p></li><li><p>当浏览器收到证书之后首先需要验证证书的合法性，如果证书受到浏览器信任则在浏览器地址栏会有标志显示，否则就会显示不受信的标识。当证书受信之后，浏览器会随机生成一串密码，并使用证书中的公钥加密。之后就是使用约定好的哈希算法握手消息，并生成随机数对消息进行加密，再将生成的信息发送给服务器；</p></li><li><p>当服务器接收到浏览器发送过来的数据后，会使用服务器本身的私钥将信息解密确定密码，然后通过密码解密浏览器发送过来的握手信息，并验证哈希是否与浏览器一致。然后服务器会使用密码加密新的握手信息，发送给浏览器；</p></li><li><p>最后浏览器解密并计算经过哈希算法加密的握手消息，如果与服务发送过来的哈希一致，则此握手过程结束后，服务器与浏览器会使用之前浏览器生成的随机密码和对称加密算法进行加密交换数据。</p></li></ol><h2 id="HTTPS的加密原理"><a href="#HTTPS的加密原理" class="headerlink" title="HTTPS的加密原理"></a>HTTPS的加密原理</h2><p>HTTPS在加密过程中使用了非对称加密技术和对称加密技术。</p><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>采用单钥密码系统的加密方式，同一个密钥可以同时做信息的加密和解密，这种加密的方法称为对称加密。</p><p>SSL在通信过程中，使用了对称加密算法，也就是说客户端和服务器同时共享一个密钥。</p><p>于是，以共享密钥的方式加密，必须将密钥发给对方。这个时候，假如通信过程被监听，密钥被攻击者获取了，那么这个时候也就失去了加密的意义了。</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https2.png" alt="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https2.png"></p><p>于是就需要使用两把密钥的非对称加密算法。</p><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>与对称加密算法相反，非对称加密算法需要两个密钥来进行加密和解密，这两个密钥是配对的，分别是公开密钥（公钥）和私有密钥（私钥）。</p><p>于是现在，假设现在由服务器来生成一对公钥和密钥。</p><p>当客户端第一次发请求和服务器协商的时候，服务器就生成了一对公钥和私钥。</p><p>紧接着，服务器把公钥发给客户端（明文，不需要做任何加密），客户端接收后，使用服务器发过来的公钥进行数据加密。</p><p>再接着，服务器接收到了以后，用配对的私钥进行解密，就得到了客户端发送的数据。</p><p>非对称加密算法的特点：算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加解密速度性能上比较差，没有对称加密算法加解密的速度快。</p><p>但是我们还存在一个问题，如果公钥被中间人拿到篡改呢？</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https3.jpeg" alt="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https3.jpeg"></p><p>这时我们就需要使用证书保证公钥的正确性</p><h3 id="公钥证书"><a href="#公钥证书" class="headerlink" title="公钥证书"></a>公钥证书</h3><p>首先，服务器的运营人员向数字证书机构（CA）提出公开密钥的申请。数字证书认证机构在验证申请者的身份之后，会对申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起。</p><p>简单点理解就是：<br>CA会向申请者颁发一个证书文件和证书的私钥文件，这个证书文件里面的内容有：签发者、证书用途、服务器申请的时候附带的公钥、服务器的加密算法、使用的HASH算法、证书到期的时间等等，私钥文件就是与证书中公钥对应的私钥。</p><p>紧接着，把上面所提到的证书文件里的内容，做一次HASH求值，得到一个HASH值。</p><p>再接着，用CA的私钥进行加密，这样就完成了数字签名。而用CA的私钥加密后，就生成了类似人体指纹的签名，任何篡改证书的尝试，都会被数字签名发现。</p><p>最后，把数字签名，附在数字证书的末尾，传输回来给服务器。</p><p>接下来，服务器会把这份由数字证书认证机构颁发的公钥证书发给客户端。<br>客户端拿到这个数字证书以后，会去校验证书签名的合法性，先对证书进行SHA256（浏览器的加密算法）得到一个哈希值，然后用证书的公钥对证书的签名进行解密从中取得另一个哈希值，如果这两个哈希值相等，说明证书没有被篡改过，确实是权威机构颁发。</p><p>如果认证通过，就可以取得服务器的公开密钥。</p><p>接下来就可以使用对称加密算法通信了。</p><h3 id="扩展：客户端证书"><a href="#扩展：客户端证书" class="headerlink" title="扩展：客户端证书"></a>扩展：客户端证书</h3><p>HTTPS中不仅可以使用服务器证书，还可以使用客户端证书。以客户端证书进行客户端认证，它的作用与服务器证书是相同的。</p><p>例如，银行的网上银行就采用了客户端证书（网银盾）。在登录网银时不仅要求用户确认输入ID和密码，还会要求用户的客户端证书（网银盾），以确认用户是否从特定的终端访问网银。</p><h2 id="HTTPS的安全通信机制"><a href="#HTTPS的安全通信机制" class="headerlink" title="HTTPS的安全通信机制"></a>HTTPS的安全通信机制</h2><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https1.png" alt="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/https1.png"></p><h3 id="client-hello"><a href="#client-hello" class="headerlink" title="client_hello"></a>client_hello</h3><p>这一步中，客户端通过发送<code>client_hello</code>报文开始SSL通信。在请求中，浏览器会带上一些建立连接的必要信息（注意：这一步的信息全都是明文的），包括：</p><ol><li><code>版本</code>: 客户端支持的最高的 TLS 协议版本。从高到低依次为：TLS v1.2, TLS v1.1, TLS v1.0, SSL v3, SSL v2。其中低于 TLS v1.0 的版本基本不再使用，因为 SSL v3 和 SSL v2 都存在漏洞，Google 和 Mozilla 已明确禁用 SSL 协议。</li><li><code>密码套件</code>: 按优先级降序排列的、客户端支持的加密套件列表。每个加密套件会各包含一个认证算法（用于身份验证）、密钥交换算法（用于协商密钥）、对称加密算法（用于消息加密）和信息摘要算法（用于完整性校验）。</li><li><code>压缩方法</code>: 客户端支持的用于压缩消息、降低传输体积的压缩算法列表。</li><li><code>随机数</code>: 一个由客户端生成的随机数，使用 32 位时间戳和一个安全随机数生成器生成的 28 字节随机数组成。这个随机数用于后续<code>Master Key</code>的生成，并防止重放攻击。</li><li><code>会话标识</code>: 一个变长的会话标志。非 0 值意味着客户端希望更新当前已存在的连接的参数或者为此连接创建一个新的连接。0 值表示客户端想在新会话上创建一个新连接。</li><li><code>扩展字段</code>: 包含一些其他的相关参数（比如 SNI）。</li></ol><h3 id="server-hello"><a href="#server-hello" class="headerlink" title="server_hello"></a>server_hello</h3><p>客户端在发出<code>client_hello</code>消息之后，会等待服务器返回<code>server_hello</code>消息，包含和 <code>client_hello</code>相同的参数。一般来说，参数结构如下：</p><ol><li><code>版本</code>: 包含客户端支持的最低版本和服务器支持的最高版本。</li><li><code>密码套件</code>: 包含了服务器从客户端发来的密码套件列表中选择出的将要使用的密码套件。</li><li><code>压缩方法</code>: 包含了服务器从客户端发来的压缩方法列表中选择出的将要使用的压缩方法。</li><li><code>随机数</code>: 由服务器生成的不同于客户端在<code>client_hello</code>中发来的随机数的另一个独立的随机数。</li><li><code>会话标识</code>: 如果客户端发送的会话标识不为 0，服务器会使用与客户端发送的一致的会话标识，否则返回的是服务器生成的一个新的会话标识。</li></ol><h3 id="certificate-server-hello-done"><a href="#certificate-server-hello-done" class="headerlink" title="certificate + server_hello _done"></a>certificate + server_hello _done</h3><p>通常来说，服务器会在<code>certificate</code>消息中发送其自身的公开密钥证书供客户端进行验证。</p><p>最后，服务器发送<code>server_hello_done</code>消息，表明服务器的 hello 相关的消息结束。在发送此消息之后，服务器会等待客户端应答，该消息没有参数。</p><p>在这一步结束之后表明最初阶段的SSL握手协商部分结束。</p><h3 id="client-key-change"><a href="#client-key-change" class="headerlink" title="client_key_change"></a>client_key_change</h3><p>客户端在收到服务器发来的<code>server_hello_done</code>消息之后，会验证服务器提供的证书是否合法，并检查<code>server_hello</code>的各项参数。如果验证通过，则客户端会向服务器发送一条或多条消息。</p><p>然后客户端会发送<code>client_key_exchange</code>报文消息，报文中包含通信加密中使用的一种被称为<code>PreMaster Key</code>的随机密码串，并使用服务器证书中的公钥或者服务器密钥交换消息中的临时 RSA 密钥加密。这个密钥会被用于之后的<code>Master Key</code>的计算。</p><h3 id="change-cipher-spec-finished"><a href="#change-cipher-spec-finished" class="headerlink" title="change_cipher_spec + finished"></a>change_cipher_spec + finished</h3><p>经过以上步骤，客户端和服务器已经可以通过得到的消息计算出<code>Master Key</code>了。从现在开始，客户端和服务器都将开始使用协商好的加密算法、密钥进行通信，在正式传递消息之前会计算<code>Master Key</code>和之前握手过程中收到的所有信息的<code>hash</code>，并通过协商好的加密算法使用 <code>Master Key</code>加密，作为<code>change_cipher_spec</code>消息的内容，接着发送<code>finished</code>消息。服务器在收到客户端发来的<code>change_cipher_spec</code>和<code>finished</code>消息之后，也会计算<code>Master Key</code>并使用协商好的加密算法和之前握手过程中收到的所有信息的<code>hash</code>，发回给客户端用以验证。至此，握手阶段结束，之后就可以交换应用层的内容了。</p><p>服务器和客户端的<code>finished</code>报文交换完毕之后，SSL连接就算建立完成，当然，通信会受到SSL的保护。从此处开始进行应用层协议的通信，即发送HTTP请求。</p><p>至此，整个过程介绍完毕。</p><h2 id="实践HTTPS连接的握手过程"><a href="#实践HTTPS连接的握手过程" class="headerlink" title="实践HTTPS连接的握手过程"></a>实践HTTPS连接的握手过程</h2><p>我们可以使用 curl 命令来简略查看建立 HTTPS 时的握手过程，在命令行中执行：curl -v -I -L <a href="https://hzzly.cn" target="_blank" rel="noopener">https://hzzly.cn</a></p><p>能得到如下的输出：</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/http4.png" alt="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/https/http4.png"></p><p>简单说明一下连接的建立过程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示建立了和 hzzly.cn 服务器 443 端口的连接。</span></span><br><span class="line">Connected to hzzly.cn (39.108.182.125) port 443 (<span class="comment">#0) </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端发出 client_hello 消息。</span></span><br><span class="line">TLSv1.2 (OUT), TLS handshake, Client hello (1): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器发出 server_hello 消息。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Server hello (2): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器发出 certificate 消息。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Certificate (11): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器发出 server_key_exchange 消息。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Server key exchange (12): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器发出 server_done 消息。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Server finished (14): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端发出 client_key_exchange 消息。</span></span><br><span class="line">TLSv1.2 (OUT), TLS handshake, Client key exchange (16): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端发出加密后的 client_hello 消息。</span></span><br><span class="line">TLSv1.2 (OUT), TLS change cipher, Client hello (1): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端发出 hello_done 消息。</span></span><br><span class="line">TLSv1.2 (OUT), TLS handshake, Finished (20): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器将加密后的 client_hello 消息发回。</span></span><br><span class="line">TLSv1.2 (IN), TLS change cipher, Client hello (1): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 握手结束。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Finished (20): </span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL 连接采用 ECDHE-RSA-AES256-GCM-SHA384 密码套件。</span></span><br><span class="line"><span class="comment"># ECDHE 表示密钥交换方法采用椭圆曲线迪菲-赫尔曼交换方法</span></span><br><span class="line"><span class="comment"># RSA 表示密钥交换中使用的签名方式</span></span><br><span class="line"><span class="comment"># AES-256-GCM 表示的是对称加密算法</span></span><br><span class="line"><span class="comment"># SHA-384 表示的是内容完整性校验使用的哈希算法</span></span><br><span class="line">SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后的几行包含了证书的内容，包括有效时间、常用名、证书签发机构等。</span></span><br><span class="line">Server certificate: </span><br><span class="line">      <span class="comment"># Common Name 为 hzzly.cn</span></span><br><span class="line">    subject: CN=hzzly.cn</span><br><span class="line">      <span class="comment"># 在此时间之前无效</span></span><br><span class="line">    start date: Aug  2 00:00:00 2019 GMT</span><br><span class="line">      <span class="comment"># 在此时间之后无效</span></span><br><span class="line">    expire date: Aug  1 12:00:00 2020 GMT</span><br><span class="line">      <span class="comment"># 域名和证书的域名匹配</span></span><br><span class="line">    subjectAltName: host <span class="string">"hzzly.cn"</span> matched certs <span class="string">"hzzly.cn"</span></span><br><span class="line">      <span class="comment"># 签发者是 Encryption</span></span><br><span class="line">    issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=Encryption Everywhere DV TLS CA - G1</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《图解http》</li><li><a href="https://juejin.im/post/5a9400fcf265da4e976eb4b9" target="_blank" rel="noopener">从Chrome源码看HTTPS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：还没有用上https的可以看一下我之前写的&lt;a href=&quot;http://hjingren.cn/2019/06/11/Nginx%E4%B8%8B%E5%8D%87%E7%BA%A7https/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ngi
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>动手开发一个自己的项目脚手架</title>
    <link href="http://yoursite.com/2019/07/19/%E5%8A%A8%E6%89%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/07/19/动手开发一个自己的项目脚手架/</id>
    <published>2019-07-19T13:00:49.000Z</published>
    <updated>2019-11-06T06:09:59.635Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：随着前端工程化的不断深入，同时 Node 给前端开发带来了很大的改变，促进了前端开发的自动化，越来越多的人选择使用脚手架来从零到一搭建自己的项目。其中最熟悉的就是vue-cli和create-react-app，它们可以帮助我们初始化配置、生成项目结构、自动安装依赖等等，最后我们一行指令即可运行项目开始开发，或者进行项目构建（build）。在实际的开发过程中，我们可能会有自己的特定需求，那么我们就得学会如何开发一个Node命令行工具。</p></blockquote><p>在前面的文章 动手搭建react开发环境系列 中，结尾处我们说到，既然我们的项目结构搭建好了，但不能每次开发都来手动复制项目结构，所以我们就要通过执行命令就生成我们需要的项目结构。</p><p>我们的初步设想是，在指定目录下执行一个命令（假设为create）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hzzly create demo</span><br></pre></td></tr></table></figure></p><p>就会生成一个目录名为 demo 的项目，里面包含有我们所需的基础项目结构。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir hzzly-cli</span><br><span class="line">cd hzzly-cli</span><br><span class="line">mkdir bin lib</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add commander chalk boxen fs-extra inquirer ora update-notifier download-git-repo rimraf</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander</a> 一款重量轻，表现力和强大的命令行框架</li><li><a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a> 用于打印彩色的信息</li><li><a href="https://github.com/sindresorhus/boxen" target="_blank" rel="noopener">boxen</a> 创建小“面板”</li><li><a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">inquirer</a> 交互式命令行用户界面的集合</li><li><a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">ora</a> 用于创建 spinner，添加下载模板 loading 效果</li><li><a href="https://github.com/yeoman/update-notifier" target="_blank" rel="noopener">update-notifier</a> 用于检查包的线上版本与本地版本</li><li><a href="https://github.com/flipxfx/download-git-repo" target="_blank" rel="noopener">download-git-repo</a> 从节点下载并提取git存储库</li></ul><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><h3 id="1、创建一个用于运行命令的脚本"><a href="#1、创建一个用于运行命令的脚本" class="headerlink" title="1、创建一个用于运行命令的脚本"></a>1、创建一个用于运行命令的脚本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/hzzly.js</span></span><br><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello world ~"</span>);</span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node bin/hzzly.js</span><br></pre></td></tr></table></figure></p><p>不出意外的话能够看到输出了 hello world ~，当然这不是我们想要的结果，我们是要直接运行 hzzly 命令就能输出 hello world ~</p><blockquote><p>🔥Tip: 主入口文件的最上方添加代码 #! /usr/bin/env node, 表明这是一个可执行的应用</p></blockquote><h3 id="2、添加命令"><a href="#2、添加命令" class="headerlink" title="2、添加命令"></a>2、添加命令</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "bin": &#123;</span><br><span class="line">    "hzzly": "bin/hzzly.js"</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们指定 hzzly 命令的执行文件为 bin/hzzly.js。</p><h3 id="3、全局运行命令调试"><a href="#3、全局运行命令调试" class="headerlink" title="3、全局运行命令调试"></a>3、全局运行命令调试</h3><p>在项目目录下运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install . -g</span><br><span class="line">// 或</span><br><span class="line">npm link</span><br></pre></td></tr></table></figure></p><p>这样就可以使用 hzzly 命令了。</p><p>到此，一个本地的 npm 命令行工具就已经成功完成了，接下来我们就来完善具体的功能。</p><h2 id="脚手架开发"><a href="#脚手架开发" class="headerlink" title="脚手架开发"></a>脚手架开发</h2><h3 id="1、效果"><a href="#1、效果" class="headerlink" title="1、效果"></a>1、效果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Usage: hzzly &lt;<span class="built_in">command</span>&gt; [options] &lt;app-name&gt; [folder-name]</span><br><span class="line"> </span><br><span class="line">Options:</span><br><span class="line">  -v, --version  output the version number</span><br><span class="line">  -c, --<span class="built_in">clone</span>    use git <span class="built_in">clone</span></span><br><span class="line">  -h, --<span class="built_in">help</span>     output usage information</span><br><span class="line"> </span><br><span class="line">Commands:</span><br><span class="line">  setup          run remote setup commands</span><br><span class="line">  create         generate a new project from a react template</span><br><span class="line">  check          check <span class="built_in">test</span></span><br><span class="line"> </span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># create a new react project</span></span><br><span class="line">  $ hzzly create demo</span><br></pre></td></tr></table></figure><h3 id="2、准备项目模版"><a href="#2、准备项目模版" class="headerlink" title="2、准备项目模版"></a>2、准备项目模版</h3><p>脚手架是帮助我们快速生成一套既定的项目架构、文件、配置，而最常见的做法的就是先写好一套项目框架模版，等到脚手架要生成项目时，则将这套模版拷贝到目标目录下。</p><ul><li>一种是直接放在本地</li><li>另一种是托管在 github 上</li></ul><p>这里我们选择托管在 github，然后通过<code>download-git-repo</code>下载到指定目录。我准备了一个<a href="https://github.com/hzzly/webpack-template" target="_blank" rel="noopener">项目模版</a>，之后就会用它来作为脚手架生成的项目结构。</p><h3 id="3、初始Command"><a href="#3、初始Command" class="headerlink" title="3、初始Command"></a>3、初始Command</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/hzzly.js</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">"chalk"</span>);</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'../package.json'</span>);</span><br><span class="line"> </span><br><span class="line">program</span><br><span class="line">  .version(pkg.version)</span><br><span class="line">  .usage(<span class="string">'&lt;command&gt; [options] &lt;app-name&gt; [folder-name]'</span>)</span><br><span class="line">  .option(<span class="string">"-c, --clone"</span>, <span class="string">"use git clone"</span>)</span><br><span class="line">  .on(<span class="string">"--help"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Examples:"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      chalk.gray(<span class="string">"  # create a new react project"</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"  $ hzzly create demo"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;);</span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure><p>这样，当我们执行 <code>hzzly</code> 命令时就会有如下效果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Usage: hzzly &lt;<span class="built_in">command</span>&gt; [options] &lt;app-name&gt;</span><br><span class="line"> </span><br><span class="line">Options:</span><br><span class="line">  -V, --version  output the version number</span><br><span class="line">  -c, --<span class="built_in">clone</span>    use git <span class="built_in">clone</span></span><br><span class="line">  -h, --<span class="built_in">help</span>     output usage information</span><br><span class="line"> </span><br><span class="line">Examples:</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># create a new react project</span></span><br><span class="line">  $ hzzly create demo</span><br></pre></td></tr></table></figure></p><p>接下来就可以去定义我们的 Commands 了。</p><h3 id="4、定义Command命令"><a href="#4、定义Command命令" class="headerlink" title="4、定义Command命令"></a>4、定义Command命令</h3><p>在 <code>program.parse(process.argv)</code> 前面去定义我们的command命令</p><p>为什么要在它前面去定义命令呢？</p><blockquote><p>parse 用于解析process.argv，设置options以及触发commands</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/hzzly.js</span></span><br><span class="line"><span class="comment">// 同上...</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'create'</span>)</span><br><span class="line">  .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">  .option(<span class="string">"-c, --clone"</span>, <span class="string">"use git clone"</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">appName, option</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获得了参数，可以在这里做响应的业务处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`指令 create 后面跟的参数值: <span class="subst">$&#123;appName&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(option);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 同上</span></span><br></pre></td></tr></table></figure><ul><li>command 定义命令行指令</li><li>description 命令描述，它会在help里面展示</li><li>option 定义参数。它接受四个参数，在第一个参数中，它可输入短名字 -a和长名字–name ,使用 | 或者 , 分隔，在命令行里使用时，这两个是等价的，区别是后者可以在程序里通过回调获取到；第二个为描述, 会在 help 信息里展示出来；第三个参数为回调函数，他接收的参数为一个string，有时候我们需要一个命令行创建多个模块，就需要一个回调来处理；第四个参数为默认值</li><li>action 注册一个 callback 函数</li></ul><p>接下来就是处理生成项目模板的逻辑了，继续。</p><h3 id="5、处理生成项目结构逻辑"><a href="#5、处理生成项目结构逻辑" class="headerlink" title="5、处理生成项目结构逻辑"></a>5、处理生成项目结构逻辑</h3><h4 id="5-1、思路"><a href="#5-1、思路" class="headerlink" title="5.1、思路"></a>5.1、思路</h4><ul><li>1、输入 <code>vue create</code> 提示输入项目文件夹名称</li><li>2、输入 <code>vue create .</code> 表示在当前目录构建项目，但要给个提示（是否确定要在所在目录生成项目，其它文件将被删除）</li><li>3、输入 <code>vue create app</code> 表示在当前目录生成一个 <code>app</code> 的目录并在此目录构建项目，当有相同的目录时也要提示（当前目录已存在，是否继续构建）</li></ul><p>好了，思路有了就 so easy 了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/hzzly.js</span></span><br><span class="line"><span class="comment">// 同上...</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'create'</span>)</span><br><span class="line">  .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">  .option(<span class="string">"-c, --clone"</span>, <span class="string">"use git clone"</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">appName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// // 获得了参数，可以在这里做响应的业务处理</span></span><br><span class="line">    <span class="comment">// console.log(`指令 create 后面跟的参数值: $&#123;appName&#125;`);</span></span><br><span class="line">    <span class="comment">// 判断是否有传appName</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> appName === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断是否有相同 appName 目录</span></span><br><span class="line">      checkAppName(appName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有传appName的话提示用户输入</span></span><br><span class="line">      <span class="keyword">const</span> opts = [&#123;</span><br><span class="line">        type: <span class="string">'input'</span>,</span><br><span class="line">        name: <span class="string">'appName'</span>,</span><br><span class="line">        message: <span class="string">'Please enter the app name for your project：'</span>,</span><br><span class="line">        validate: <span class="function"><span class="params">appName</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!appName) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'⚠️  app name must not be null！'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;];</span><br><span class="line">      <span class="comment">// inquirer命令行交互工具</span></span><br><span class="line">      inquirer.prompt(opts).then(<span class="function">(<span class="params">&#123; appName &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (appName) &#123;</span><br><span class="line">          <span class="comment">// 输入完之后判断是否有相同 appName 目录</span></span><br><span class="line">          checkAppName(appName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 同上</span></span><br></pre></td></tr></table></figure><h4 id="5-2、checkAppName"><a href="#5-2、checkAppName" class="headerlink" title="5.2、checkAppName"></a>5.2、checkAppName</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理项目名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAppName</span>(<span class="params">appName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取绝对路径</span></span><br><span class="line">  <span class="keyword">const</span> to = path.resolve(appName);</span><br><span class="line">  <span class="comment">// 判断是否在当前目录构建</span></span><br><span class="line">  <span class="keyword">if</span> (appName === <span class="string">'.'</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断当前目录是否为空</span></span><br><span class="line">    checkEmpty(to)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkExist(to)) &#123;</span><br><span class="line">    <span class="comment">// 如果传入的 appName 在当前目录已存在</span></span><br><span class="line">    inquirer.prompt([&#123;</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      message: <span class="string">'Target directory exists. Continue?'</span>,</span><br><span class="line">      name: <span class="string">'ok'</span>,</span><br><span class="line">    &#125;]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (answers.ok) &#123;</span><br><span class="line">        <span class="comment">// 回答是的话删除已存在的目录并下载模板构建项目</span></span><br><span class="line">        rm(appName)</span><br><span class="line">        downloadAndGenerate(REACT_TPL, to, appName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果以上情况都不是就直接下载模板构建项目</span></span><br><span class="line">    downloadAndGenerate(REACT_TPL, to, appName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3、checkEmpty"><a href="#5-3、checkEmpty" class="headerlink" title="5.3、checkEmpty"></a>5.3、checkEmpty</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断目录是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmpty</span>(<span class="params">path, appName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dirFiles = fs.readdirSync(path);</span><br><span class="line">  <span class="keyword">if</span> (dirFiles.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    inquirer.prompt([&#123;</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      name: <span class="string">'ok'</span>,</span><br><span class="line">      message: <span class="string">'Target directory is not empty and will overwritten. Continue?'</span>,</span><br><span class="line">    &#125;]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (answers.ok) &#123;</span><br><span class="line">        fs.emptyDirSync(path)</span><br><span class="line">        downloadAndGenerate(REACT_TPL, path, appName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    downloadAndGenerate(REACT_TPL, path, appName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4、checkExist"><a href="#5-4、checkExist" class="headerlink" title="5.4、checkExist"></a>5.4、checkExist</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断目录是否已存在</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkExist</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fs.pathExistsSync(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5、downloadAndGenerate"><a href="#5-5、downloadAndGenerate" class="headerlink" title="5.5、downloadAndGenerate"></a>5.5、downloadAndGenerate</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载模板构建项目</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadAndGenerate</span>(<span class="params">template, tmp</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 生成下载loading</span></span><br><span class="line">  <span class="keyword">const</span> spinner = ora(<span class="string">"downloading template"</span>);</span><br><span class="line">  <span class="keyword">const</span> clone = program.clone || <span class="literal">false</span>;</span><br><span class="line">  spinner.start();</span><br><span class="line">  download(template, tmp, &#123; clone &#125;, err =&gt; &#123;</span><br><span class="line">    spinner.stop();</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(</span><br><span class="line">        chalk.red(</span><br><span class="line">        <span class="string">"Failed to download repo "</span> + template + <span class="string">": "</span> + err.message.trim()</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下载完成后提示用户操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`To get started:\n\n  cd <span class="subst">$&#123;tmp&#125;</span>\n  npm install\n  npm run dev\n\nDocumentation can be found at https://github.com/hzzly`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这，开发阶段就可告一段落了，我们已经可以通过 <code>hzzly create &lt;app-name&gt;</code> 命令行构建项目目录的步骤，接下来就是发布到npm给其他人使用。</p><h2 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h2><p>到目前为止，我们开发的 hzzly 还是在本地的，现在就该将其发布到 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 上了。</p><p>1、首先 <a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">注册一个账号</a>。</p><p>2、在终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>输入用户名、密码和邮箱便可将本地机器与 npm 连接起来了。</p><p>3、修改package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "files": [</span><br><span class="line">    <span class="string">"bin/"</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加 files 属性指定哪些文件提交到 npm，这样可以减少包的大小。</p><p>4、发布<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></p><h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><p>首先修改 package.json 配置文件中的 version 字段，比如这里我从 1.0.0 改成 1.0.1（只能大于当前版本），然后修改脚手架，最后再次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="1、添加小面板"><a href="#1、添加小面板" class="headerlink" title="1、添加小面板"></a>1、添加小面板</h3><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/cli/hzzly-cli2.png" alt="boxen"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> boxen = <span class="built_in">require</span>(<span class="string">'boxen'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> BOXEN_OPTS = &#123;</span><br><span class="line">  padding: <span class="number">1</span>,</span><br><span class="line">  margin: <span class="number">1</span>,</span><br><span class="line">  align: <span class="string">'center'</span>,</span><br><span class="line">  borderColor: <span class="string">'#678491'</span>,</span><br><span class="line">  borderStyle: <span class="string">'round'</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializing</span>(<span class="params">pkg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> messages = [];</span><br><span class="line">  messages.push(</span><br><span class="line">    <span class="string">`🔥  Welcome to use hzzly-cli <span class="subst">$&#123;chalk.grey(<span class="string">`v<span class="subst">$&#123;pkg.version&#125;</span>`</span>)&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">  messages.push(</span><br><span class="line">    chalk.grey(<span class="string">'https://github.com/hzzly/hzzly-cli'</span>)</span><br><span class="line">  );</span><br><span class="line">  messages.push(</span><br><span class="line">    chalk.grey(<span class="string">'https://www.npmjs.com/package/hzzly-cli'</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="built_in">console</span>.log(boxen(messages.join(<span class="string">'\n'</span>), BOXEN_OPTS));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'create'</span>)</span><br><span class="line">  .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">  .option(<span class="string">"-c, --clone"</span>, <span class="string">"use git clone"</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">appName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用小面板</span></span><br><span class="line">    initializing(pkg)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><h3 id="2、检查包的线上版本与本地版本"><a href="#2、检查包的线上版本与本地版本" class="headerlink" title="2、检查包的线上版本与本地版本"></a>2、检查包的线上版本与本地版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updateNotifier = <span class="built_in">require</span>(<span class="string">'update-notifier'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkVersion</span>(<span class="params">pkg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'🛠️  Checking your hzzly-cli version...'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> notifier = updateNotifier(&#123;</span><br><span class="line">    pkg,</span><br><span class="line">    updateCheckInterval: <span class="number">0</span></span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> update = notifier.update;</span><br><span class="line">  <span class="keyword">if</span> (update) &#123;</span><br><span class="line">    <span class="keyword">const</span> messages = [];</span><br><span class="line">    messages.push(<span class="string">`Update available <span class="subst">$&#123;chalk.grey(update.current)&#125;</span> → <span class="subst">$&#123;chalk.green(update.latest)&#125;</span>`</span>)</span><br><span class="line">    messages.push(<span class="string">`Run <span class="subst">$&#123;chalk.cyan(<span class="string">`npm i -g <span class="subst">$&#123;pkg.name&#125;</span>`</span>)&#125;</span> to update`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(boxen(messages.join(<span class="string">'\n'</span>), &#123; ...BOXEN_OPTS, <span class="attr">borderColor</span>: <span class="string">'#fae191'</span> &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'🛠️  Finish checking your hzzly-cli. CAUTION ↑↑'</span>, <span class="string">'⚠️'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'🛠️  Finish checking your hzzly-cli. OK'</span>, chalk.green(<span class="string">'✔'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializing</span>(<span class="params">pkg</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  checkVersion(pkg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、README-md添加徽标"><a href="#3、README-md添加徽标" class="headerlink" title="3、README.md添加徽标"></a>3、README.md添加徽标</h3><p>推荐自动生成徽标网站 <a href="https://shields.io/" target="_blank" rel="noopener">shields.io</a></p><p><img src="https://img.shields.io/npm/v/hzzly-cli.svg" alt="NPM version"></p><p><img src="https://img.shields.io/npm/l/hzzly-cli.svg" alt="MIT Licence"></p><h2 id="深入inquirer-js"><a href="#深入inquirer-js" class="headerlink" title="深入inquirer.js"></a>深入inquirer.js</h2><p>创建脚手架的时候我们会发现很多脚手架都需要我们和命令行频繁交互，就像我们使用npm init的时候一样，那么是如何实现和命令行交互的呢？此时inquirer.js闪亮登场。</p><h3 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法"></a>1、基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line">inquirer.prompt([<span class="comment">/* opts */</span>])</span><br><span class="line">  .then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Use answers for... whatever!! </span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="2、参数详解"><a href="#2、参数详解" class="headerlink" title="2、参数详解"></a>2、参数详解</h3><ul><li>type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；</li><li>name: 存储当前问题回答的变量；</li><li>message：问题的描述；</li><li>default：默认值；</li><li>choices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；</li><li>validate：对用户的回答进行校验；</li><li>filter：对用户的回答进行过滤处理，返回处理后的值；</li><li>transformer：对用户回答的显示效果进行处理(如：修改回答的字体或背景颜色)，但不会影响最终的答案的内容；</li><li>when：根据前面问题的回答，判断当前问题是否需要被回答；</li><li>pageSize：修改某些type类型下的渲染行数；</li><li>prefix：修改message默认前缀；</li><li>suffix：修改message默认后缀。</li></ul><h3 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opts = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    message: <span class="string">'姓名'</span>,</span><br><span class="line">    name: <span class="string">'name'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    message: <span class="string">'手机号'</span>,</span><br><span class="line">    name: <span class="string">'phone'</span>,</span><br><span class="line">    validate: <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val.match(<span class="regexp">/\d&#123;11&#125;/g</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'请输入11位数字'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'confirm'</span>,</span><br><span class="line">    message: <span class="string">'是否参加本次考核？'</span>,</span><br><span class="line">    name: <span class="string">'assess'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'confirm'</span>,</span><br><span class="line">    message: <span class="string">'是否同意本次考核须知？'</span>,</span><br><span class="line">    name: <span class="string">'notice'</span>,</span><br><span class="line">    when: <span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> answers.assess</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'list'</span>,</span><br><span class="line">    message: <span class="string">'欢迎来到本次考核，请选择语言：'</span>,</span><br><span class="line">    name: <span class="string">'eductionBg'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      <span class="string">"js"</span>,</span><br><span class="line">      <span class="string">"java"</span>,</span><br><span class="line">      <span class="string">"php"</span></span><br><span class="line">    ],</span><br><span class="line">    filter: <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 将选择的内容后面加语言</span></span><br><span class="line">      <span class="keyword">return</span> val + <span class="string">'语言'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'rawlist'</span>,</span><br><span class="line">    message: <span class="string">'请选择你喜欢逛的社区：'</span>,</span><br><span class="line">    name: <span class="string">'game'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      <span class="string">"掘金"</span>,</span><br><span class="line">      <span class="string">"github"</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'expand'</span>,</span><br><span class="line">    message: <span class="string">'请选择你喜欢的水果：'</span>,</span><br><span class="line">    name: <span class="string">'fruit'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">"a"</span>,</span><br><span class="line">        name: <span class="string">"Apple"</span>,</span><br><span class="line">        value: <span class="string">"apple"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">"O"</span>,</span><br><span class="line">        name: <span class="string">"Orange"</span>,</span><br><span class="line">        value: <span class="string">"orange"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">"p"</span>,</span><br><span class="line">        name: <span class="string">"Pear"</span>,</span><br><span class="line">        value: <span class="string">"pear"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'checkbox'</span>,</span><br><span class="line">    message: <span class="string">'请选择你喜欢的颜色：'</span>,</span><br><span class="line">    name: <span class="string">'color'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"red"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">new</span> inquirer.Separator(), <span class="comment">// 添加分隔符</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"blur"</span>,</span><br><span class="line">        checked: <span class="literal">true</span> <span class="comment">// 默认选中</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"green"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">new</span> inquirer.Separator(<span class="string">"--- 分隔符 ---"</span>), <span class="comment">// 自定义分隔符</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"yellow"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'password'</span>,</span><br><span class="line">    message: <span class="string">'请输入你的密码：'</span>,</span><br><span class="line">    name: <span class="string">'pwd'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">inquirer.prompt(opts).then(<span class="function"><span class="params">answers</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(answers);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/cli/hzzly-cli.png" alt="inquirer"></p><p>代码已上传至我的<a href="https://github.com/hzzly/hzzly-cli" target="_blank" rel="noopener">GitHub</a>，欢迎 Star、Fork</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a href="https://segmentfault.com/a/1190000002918295" target="_blank" rel="noopener">Nodejs 制作命令行工具</a></p><p><a href="https://juejin.im/post/5cc160b2f265da03452bdf5b" target="_blank" rel="noopener">用一次就会爱上的cli工具开发</a></p><p><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander.js</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：随着前端工程化的不断深入，同时 Node 给前端开发带来了很大的改变，促进了前端开发的自动化，越来越多的人选择使用脚手架来从零到一搭建自己的项目。其中最熟悉的就是vue-cli和create-react-app，它们可以帮助我们初始化配置、生
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="脚手架" scheme="http://yoursite.com/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>动手搭建react开发环境三</title>
    <link href="http://yoursite.com/2019/07/15/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%89/"/>
    <id>http://yoursite.com/2019/07/15/动手搭建react开发环境三/</id>
    <published>2019-07-15T01:23:52.000Z</published>
    <updated>2019-07-22T07:17:21.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>webpack 4</li><li>Babel 7</li></ul><blockquote><p>本篇主要使用针对代码或者开发效率进行优化</p></blockquote><h2 id="1、ESLint规范"><a href="#1、ESLint规范" class="headerlink" title="1、ESLint规范"></a>1、ESLint规范</h2><blockquote><p>规范代码有利于团队协作</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint babel-eslint eslint-config-airbnb eslint-config-standard eslint-loader eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-promise eslint-plugin-react eslint-plugin-standard -D</span><br></pre></td></tr></table></figure><h3 id="eslintrc"><a href="#eslintrc" class="headerlink" title=".eslintrc"></a>.eslintrc</h3><p>新建.eslintrc文件（配置ESLint）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"node"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"ecmaVersion"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"airbnb"</span>, <span class="string">"prettier"</span>],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"generator-star-spacing"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"consistent-return"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/forbid-prop-types"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/jsx-filename-extension"</span>: [<span class="number">1</span>, &#123; <span class="attr">"extensions"</span>: [<span class="string">".js"</span>] &#125;],</span><br><span class="line">    <span class="attr">"global-require"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="attr">"import/prefer-default-export"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/jsx-no-bind"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/prop-types"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/prefer-stateless-function"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/jsx-wrap-multilines"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"declaration"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"assignment"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"return"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"arrow"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"condition"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"logical"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"prop"</span>: <span class="string">"ignore"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"no-else-return"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-restricted-syntax"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"import/no-extraneous-dependencies"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-use-before-define"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"jsx-a11y/no-static-element-interactions"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"jsx-a11y/no-noninteractive-element-interactions"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"jsx-a11y/click-events-have-key-events"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"jsx-a11y/anchor-is-valid"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-nested-ternary"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"arrow-body-style"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"linebreak-style"</span>: [<span class="string">"error"</span>, <span class="string">"unix"</span>],</span><br><span class="line">    <span class="attr">"import/extensions"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-bitwise"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-cond-assign"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"import/no-unresolved"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"comma-dangle"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"arrays"</span>: <span class="string">"always-multiline"</span>,</span><br><span class="line">        <span class="attr">"objects"</span>: <span class="string">"always-multiline"</span>,</span><br><span class="line">        <span class="attr">"imports"</span>: <span class="string">"always-multiline"</span>,</span><br><span class="line">        <span class="attr">"exports"</span>: <span class="string">"always-multiline"</span>,</span><br><span class="line">        <span class="attr">"functions"</span>: <span class="string">"ignore"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"object-curly-newline"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"function-paren-newline"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-restricted-globals"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"require-yield"</span>: [<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h3><p>新建.eslintignore文件（ESLint忽略特定的文件或目录）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build<span class="comment">/*.js</span></span><br></pre></td></tr></table></figure><h3 id="编译前置检验"><a href="#编译前置检验" class="headerlink" title="编译前置检验"></a>编译前置检验</h3><p>在执行编译之前去执行eslint-loader检查代码规范，有报错就不执行编译</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、编辑器配置"><a href="#2、编辑器配置" class="headerlink" title="2、编辑器配置"></a>2、编辑器配置</h2><p>EditorConfig包含一个用于定义代码格式的文件和一批编辑器插件，这些插件是让编辑器读取配置文件并以此来格式化代码。</p><h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><p>新建.editorconfig文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># http://editorconfig.org</span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[*]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = <span class="number">2</span></span><br><span class="line">end_of_line = lf</span><br><span class="line">charset = utf<span class="number">-8</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace = <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line">[Makefile]</span><br><span class="line">indent_style = tab</span><br></pre></td></tr></table></figure><h2 id="3、cross-env"><a href="#3、cross-env" class="headerlink" title="3、cross-env"></a>3、cross-env</h2><p>因为windows不支持NODE_ENV=development的设置环境变量的方式，所以使用我们可以cross-env设置跨平台的环境变量的脚本。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add cross-env -D</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "cross-env NODE_ENV=production webpack --config ./build/webpack.config.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以使用 <code>process.env.NODE_ENV</code> 来获取环境变量继续操作了。</p><h2 id="4、代码自动格式化"><a href="#4、代码自动格式化" class="headerlink" title="4、代码自动格式化"></a>4、代码自动格式化</h2><p>使用husky, prettier, eslint在代码提交时自动格式化，并检查代码。</p><ul><li>husky。一个git钩子工具，这里主要用pre-commit钩子。通俗点讲就是husky可以在你commit之前帮你做一些事情。</li><li>prettier。 一个很流行的代码格式化工具，你很容易在编辑器找到实现它的各种插件，像vscode,atom,webstom都可以找到。这里用它在代码提交前做代码格式化。</li><li>eslint。 代码检查工具。eslint也可以负责一部分代码格式检查的工作，让其负责代码错误检查。</li><li>lint-staged。在你提交的文件中，执行自定义的指令。</li></ul><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><h4 id="安装eslint"><a href="#安装eslint" class="headerlink" title="安装eslint"></a>安装eslint</h4><p>如果上面已经安装过了就不用再次安装了，没有安装就按照上面 <code>ESLint规范</code> 步骤安装好。</p><h4 id="安装stylelint"><a href="#安装stylelint" class="headerlink" title="安装stylelint"></a>安装stylelint</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add stylelint stylelint-config-prettier stylelint-config-standard -D</span><br></pre></td></tr></table></figure><p>新建.stylelintrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [&quot;stylelint-config-standard&quot;, &quot;stylelint-config-prettier&quot;],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;selector-pseudo-class-no-unknown&quot;: null,</span><br><span class="line">    &quot;shorthand-property-no-redundant-values&quot;: null,</span><br><span class="line">    &quot;at-rule-empty-line-before&quot;: null,</span><br><span class="line">    &quot;at-rule-name-space-after&quot;: null,</span><br><span class="line">    &quot;comment-empty-line-before&quot;: null,</span><br><span class="line">    &quot;declaration-bang-space-before&quot;: null,</span><br><span class="line">    &quot;declaration-empty-line-before&quot;: null,</span><br><span class="line">    &quot;function-comma-newline-after&quot;: null,</span><br><span class="line">    &quot;function-name-case&quot;: null,</span><br><span class="line">    &quot;function-parentheses-newline-inside&quot;: null,</span><br><span class="line">    &quot;function-max-empty-lines&quot;: null,</span><br><span class="line">    &quot;function-whitespace-after&quot;: null,</span><br><span class="line">    &quot;number-leading-zero&quot;: null,</span><br><span class="line">    &quot;number-no-trailing-zeros&quot;: null,</span><br><span class="line">    &quot;rule-empty-line-before&quot;: null,</span><br><span class="line">    &quot;selector-combinator-space-after&quot;: null,</span><br><span class="line">    &quot;selector-descendant-combinator-no-non-space&quot;: null,</span><br><span class="line">    &quot;selector-list-comma-newline-after&quot;: null,</span><br><span class="line">    &quot;selector-pseudo-element-colon-notation&quot;: null,</span><br><span class="line">    &quot;unit-no-unknown&quot;: null,</span><br><span class="line">    &quot;no-descending-specificity&quot;: null,</span><br><span class="line">    &quot;value-list-max-empty-lines&quot;: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装prettier"><a href="#安装prettier" class="headerlink" title="安装prettier"></a>安装prettier</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add prettier eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure><h4 id="安装husky，lint-staged"><a href="#安装husky，lint-staged" class="headerlink" title="安装husky，lint-staged"></a>安装husky，lint-staged</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add husky lint-staged pretty-quick -D</span><br></pre></td></tr></table></figure><h3 id="prettier配置"><a href="#prettier配置" class="headerlink" title="prettier配置"></a>prettier配置</h3><p>在eslintrc.json修改如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"airbnb"</span>, <span class="string">"prettier"</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建.prettierrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;singleQuote&quot;: true,</span><br><span class="line">  &quot;trailingComma&quot;: &quot;es5&quot;,</span><br><span class="line">  &quot;printWidth&quot;: 100,</span><br><span class="line">  &quot;overrides&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;files&quot;: &quot;.prettierrc&quot;,</span><br><span class="line">      &quot;options&quot;: &#123; &quot;parser&quot;: &quot;json&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置.eslintignore文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build<span class="comment">/*.js</span></span><br></pre></td></tr></table></figure><h3 id="husky钩子配置"><a href="#husky钩子配置" class="headerlink" title="husky钩子配置"></a>husky钩子配置</h3><p>husky会在你提交前，调用pre-commit钩子，执行lint-staged，如果代码不符合prettier配置的规则，会进行格式化；然后再用eslint的规则进行检查，如果有不符合规则且无法自动修复的，就会停止此次提交。如果都通过了就会讲代码添加到stage，然后commit。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    // ...</span><br><span class="line">    "lint-staged": "lint-staged",</span><br><span class="line">    "lint-staged:js": "eslint --ext .js --fix",</span><br><span class="line">    "prettier": "prettier --write ./src/**/**/**/*"</span><br><span class="line">  &#125;,</span><br><span class="line">  "husky": &#123;</span><br><span class="line">    "hooks": &#123;</span><br><span class="line">      "pre-commit": "lint-staged"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "lint-staged": &#123;</span><br><span class="line">    "linters": &#123;</span><br><span class="line">      "**/*.&#123;js,jsx,scss&#125;": [</span><br><span class="line">        "prettier --write",</span><br><span class="line">        <span class="string">"git add"</span></span><br><span class="line">      ],</span><br><span class="line">      "**/*.&#123;js,jsx&#125;": "npm run lint-staged:js",</span><br><span class="line">      "**/*.scss": "stylelint --syntax=scss"</span><br><span class="line">    &#125;,</span><br><span class="line">    "ignore": [</span><br><span class="line">      <span class="string">"**/dist/public/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，我们的react开发环境对于打包、代码规范以及提升开发效率的一些配置我们都具备了，可以开心的写我们的react了。接下来我们就可以把这些配置单独完善成一个库，通过我们的 cli 脚手架拉取直接基于它来开发，Let’s go脚手架开发…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webpack 4&lt;/li&gt;
&lt;li&gt;Babel 7&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇主要使用针对代码
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>动手搭建react开发环境二</title>
    <link href="http://yoursite.com/2019/07/12/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/07/12/动手搭建react开发环境二/</id>
    <published>2019-07-12T01:31:10.000Z</published>
    <updated>2019-07-22T07:21:11.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>webpack 4</li><li>Babel 7</li></ul><blockquote><p>本篇主要使用针对上篇的webpack配置进行优化</p></blockquote><h2 id="webpack优化"><a href="#webpack优化" class="headerlink" title="webpack优化"></a>webpack优化</h2><h3 id="1、抽取css（MiniCssExtractPlugin）"><a href="#1、抽取css（MiniCssExtractPlugin）" class="headerlink" title="1、抽取css（MiniCssExtractPlugin）"></a>1、抽取css（MiniCssExtractPlugin）</h3><p>为每个引入 CSS 的 JS 文件创建一个 CSS 文件，提高首页加载速度</p><ul><li>把 style-loader 替换成 MiniCssExtractPlugin.loader</li><li>新增 plugins</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 'style-loader',</span></span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="comment">// ...同上</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].[hash].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'[id].[hash].css'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、压缩CSS（OptimizeCssAssetsWebpackPlugin）"><a href="#2、压缩CSS（OptimizeCssAssetsWebpackPlugin）" class="headerlink" title="2、压缩CSS（OptimizeCssAssetsWebpackPlugin）"></a>2、压缩CSS（OptimizeCssAssetsWebpackPlugin）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、压缩JS"><a href="#3、压缩JS" class="headerlink" title="3、压缩JS"></a>3、压缩JS</h3><p>webpack 4只要在生产模式下， 代码就会自动压缩<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: <span class="string">'production'</span>,</span><br></pre></td></tr></table></figure></p><h3 id="4、代码分割（SplitChunksPlugin）"><a href="#4、代码分割（SplitChunksPlugin）" class="headerlink" title="4、代码分割（SplitChunksPlugin）"></a>4、代码分割（SplitChunksPlugin）</h3><p>代码分割，单独打包，可以有效避免所有页面只生成一个js文件，首屏加载很慢的情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span>,   <span class="comment">// include all types of chunks</span></span><br><span class="line">      <span class="comment">// minSize: 30000,   // 引入的库大于30kb时才会做代码分割</span></span><br><span class="line">      <span class="comment">// minChunks: 1,     // 一个模块至少被用了1次才会被分割</span></span><br><span class="line">      <span class="comment">// maxAsyncRequests: 5,     // 同时异步加载的模块数最多是5个，如果超过5个则不做代码分割</span></span><br><span class="line">      <span class="comment">// maxInitialRequests: 3,   // 入口文件进行加载时，引入的库最多分割出3个js文件</span></span><br><span class="line">      <span class="comment">// automaticNameDelimiter: '~',  // 生成文件名的文件链接符</span></span><br><span class="line">      <span class="comment">// name: true,   // 开启自定义名称效果</span></span><br><span class="line">      <span class="comment">// cacheGroups: &#123;  // 判断分割出的代码放到那里去</span></span><br><span class="line">      <span class="comment">//   vendors: &#123;   // 配合chunks：‘all’使用，表示如果引入的库是在node-modules中，那就会把这个库分割出来并起名为vendors.js</span></span><br><span class="line">      <span class="comment">//     test: /[\/]node_modules[\/]/,</span></span><br><span class="line">      <span class="comment">//     priority: -10,</span></span><br><span class="line">      <span class="comment">//     filename: 'vendors.js'</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">//   default: &#123;  // 为非node-modules库中分割出的代码设置默认存放名称</span></span><br><span class="line">      <span class="comment">//     priority: -20,</span></span><br><span class="line">      <span class="comment">//     reuseExistingChunk: true, // 避免被重复打包分割</span></span><br><span class="line">      <span class="comment">//     filename: 'common.js'</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5、配置全局变量"><a href="#5、配置全局变量" class="headerlink" title="5、配置全局变量"></a>5、配置全局变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'development'</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔥Tip1 问题：当用 DefinePlugin 来配置全局变量时，只给依赖中注入了环境变量，也就是src文件夹下面的和依赖的模块。当我们在webpack配置文件中去取 process.env.NODE_ENV 依然是 undefined。</p><blockquote><p>解决：在package.json命令中注入<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server NODE_ENV=development --config ./build/webpack.config.js",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="6、CSS-Tree-Shaking"><a href="#6、CSS-Tree-Shaking" class="headerlink" title="6、CSS Tree Shaking"></a>6、CSS Tree Shaking</h3><p>去除项目代码中用不到的 CSS 样式，仅保留被使用的样式代码</p><p>🔥Tip2 问题：当使用 CSS Tree Shaking 的时候，需要把 css-modules 关闭，不然 css 会被全部清除掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add glob-all purify-css purifycss-webpack -D</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PurifyCSS = <span class="built_in">require</span>(<span class="string">"purifycss-webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">"glob-all"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> PurifyCSS(&#123;</span><br><span class="line">      paths: glob.sync([</span><br><span class="line">        <span class="comment">// 要做CSS Tree Shaking的路径文件</span></span><br><span class="line">        path.resolve(__dirname, <span class="string">"../public/*.html"</span>), <span class="comment">// 请注意，我们同样需要对 html 文件进行 tree shaking</span></span><br><span class="line">        path.resolve(__dirname, <span class="string">"../src/*.js"</span>)</span><br><span class="line">      ])</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、JS-Tree-Shaking"><a href="#7、JS-Tree-Shaking" class="headerlink" title="7、JS Tree Shaking"></a>7、JS Tree Shaking</h3><p>清除到代码中无用的js代码，只支持import方式引入，不支持commonjs的方式引入</p><p>webpack 4只要在生产模式下， tree shaking就会生效。</p><h3 id="8、resolve（解析）"><a href="#8、resolve（解析）" class="headerlink" title="8、resolve（解析）"></a>8、resolve（解析）</h3><p>能设置模块如何被解析。</p><ul><li>extension: 指定extension之后可以不用在require或是import的时候加文件扩展名,会依次尝试添加扩展名进行匹配</li><li>alias: 配置别名可以加快webpack查找模块的速度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: path.join(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、模块热替换HMR"><a href="#9、模块热替换HMR" class="headerlink" title="9、模块热替换HMR"></a>9、模块热替换HMR</h3><p>模块热替换也称为HMR，代码更新时只会更新被修改部分都显示。有如下有点</p><ul><li>针对于样式调试更加方便</li><li>只会更新被修改代码的那部分显示，提升开发效率</li><li>保留在完全重新加载页面时丢失的应用程序状态。</li></ul><p>这里我们采用Node.js的方式实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn add express webpack-dev-middleware webpack-hot-middleware react-hot-loader cross-env -D</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">touch dev-server.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dev-server.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-hot-middleware"</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> complier = webpack(config);   <span class="comment">// 编译器，编译器执行一次就会重新打包一下代码</span></span><br><span class="line"><span class="keyword">const</span> app = express();  <span class="comment">// 生成一个实例</span></span><br><span class="line"><span class="keyword">const</span> DIST_DIR = path.resolve(__dirname, <span class="string">'../'</span>, <span class="string">'dist'</span>);  <span class="comment">// 设置静态访问文件路径</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="built_in">parseInt</span>(process.env.PORT, <span class="number">10</span>) || <span class="number">8586</span>;</span><br><span class="line"><span class="keyword">const</span> host = process.env.HOST || <span class="string">'localhost'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> devMiddleware = webpackDevMiddleware(complier, &#123;</span><br><span class="line">  quiet: <span class="literal">true</span>,</span><br><span class="line">  noInfo: <span class="literal">true</span>,</span><br><span class="line">  stats: <span class="string">'minimal'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> hotMiddleware = webpackHotMiddleware(complier, &#123;</span><br><span class="line">  log: <span class="literal">false</span>,</span><br><span class="line">  heartbeat: <span class="number">2000</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.use(devMiddleware)</span><br><span class="line">app.use(hotMiddleware)</span><br><span class="line"><span class="comment">// 设置访问静态文件的路径</span></span><br><span class="line">app.use(express.static(DIST_DIR))</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`App running at: http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;)  <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><p>修改webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: [</span><br><span class="line">      <span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>,</span><br><span class="line">      <span class="string">'./src/index.js'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          isDev ? <span class="string">'style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: &#123;</span><br><span class="line">                localIdentName: <span class="string">'[local]_[hash:base64:5]'</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              sourceMap: !isDev &amp;&amp; <span class="literal">true</span>, <span class="comment">// 开发时刷新会导致闪屏（样式加载慢一步）</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'postcss-loader'</span>, <span class="comment">// 使用 postcss 为 css 加上浏览器前缀</span></span><br><span class="line">          <span class="string">'sass-loader'</span>, <span class="comment">// 编译scss</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(), <span class="comment">// 用于启动HMR时可以显示模块的相对路径</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">// 开启HMR(热替换功能,替换更新部分,不重载页面！) 相当于在命令行加 --hot</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改入口文件index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppContainer &#125; <span class="keyword">from</span> <span class="string">'react-hot-loader'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;AppContainer&gt;</span><br><span class="line">      &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;Router /&gt;</span><br><span class="line">      &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>AppContainer&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line">render();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 热更新 */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./router/index.js'</span>, () =&gt; &#123;</span><br><span class="line">    render();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改script命令行<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"start": "cross-env NODE_ENV=development node ./build/dev-server.js",</span><br></pre></td></tr></table></figure></p><p>ok，当我们修改代码时，页面就不需要刷新了，而是直接更新变化的部分。</p><h3 id="10、BundleAnalyzerPlugin"><a href="#10、BundleAnalyzerPlugin" class="headerlink" title="10、BundleAnalyzerPlugin"></a>10、BundleAnalyzerPlugin</h3><p>使用交互式可缩放树形图可视化webpack输出文件的大小，可以方便我们针对代码依赖的大小进行优化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">      analyzerMode: <span class="string">'server'</span>,</span><br><span class="line">      analyzerHost: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">      analyzerPort: <span class="number">8889</span>,</span><br><span class="line">      reportFilename: <span class="string">'report.html'</span>,</span><br><span class="line">      defaultSizes: <span class="string">'parsed'</span>,</span><br><span class="line">      openAnalyzer: <span class="literal">true</span>,</span><br><span class="line">      generateStatsFile: <span class="literal">false</span>,</span><br><span class="line">      statsFilename: <span class="string">'stats.json'</span>,</span><br><span class="line">      statsOptions: <span class="literal">null</span>,</span><br><span class="line">      logLevel: <span class="string">'info'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script"</span>: &#123;</span><br><span class="line">    <span class="attr">"analyz"</span>: <span class="string">"cross-env NODE_ENV=production npm_config_report=true npm run build"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack分离配置文件"><a href="#webpack分离配置文件" class="headerlink" title="webpack分离配置文件"></a>webpack分离配置文件</h2><p>针对开发环境和发布环境配置对应的webpack，公共的部分提取出来，再使用 webpack-merge 来将不同环境下的配置合并起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">touch webpack.base.conf.js</span><br><span class="line">touch webpack.dev.conf.js</span><br><span class="line">touch webpack.prd.conf.js</span><br><span class="line"> </span><br><span class="line">yarn add webpack-merge -D</span><br></pre></td></tr></table></figure><h3 id="1、提取公共配置"><a href="#1、提取公共配置" class="headerlink" title="1、提取公共配置"></a>1、提取公共配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">'./src/index.js'</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// ...同webpack.config.js的modules</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 最终创建的文件名</span></span><br><span class="line">      template: path.join(__dirname, <span class="string">'../public/index.html'</span>), <span class="comment">// 指定模板路径</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: path.join(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      <span class="comment">// 代码分割按需加载、提取公共代码</span></span><br><span class="line">      chunks: <span class="string">'all'</span>, <span class="comment">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  performance: <span class="literal">false</span>, <span class="comment">// 关闭性能提示</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2、配置开发环境"><a href="#2、配置开发环境" class="headerlink" title="2、配置开发环境"></a>2、配置开发环境</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.conf.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devtool: <span class="string">'cheap-module-eval-soure-map'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">//实现刷新浏览器webpack-hot-middleware/client?noInfo=true&amp;reload=true 是必填的</span></span><br><span class="line">    main: [</span><br><span class="line">      <span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>,</span><br><span class="line">      <span class="string">'./src/index.js'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    filename: <span class="string">"bundle.[name].[hash].js"</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="comment">// new webpack.DefinePlugin(&#123;</span></span><br><span class="line">    <span class="comment">// 'process.env.NODE_ENV': JSON.stringify('development'),</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    contentBase: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">8586</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// 该选项的作用所有的404都连接到index.html</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 代理到后端的服务地址</span></span><br><span class="line">      <span class="comment">// "/api": "http://localhost:3000"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3、配置发布环境"><a href="#3、配置发布环境" class="headerlink" title="3、配置发布环境"></a>3、配置发布环境</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prd.conf.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'cheap-module-source-map'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    publicPath: <span class="string">'/'</span>, <span class="comment">// 打包路径</span></span><br><span class="line">    <span class="comment">// 输出目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    filename: <span class="string">'bundle.[name].[hash].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    usedExports: <span class="literal">true</span>,</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span>, <span class="comment">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        <span class="comment">// 公共代码打包分组配置</span></span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          name: <span class="string">'vendors'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].[hash].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'[id].[hash].css'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// new webpack.DefinePlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   'process.env.NODE_ENV': JSON.stringify('production'),</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4、修改script命令行"><a href="#4、修改script命令行" class="headerlink" title="4、修改script命令行"></a>4、修改script命令行</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"start": "cross-env NODE_ENV=development node ./build/dev-server.js",</span><br><span class="line">"build": "cross-env NODE_ENV=production webpack --config ./build/webpack.prod.conf.js",</span><br></pre></td></tr></table></figure><p>写到这里，一个基本的React开发环境也就搭起来了，接下来就可以针对代码或者开发效率进行优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webpack 4&lt;/li&gt;
&lt;li&gt;Babel 7&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇主要使用针对上篇
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>动手搭建react开发环境一</title>
    <link href="http://yoursite.com/2019/07/11/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80/"/>
    <id>http://yoursite.com/2019/07/11/动手搭建react开发环境一/</id>
    <published>2019-07-11T01:42:50.000Z</published>
    <updated>2019-07-18T07:08:50.704Z</updated>
    
    <content type="html"><![CDATA[<p>前言：接触webpack从在学校的那会起，也一直在使用它，用的都是别人封装好的，偶尔去修改一点点配置，也没有真正自己从零开始配置一个脚手架，接下来几篇将记录我对webpack以及开发中提升效率的配置，其中遇到的一些坑也会提示出来。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>webpack 4</li><li>Babel 7</li></ul><blockquote><p>本篇主要使用webpack搭建基础的React环境</p></blockquote><h3 id="快速浏览："><a href="#快速浏览：" class="headerlink" title="快速浏览："></a>快速浏览：</h3><ul><li><a href="http://hjingren.cn/2019/07/12/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BA%8C/" target="_blank" rel="noopener">webpack优化篇</a></li></ul><h2 id="webpack核心概念"><a href="#webpack核心概念" class="headerlink" title="webpack核心概念"></a>webpack核心概念</h2><ul><li>entry: 入口起点</li><li>output: 输出</li><li>module: 模块，webpack中一切皆是模块</li><li>loader: 转换工具，webpack 只能理解 JavaScript 和 JSON 文件。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效模块，以供应用程序使用，以及被添加到依赖图中</li><li>plugin: 扩展插件，loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情，比如：打包优化，资源管理，注入环境变量等等</li><li>mode: webpac的打包环境[development, production]</li><li>chunk: 代码库，一个chunk由十多个模块组合而成，用于代码合并与分割</li></ul><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-template</span><br><span class="line">cd webpack-template</span><br><span class="line">mkdir src public build dist</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="2、安装webpack"><a href="#2、安装webpack" class="headerlink" title="2、安装webpack"></a>2、安装webpack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli -D</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">touch webpack.config.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的webpack配置</span></span><br><span class="line"><span class="comment">// webpack.config.js初始化内容</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,  <span class="comment">// 指定环境</span></span><br><span class="line">  entry: [<span class="string">"./src/index.js"</span>],  <span class="comment">// 打包入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,  <span class="comment">// 打包输出到 dist/bundle.js.</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;&#125;,</span><br><span class="line">  plugins:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package.json更改<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack --config ./build/webpack.config.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="3、HtmlWebpackPlugin"><a href="#3、HtmlWebpackPlugin" class="headerlink" title="3、HtmlWebpackPlugin"></a>3、HtmlWebpackPlugin</h3><p>将打包的js自动插入到 index.html 里面去。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin -D</span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">touch index.html</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 最终创建的文件名</span></span><br><span class="line">      template: path.join(__dirname, <span class="string">'../public/index.html'</span>), <span class="comment">// 指定模板路径</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、配置转义ES6-ES7-JSX"><a href="#4、配置转义ES6-ES7-JSX" class="headerlink" title="4、配置转义ES6/ES7/JSX"></a>4、配置转义ES6/ES7/JSX</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// @babel/polyfill: 模拟一个es6+的环境,提供es6方法和函数的垫片</span><br><span class="line">// core-js@2：@babel/preset-env实现按需引入polyfill时，声明core-js版本</span><br><span class="line">yarn add @babel/polyfill core-js@2</span><br><span class="line"> </span><br><span class="line">// babel-loader和@babel/core是核心模块</span><br><span class="line">// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript</span><br><span class="line">// @babel/preset-react 转换JSX</span><br><span class="line">yarn add babel-loader @babel/core @babel/preset-env @babel/preset-react @babel/plugin-proposal-class-properties -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建.babelrc文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>, <span class="comment">// 将es6的语法翻译成es5语法</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"useBuiltIns"</span>: <span class="string">"usage"</span>, <span class="comment">// 做@babel/polyfill补充时，按需补充，用到什么才补充什么</span></span><br><span class="line">        <span class="string">"corejs"</span>: <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"@babel/preset-react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-class-properties"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>🔥Tip1 问题：Support for the experimental syntax ‘classProperties’ isn’t currently enabled</p><blockquote><p>yarn add @babel/plugin-proposal-class-properties 并在plugins中配置</p></blockquote><p>🔥Tip2 提示：useBuiltIns 和 transform-runtime 不能同时使用，如果使用transform-runtime就不要配useBuiltInsor，一般独立的类库项目才用transform-runtime</p><h3 id="5、配置转义Typescript"><a href="#5、配置转义Typescript" class="headerlink" title="5、配置转义Typescript"></a>5、配置转义Typescript</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add typescript ts-loader -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">"ts-loader"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建tsconfig.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"rootDir"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"dist"</span>,</span><br><span class="line">    "module": "esnext", // 模块引入的方式</span><br><span class="line">    "target": "es6", // 转换为es6</span><br><span class="line">    "lib": ["dom", "es7"],</span><br><span class="line">    "jsx": "preserve",</span><br><span class="line">    "moduleResolution": "node",</span><br><span class="line">    "sourceMap": true,</span><br><span class="line">    "allowJs": true, // 在typescript中允许引入js文件</span><br><span class="line">    "forceConsistentCasingInFileNames": true,</span><br><span class="line">    "noImplicitReturns": true,</span><br><span class="line">    "noImplicitThis": true,</span><br><span class="line">    "noImplicitAny": true,</span><br><span class="line">    "noUnusedLocals": true,</span><br><span class="line">    "noUnusedParameters": true,</span><br><span class="line">    "strictNullChecks": true,</span><br><span class="line">    "importHelpers": true,</span><br><span class="line">    "suppressImplicitAnyIndexErrors": true,</span><br><span class="line">    "experimentalDecorators": true,</span><br><span class="line">    "downlevelIteration": true,</span><br><span class="line">    "allowSyntheticDefaultImports": true,</span><br><span class="line">    "paths": &#123;</span><br><span class="line">      "@/*": ["src/*"]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "exclude": ["node_modules", "dist", "build", "mock"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6、CleanWebpackPlugin"><a href="#6、CleanWebpackPlugin" class="headerlink" title="6、CleanWebpackPlugin"></a>6、CleanWebpackPlugin</h3><p>清除 dist 目录下旧版本文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add clean-webpack-plugin -D</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="comment">//...同上</span></span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、source-map"><a href="#7、source-map" class="headerlink" title="7、source-map"></a>7、source-map</h3><p>可以帮助我们定位到错误信息位置的文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devtool: <span class="string">"cheap-module-eval-source-map"</span>,  <span class="comment">// development</span></span><br><span class="line">devtool: <span class="string">"cheap-module-source-map"</span>,  <span class="comment">// production</span></span><br></pre></td></tr></table></figure></p><h3 id="8、WebpackDevServer"><a href="#8、WebpackDevServer" class="headerlink" title="8、WebpackDevServer"></a>8、WebpackDevServer</h3><p>webpack在本地为搭建了一个静态文件服务器，实时打包重加载修改的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    contentBase: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">8586</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">//  该选项的作用所有的404都连接到index.html</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 代理到后端的服务地址</span></span><br><span class="line">      <span class="comment">// "/api": "http://localhost:3000"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改package.json命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --config ./build/webpack.config.js",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="9、编译css和scss并使用css-modules"><a href="#9、编译css和scss并使用css-modules" class="headerlink" title="9、编译css和scss并使用css-modules"></a>9、编译css和scss并使用css-modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add css-loader style-loader sass-loader node-sass -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: &#123;</span><br><span class="line">                localIdentName: <span class="string">'[local]_[hash:base64:5]'</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">// sourceMap: !isDev &amp;&amp; true,</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'sass-loader'</span>, <span class="comment">// 编译scss</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔥Tip3 问题：当在 css-loader 配置上 sourceMap 时，配合热加载样式会闪屏</p><blockquote><p>sourceMap: !isDev &amp;&amp; true,</p></blockquote><h3 id="10、集成postcss"><a href="#10、集成postcss" class="headerlink" title="10、集成postcss"></a>10、集成postcss</h3><p>为css某些特性自动增加前缀，并做一些兼容处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">//...同上</span></span><br><span class="line">          <span class="string">'postcss-loader'</span>, <span class="comment">// 使用 postcss 为 css 加上浏览器前缀</span></span><br><span class="line">          <span class="string">'sass-loader'</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建postcss.config.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-preset-env'</span>: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建.browserlistrc文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>% <span class="keyword">in</span> CN</span><br><span class="line">android &gt;= <span class="number">4.4</span></span><br><span class="line">ios &gt;= <span class="number">8</span></span><br><span class="line">not ie &lt;= <span class="number">11</span></span><br></pre></td></tr></table></figure></p><h3 id="11、图片处理"><a href="#11、图片处理" class="headerlink" title="11、图片处理"></a>11、图片处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add file-loader url-loader -D</span><br><span class="line"><span class="comment"># file-loader 解决css等文件中引入图片路径的问题</span></span><br><span class="line"><span class="comment"># url-loader 当图片较小的时候会把图片BASE64编码，大于limit参数的时候还是使用file-loader 进行拷贝</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            outputPath: <span class="string">'images/'</span>,</span><br><span class="line">            limit: <span class="number">10</span> * <span class="number">1024</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12、字体文件处理"><a href="#12、字体文件处理" class="headerlink" title="12、字体文件处理"></a>12、字体文件处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">'[name]-[hash:5].min.[ext]'</span>,</span><br><span class="line">              limit: <span class="number">5000</span>,</span><br><span class="line">              publicPath: <span class="string">'fonts/'</span>,</span><br><span class="line">              outputPath: <span class="string">'fonts/'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，webpack的基本配置我们已经准备的差不多了，赶紧写点react来试试水。</p><h2 id="测试React环境"><a href="#测试React环境" class="headerlink" title="测试React环境"></a>测试React环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react react-dom react-router react-router-dom</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        hello word~</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>执行 <code>npm start</code> ，如果页面上能正常显示 <code>hello word~</code> 那表示我们的webapck基础配置成功。</p><p>第一篇webpack基础配置到此结束了，下一篇对webpack进行优化配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：接触webpack从在学校的那会起，也一直在使用它，用的都是别人封装好的，偶尔去修改一点点配置，也没有真正自己从零开始配置一个脚手架，接下来几篇将记录我对webpack以及开发中提升效率的配置，其中遇到的一些坑也会提示出来。&lt;/p&gt;
&lt;h2 id=&quot;版本&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Nginx下升级https</title>
    <link href="http://yoursite.com/2019/06/11/Nginx%E4%B8%8B%E5%8D%87%E7%BA%A7https/"/>
    <id>http://yoursite.com/2019/06/11/Nginx下升级https/</id>
    <published>2019-06-11T07:26:49.000Z</published>
    <updated>2019-06-11T07:33:57.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="购买证书"><a href="#购买证书" class="headerlink" title="购买证书"></a>购买证书</h2><p>可以去阿里云的云盾证书服务<a href="https://common-buy.aliyun.com/?spm=5176.2020520163.cas.3.75c3lKQ2lKQ27E&amp;commodityCode=cas#/buy" target="_blank" rel="noopener">购买</a></p><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><p>在证书控制台下载 Nginx 版本证书。下载到本地的压缩文件包解压后包含：</p><ul><li><strong>.pem</strong>文件：证书文件</li><li><strong>.key</strong>文件：证书的私钥文件（申请证书时如果没有选择<strong>自动创建CSR</strong>，则没有该文件）</li></ul><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>1、在 Nginx 的安装目录下创建 cert 目录，并且将下载的全部文件拷贝到 cert 目录中，如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到 cert 目录下。</p><p>2、打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;   <span class="comment">#开启gzip</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>; <span class="comment">#低于1kb的资源不压缩</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">3</span>; <span class="comment">#压缩级别【1-9】，越大压缩率越高，同时消耗cpu资源也越多，建议设置在4左右。</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/javascript text/xml text/css;  <span class="comment">#需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片，下面会讲为什么。</span></span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>;  <span class="comment">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span></span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;  <span class="comment">#是否添加“Vary: Accept-Encoding”响应头</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default backlog=<span class="number">2048</span>; <span class="comment">#配置http可用</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl; <span class="comment">#配置https</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      ../cert/hzzly.pem; <span class="comment">#配置证书文件</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  ../cert/hzzly.key; <span class="comment">#配置私钥文件</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /home/hzzly;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># location ^~ /apis/ &#123;</span></span><br><span class="line">        <span class="comment">#     proxy_set_header Host $host;</span></span><br><span class="line">        <span class="comment">#     proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">        <span class="comment">#     proxy_set_header X-Forwarded-Server $host;</span></span><br><span class="line">        <span class="comment">#     # 匹配任何以 /apis/ 开始的请求，并停止匹配 其它location</span></span><br><span class="line">        <span class="comment">#     proxy_pass http://xxxxxxxxxx/;</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># location ^~ /assets/ &#123;</span></span><br><span class="line">        <span class="comment">#     gzip_static on;</span></span><br><span class="line">        <span class="comment">#     expires max;</span></span><br><span class="line">        <span class="comment">#     add_header Cache-Control public;</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、重启 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ ./nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="错误详解"><a href="#错误详解" class="headerlink" title="错误详解"></a>错误详解</h2><h3 id="1、Nginx如果未开启SSL模块，配置Https时提示错误"><a href="#1、Nginx如果未开启SSL模块，配置Https时提示错误" class="headerlink" title="1、Nginx如果未开启SSL模块，配置Https时提示错误"></a>1、Nginx如果未开启SSL模块，配置Https时提示错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] the <span class="string">"ssl"</span> parameter requires ngx_http_ssl_module <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><p><strong>Nginx开启SSL模块</strong></p><p>切换到源码包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.16.0</span><br></pre></td></tr></table></figure><p>修改新的configure参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>配置完成后，运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make  //这里不要进行make install，否则就是覆盖安装</span><br></pre></td></tr></table></figure><p>备份原有已安装好的nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br></pre></td></tr></table></figure><p>将刚刚编译好的nginx覆盖掉原有的nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ./objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin/</span><br></pre></td></tr></table></figure><p>重启 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ ./nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;购买证书&quot;&gt;&lt;a href=&quot;#购买证书&quot; class=&quot;headerlink&quot; title=&quot;购买证书&quot;&gt;&lt;/a&gt;购买证书&lt;/h2&gt;&lt;p&gt;可以去阿里云的云盾证书服务&lt;a href=&quot;https://common-buy.aliyun.com/?spm=5176.
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>图解词法作用域与作用域链</title>
    <link href="http://yoursite.com/2019/03/04/%E5%9B%BE%E8%A7%A3%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>http://yoursite.com/2019/03/04/图解词法作用域与作用域链/</id>
    <published>2019-03-04T07:53:11.000Z</published>
    <updated>2019-11-06T06:11:57.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p>作用域是指程序源代码中定义变量的区域。</p><p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p><p>JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。</p><p>想了解更多关于作用域的问题推荐阅读《你不知道的JavaScript上卷》第一章（或第一部分），从编译原理的角度说明什么是作用域。概括的说作用域就是一套设计良好的规则来存储变量，并且之后可以方便地找到这些变量。</p></blockquote><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>在你不知道的javascript上卷中是这样定义的：<strong>词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变(大部分情况下是这样的)。</strong></p><p>在JS中词法作用域的规则：</p><blockquote><ul><li>函数允许访问函数外部的数据</li><li>整个代码结构中只有函数可以限定作用域</li><li>作用规则首先使用提升规则分析</li><li>如果当前作用域中有了名字了，就不考虑外面的名字</li></ul></blockquote><p>栗1：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>栗2：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>只有函数才能制造作用域结构，那么只要是代码，至少有一个作用域，即全局作用域。</p><p>凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域，那么将这样的所有作用域列出来，可以有一个结构：函数内指向函数外的链式结构。</p><p>以上面栗2：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><ul><li>全局作用域，有三个标识符：foo、bar、a</li><li>bar 所创建的作用域，其中有一个标识符：a</li></ul><p>作用域是由代码写在哪里决定的，并且是逐级包含的。</p><p>我们用级链来表示一下以上代码块：</p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/scope/scope1.png" alt="scope1"></p><p>从图中我们可以看到：函数foo和bar以及变量 a=2， 在1级链，而bar下又可以展开2级链，2级链上有a=3。程序bar()调用进入中间2级链，而bar中又调用了foo函数，此时程序进入foo的作用域链，按照向上查找的原则，程序会从这一条链向上查找，首先2级链没有a，向上到达1级链，刚好1级链上有a=2，所以就直接使用2，程序最后的结果就是打印2。</p><p>所以无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">《JavaScript深入之词法作用域和动态作用域》</a>思考题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure></p><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/scope/scope2.png" alt="scope2"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;作用域是指程序源代码中定义变量的区域。&lt;/p&gt;
&lt;p&gt;作用域规定了如何查找变量，也就是确定当前执行代码对变
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>gitflow基本操作</title>
    <link href="http://yoursite.com/2019/03/03/gitflow%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/03/03/gitflow基本操作/</id>
    <published>2019-03-03T15:34:28.000Z</published>
    <updated>2019-11-06T06:13:44.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：在多组员，多项目等环境进行协同工作时，如果没有统一规范、统一流程，则会导致额外的工作量，甚至会做无用功。所以要减少版本冲突，减轻不必要的工作，就需要规范化的工作流程，本文就gitflow作简要的命令操作。</p></blockquote><h2 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h2><blockquote><p>master 只负责管理发布的状态。在提交时使用标签记录发布版本号。<br>develop 针对发布的日常开发分支。刚才我们已经讲解过有合并分支的功用。</p></blockquote><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-workflow-1.png" alt="gitflow"></p><h2 id="开发分支"><a href="#开发分支" class="headerlink" title="开发分支"></a>开发分支</h2><h3 id="Git创建Develop分支的命令："><a href="#Git创建Develop分支的命令：" class="headerlink" title="Git创建Develop分支的命令："></a>Git创建Develop分支的命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop master</span><br></pre></td></tr></table></figure><h3 id="将Develop分支发布到Master分支的命令："><a href="#将Develop分支发布到Master分支的命令：" class="headerlink" title="将Develop分支发布到Master分支的命令："></a>将Develop分支发布到Master分支的命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到Master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 对Develop分支进行合并(使用了--no-ff参数，生成一个新的节点提交)</span></span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure><h2 id="临时性分支"><a href="#临时性分支" class="headerlink" title="临时性分支"></a>临时性分支</h2><blockquote><p>功能（feature）分支<br>预发布（release）分支<br>修补bug（fixbug）分支</p></blockquote><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-workflow-2.png" alt="gitflow"></p><h2 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h2><h3 id="创建一个功能分支："><a href="#创建一个功能分支：" class="headerlink" title="创建一个功能分支："></a>创建一个功能分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-x develop</span><br></pre></td></tr></table></figure><h3 id="开发完成后，将功能分支合并到develop分支："><a href="#开发完成后，将功能分支合并到develop分支：" class="headerlink" title="开发完成后，将功能分支合并到develop分支："></a>开发完成后，将功能分支合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure><h3 id="删除feature分支："><a href="#删除feature分支：" class="headerlink" title="删除feature分支："></a>删除feature分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-x</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete feature-x</span><br></pre></td></tr></table></figure><h2 id="预发布分支"><a href="#预发布分支" class="headerlink" title="预发布分支"></a>预发布分支</h2><h3 id="创建一个预发布分支："><a href="#创建一个预发布分支：" class="headerlink" title="创建一个预发布分支："></a>创建一个预发布分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-1.2 develop</span><br></pre></td></tr></table></figure><h3 id="确认没有问题后，合并到master分支："><a href="#确认没有问题后，合并到master分支：" class="headerlink" title="确认没有问题后，合并到master分支："></a>确认没有问题后，合并到master分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-1.2</span><br><span class="line"><span class="comment"># 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a 1.2</span><br></pre></td></tr></table></figure><h3 id="再合并到develop分支："><a href="#再合并到develop分支：" class="headerlink" title="再合并到develop分支："></a>再合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure><h3 id="最后，删除预发布分支："><a href="#最后，删除预发布分支：" class="headerlink" title="最后，删除预发布分支："></a>最后，删除预发布分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d release-1.2</span><br></pre></td></tr></table></figure><h2 id="修补bug分支"><a href="#修补bug分支" class="headerlink" title="修补bug分支"></a>修补bug分支</h2><h3 id="创建一个修补bug分支："><a href="#创建一个修补bug分支：" class="headerlink" title="创建一个修补bug分支："></a>创建一个修补bug分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b fixbug-0.1 master</span><br></pre></td></tr></table></figure><h3 id="修补结束后，合并到master分支："><a href="#修补结束后，合并到master分支：" class="headerlink" title="修补结束后，合并到master分支："></a>修补结束后，合并到master分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br><span class="line"><span class="comment"># 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a 0.1.1</span><br></pre></td></tr></table></figure><h3 id="再合并到develop分支：-1"><a href="#再合并到develop分支：-1" class="headerlink" title="再合并到develop分支："></a>再合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br></pre></td></tr></table></figure><h3 id="最后，删除修补bug分支："><a href="#最后，删除修补bug分支：" class="headerlink" title="最后，删除修补bug分支："></a>最后，删除修补bug分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d fixbug-0.1</span><br></pre></td></tr></table></figure><h2 id="取消刚才的合并merge"><a href="#取消刚才的合并merge" class="headerlink" title="取消刚才的合并merge"></a>取消刚才的合并merge</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~</span><br></pre></td></tr></table></figure><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rebase 合并</span></span><br><span class="line">git checkout issue3</span><br><span class="line">git rebase master</span><br><span class="line"><span class="comment"># master 合并</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge issue3</span><br></pre></td></tr></table></figure><h3 id="修改冲突后的提交"><a href="#修改冲突后的提交" class="headerlink" title="修改冲突后的提交"></a>修改冲突后的提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="取消rebase"><a href="#取消rebase" class="headerlink" title="取消rebase"></a>取消rebase</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><h2 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h2><h3 id="commit-回退"><a href="#commit-回退" class="headerlink" title="commit 回退"></a>commit 回退</h3><blockquote><p>commit log</p></blockquote><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-commit-log.png" alt="git-commit-log"></p><blockquote><p>commit reset</p></blockquote><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-commit-reset.png" alt="git-commit-reset"></p><h3 id="push-回退"><a href="#push-回退" class="headerlink" title="push 回退"></a>push 回退</h3><blockquote><p>push log</p></blockquote><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-push-log.png" alt="git-push-log"></p><blockquote><p>push reset</p></blockquote><p><img src="https://hzzlyxx.oss-cn-beijing.aliyuncs.com/blog/git/git-push-reset.png" alt="git-push-reset"></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="添加轻标签"><a href="#添加轻标签" class="headerlink" title="添加轻标签"></a>添加轻标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag v2.0</span><br><span class="line"><span class="comment"># 显示标签列表</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 显示标签列表包含标签资料的历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --decorate</span><br></pre></td></tr></table></figure><h2 id="添加注解标签"><a href="#添加注解标签" class="headerlink" title="添加注解标签"></a>添加注解标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v3.0</span><br><span class="line">// 或</span><br><span class="line">git tag -am <span class="string">"注解"</span> v3.0</span><br><span class="line"><span class="comment"># 显示标签的列表和注解</span></span><br><span class="line">git tag -n</span><br></pre></td></tr></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v2.0</span><br><span class="line">git tag -d v3.0</span><br></pre></td></tr></table></figure><h2 id="推送标签到远程"><a href="#推送标签到远程" class="headerlink" title="推送标签到远程"></a>推送标签到远程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.5</span><br></pre></td></tr></table></figure><h2 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="Git远程仓库地址变更"><a href="#Git远程仓库地址变更" class="headerlink" title="Git远程仓库地址变更"></a>Git远程仓库地址变更</h2><h3 id="查看所有远程仓库"><a href="#查看所有远程仓库" class="headerlink" title="查看所有远程仓库"></a>查看所有远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h3 id="删除远程仓库地址"><a href="#删除远程仓库地址" class="headerlink" title="删除远程仓库地址"></a>删除远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><h3 id="修改变更后的远程仓库地址"><a href="#修改变更后的远程仓库地址" class="headerlink" title="修改变更后的远程仓库地址"></a>修改变更后的远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin http://xxx.git</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">《Git分支管理策略–阮一峰》</a></li><li><a href="https://backlogtool.com/git-tutorial/cn/stepup/stepup1_1.html" target="_blank" rel="noopener">猴子都能懂的GIT入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：在多组员，多项目等环境进行协同工作时，如果没有统一规范、统一流程，则会导致额外的工作量，甚至会做无用功。所以要减少版本冲突，减轻不必要的工作，就需要规范化的工作流程，本文就gitflow作简要的命令操作。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>dva models一些隐藏的骚操作</title>
    <link href="http://yoursite.com/2019/02/27/dva%20models%E4%B8%80%E4%BA%9B%E9%9A%90%E8%97%8F%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/02/27/dva models一些隐藏的骚操作/</id>
    <published>2019-02-27T12:34:09.000Z</published>
    <updated>2019-02-27T12:36:14.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://dvajs.com/guide/getting-started.html" target="_blank" rel="noopener">dva</a> 是一个基于 redux 和 redux-saga 的数据流方案<br><a href="https://redux-saga.js.org/docs/api/" target="_blank" rel="noopener">redux-saga API</a></p></blockquote><h3 id="take-pattern"><a href="#take-pattern" class="headerlink" title="take(pattern)"></a>take(pattern)</h3><blockquote><p>使用take操作进行事件监听，用来命令 middleware 在 Store 上等待指定的 action。 在发起与 pattern 匹配的 action 之前，Generator 将暂停（eg：下一个请求的参数依赖前一个请求的结果）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; call, put, select, take &#125;) &#123;</span><br><span class="line">  <span class="keyword">yield</span> put(&#123;</span><br><span class="line">    type: <span class="string">'dict/xxxx'</span>,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">yield</span> take(<span class="string">'dict/xxxx/@@end'</span>);</span><br><span class="line">  <span class="keyword">const</span> dictData = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.dict.dicts);</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">yield</span> call(getList, &#123;</span><br><span class="line">    xxx: dictData.xxx</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="race-effects"><a href="#race-effects" class="headerlink" title="race(effects)"></a>race(effects)</h3><blockquote><p>任务的竞争，用来命令 middleware 在多个 Effect 间运行 竞赛（Race）（与 Promise.race([…]) 的行为类似）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; race &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; list, timeout &#125; = <span class="keyword">yield</span> race(&#123;</span><br><span class="line">    list: call(services.fetchList),</span><br><span class="line">    timeout: call(delay, TIMEOUT),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任务的并行执行"><a href="#任务的并行执行" class="headerlink" title="任务的并行执行"></a>任务的并行执行</h3><blockquote><p>把多个要并行执行的东西放在一个数组里，就可以并行执行，等所有的都结束之后，进入下个环节，类似promise.all的操作。一般有一些集成界面，比如dashboard，其中各组件之间业务关联较小，就可以用这种方式去分别加载数据，此时，整体加载时间只取决于时间最长的那个。</p></blockquote><blockquote><p>之前是 <code>yield []</code>, 后来 dva 升级了 saga 的版本之后就推荐用 <code>yield all([])</code></p></blockquote><ul><li><p>yield []</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [xx1_req, xx2_req, xx3_req] = <span class="keyword">yield</span> [</span><br><span class="line">    call(xx1, payload),</span><br><span class="line">    call(xx2, payload),</span><br><span class="line">    call(xx3, payload),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yield all([])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; all &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [xx1_req, xx2_req, xx3_req] = <span class="keyword">yield</span> all([</span><br><span class="line">    call(xx1, payload),</span><br><span class="line">    call(xx2, payload),</span><br><span class="line">    call(xx3, payload),</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dvajs.com/guide/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dva&lt;/a&gt; 是一个基于 redux 和 redux-saga 的数据流方
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>折腾一个chrome插件</title>
    <link href="http://yoursite.com/2019/01/04/%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%AAchrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/04/折腾一个chrome插件/</id>
    <published>2019-01-04T09:43:48.000Z</published>
    <updated>2019-01-04T09:49:11.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：作为一个开发者，是否有时一个单词不认识或者业务命名而烦恼呢，以至于需要打开浏览器，然后打开google翻译，如此繁琐的打开页面可能一天重复好几遍，而我们开发者对于浏览器标签打开的又多，所以如何简化我们重新打开标签来翻译呢？所以浏览器插件就非常强大了。</p></blockquote><p>chrome浏览器是一个工作、学习和生活的必备工具。除了chrome本身的基本能力（控制台等）外，能大幅提高这个神器的使用体验的是它可扩展能力（插件）以及丰富的插件生态。接下来我们就来折腾一个在线翻译的chrome插件。</p><p><img src="https://raw.githubusercontent.com/hzzly/online-translate/master/online-translate.png" alt="online-translate"></p><p>好了，有了需求我们就得开发了(囧)！</p><h2 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h2><ul><li>manifest.json  // chrome配置文件</li><li>webpack配置(打包，热编译)</li><li>jsonp</li><li>ajax封装</li></ul><p>开发之前了解一下什么是Chrome插件=&gt;</p><h2 id="什么是Chrome插件"><a href="#什么是Chrome插件" class="headerlink" title="什么是Chrome插件"></a>什么是Chrome插件</h2><p>Chrome插件是一个用Web技术开发、用来增强浏览器功能的软件，它其实就是一个由HTML、CSS、JS、图片等资源组成的一个.crx后缀的压缩包。</p><h2 id="核心介绍（manifest-json）"><a href="#核心介绍（manifest-json）" class="headerlink" title="核心介绍（manifest.json）"></a>核心介绍（manifest.json）</h2><p>这是一个Chrome插件最重要也是必不可少的文件，用来配置所有和插件相关的配置，必须放在需要浏览器打包的根目录。其中，manifest_version、name、version3个是必不可少的，description和icons是推荐的。</p><p>栗子(比较全)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 清单文件的版本，这个必须写，而且必须是2</span></span><br><span class="line">  <span class="string">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 插件的名称</span></span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"demo"</span>,</span><br><span class="line">  <span class="comment">// 插件的版本</span></span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="comment">// 插件描述</span></span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"简单的Chrome扩展demo"</span>,</span><br><span class="line">  <span class="comment">// 图标，一般偷懒全部用一个尺寸的也没问题</span></span><br><span class="line">  <span class="string">"icons"</span>: &#123;</span><br><span class="line">    <span class="string">"16"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="string">"48"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="string">"128"</span>: <span class="string">"img/icon.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 会一直常驻的后台JS或后台页面</span></span><br><span class="line">  <span class="string">"background"</span>: &#123;</span><br><span class="line">    <span class="comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span></span><br><span class="line">    <span class="string">"page"</span>: <span class="string">"background.html"</span></span><br><span class="line">    <span class="comment">//"scripts": ["js/background.js"]</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 浏览器右上角图标设置，browser_action、page_action、app必须三选一</span></span><br><span class="line">  <span class="string">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="string">"default_icon"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="comment">// 图标悬停时的标题，可选</span></span><br><span class="line">    <span class="string">"default_title"</span>: <span class="string">"这是一个示例Chrome插件"</span>,</span><br><span class="line">    <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当某些特定页面打开才显示的图标</span></span><br><span class="line">  <span class="comment">/*"page_action": &#123;</span></span><br><span class="line"><span class="comment">    "default_icon": "img/icon.png",</span></span><br><span class="line"><span class="comment">    "default_title": "我是pageAction",</span></span><br><span class="line"><span class="comment">    "default_popup": "popup.html"</span></span><br><span class="line"><span class="comment">  &#125;,*/</span></span><br><span class="line">  <span class="comment">// 需要直接注入页面的JS</span></span><br><span class="line">  <span class="string">"content_scripts"</span>: [&#123;</span><br><span class="line">    <span class="comment">//"matches": ["http://*/*", "https://*/*"],</span></span><br><span class="line">    <span class="comment">// "&lt;all_urls&gt;" 表示匹配所有地址</span></span><br><span class="line">    <span class="string">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</span><br><span class="line">    <span class="comment">// 多个JS按顺序注入</span></span><br><span class="line">    <span class="string">"js"</span>: [<span class="string">"js/jquery-1.8.3.js"</span>, <span class="string">"js/content-script.js"</span>],</span><br><span class="line">    <span class="comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span></span><br><span class="line">    <span class="string">"css"</span>: [<span class="string">"css/custom.css"</span>],</span><br><span class="line">    <span class="comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span></span><br><span class="line">    <span class="string">"run_at"</span>: <span class="string">"document_start"</span></span><br><span class="line">  &#125;, &#123; <span class="comment">// 这里仅仅是为了演示content-script可以配置多个规则</span></span><br><span class="line">    <span class="string">"matches"</span>: [<span class="string">"*://*/*.png"</span>, <span class="string">"*://*/*.jpg"</span>, <span class="string">"*://*/*.gif"</span>, <span class="string">"*://*/*.bmp"</span>],</span><br><span class="line">    <span class="string">"js"</span>: [<span class="string">"js/show-image-content-size.js"</span>]</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 权限申请</span></span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"contextMenus"</span>, <span class="comment">// 右键菜单</span></span><br><span class="line">    <span class="string">"tabs"</span>, <span class="comment">// 标签</span></span><br><span class="line">    <span class="string">"notifications"</span>, <span class="comment">// 通知</span></span><br><span class="line">    <span class="string">"webRequest"</span>, <span class="comment">// web请求</span></span><br><span class="line">    <span class="string">"webRequestBlocking"</span>,</span><br><span class="line">    <span class="string">"storage"</span>, <span class="comment">// 插件本地存储</span></span><br><span class="line">    <span class="string">"http://*/*"</span>, <span class="comment">// 需要请求的地址</span></span><br><span class="line">    <span class="string">"https://*/*"</span> <span class="comment">// 需要请求的地址</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>介绍完后我们就来开发了(码代码中…)</p><h2 id="开发-基于Vue"><a href="#开发-基于Vue" class="headerlink" title="开发(基于Vue)"></a>开发(基于Vue)</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir online-translate</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> online-translate</span><br><span class="line"></span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">// 文件层级</span><br><span class="line">├── chrome  // 浏览器打包的文件夹</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src  // 源码</span><br><span class="line">└── webpack.config.js  // wepack</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装项目依赖</span><br><span class="line">npm install vue element-ui --save</span><br><span class="line"></span><br><span class="line">// 安装开发依赖</span><br><span class="line">npm install babel-core babel-loader babel-plugin-component babel-preset-env cross-env css-loader file-loader html-webpack-plugin style-loader vue-loader vue-template-compiler webpack webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    popup: <span class="string">'./src/popup.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./chrome'</span>),</span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// other vue-loader options go here</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: <span class="string">'style-loader!css-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name].[ext]?[hash]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// new webpack.HotModuleReplacementPlugin(),</span></span><br><span class="line">    <span class="comment">// new webpack.NamedModulesPlugin(),</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.join(__dirname, <span class="string">'./index.html'</span>),</span><br><span class="line">      inject: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    noInfo: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  performance: &#123;</span><br><span class="line">    hints: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'#eval-source-map'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports.devtool = <span class="string">'#source-map'</span></span><br><span class="line">  <span class="comment">// http://vue-loader.vuejs.org/en/workflow/production.html</span></span><br><span class="line">  <span class="built_in">module</span>.exports.plugins = (<span class="built_in">module</span>.exports.plugins || []).concat([</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      sourceMap: <span class="literal">false</span>,</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好了，我们就能愉快的开发了</p><h3 id="接下来就是-Vue-的开发了！"><a href="#接下来就是-Vue-的开发了！" class="headerlink" title="接下来就是 Vue 的开发了！"></a>接下来就是 <code>Vue</code> 的开发了！</h3><p>正常的项目开发…</p><p>详细源码可以看<a href="https://github.com/hzzly/online-translate" target="_blank" rel="noopener">github</a></p><h3 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>把代码打包到了chrome文件夹内，然后就可以使用chrome扩展进行打包扩展程序，会生成.crx和.pem文件，然后直接发布或者把.crx文件拖进扩展程序内进行内测。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：作为一个开发者，是否有时一个单词不认识或者业务命名而烦恼呢，以至于需要打开浏览器，然后打开google翻译，如此繁琐的打开页面可能一天重复好几遍，而我们开发者对于浏览器标签打开的又多，所以如何简化我们重新打开标签来翻译呢？所以浏览器插件就非常
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Node 配置文件的定制</title>
    <link href="http://yoursite.com/2018/11/13/Node-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9A%E5%88%B6/"/>
    <id>http://yoursite.com/2018/11/13/Node-配置文件的定制/</id>
    <published>2018-11-13T13:54:17.000Z</published>
    <updated>2019-01-02T07:58:14.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在任何一个项目中都缺少不了配置文件<br>具有下面的特点: 数据量不大,信息需要长期保存,容易维护</p></blockquote><p>现在是大前端的时代，Node 的重要性不言而喻。在使用 Node 作为后端或者中间层的技术架构时，往往需要用到一些可配置的变量，比如数据库，在开发时我们会连开发的数据库，生成环境我们需要连生产的数据库，这样我们就需要根据不同的环境加载不一样的配置文件，从而提高我们的开发效率，接下来我们就一起来定制我们的配置文件。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在 Node 中可以通过 <code>process.env</code> 来访问当前的环境变量信息。<br>比如我们在 <code>package.json</code> 中通过 <code>scripts</code> 定义的shell脚本执行对应的命令。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node ./bin/www",</span><br><span class="line">    "dev": "NODE_ENV=dev node ./bin/www",</span><br><span class="line">    "pro": "NODE_ENV=pro node ./bin/www"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，上面有三条条启动命令，一条是默认的 <code>start</code>，另外两条我们通过 <code>NODE_ENV=xxx</code> 来设置了对应的环境，当我们使用 <code>npm run dev</code> 启动项目的时候，通过 <code>process.env.NODE_ENV</code> 就可以取到项目的当前环境。</p><h2 id="通过环境变量指定对应的配置文件"><a href="#通过环境变量指定对应的配置文件" class="headerlink" title="通过环境变量指定对应的配置文件"></a>通过环境变量指定对应的配置文件</h2><p>在上面我们通过shell脚本指定了对应的环境，那我们就可以通过 <code>process.env.NODE_ENV</code> 来加载对应的配置文件了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    ...省略</span><br><span class="line">    mongodb: <span class="string">'mongodb://localhost:27017/demo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  build: &#123;</span><br><span class="line">    ...省略</span><br><span class="line">    mongodb: <span class="string">'mongodb://127.0.0.0:27017/demo'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongodb = process.env.NODE_ENV === <span class="string">'dev'</span> ? config.build.mongodb : config.dev.mongodb</span><br></pre></td></tr></table></figure></p><p>这样，我们就可以开开心心的放心的写代码了，但这样写还不是很优雅，都写到一个文件里了，不太好维护，接下来我们就真正的动态加载，不需要我们再加判断了。</p><h2 id="config-lite"><a href="#config-lite" class="headerlink" title="config-lite"></a>config-lite</h2><blockquote><p><a href="https://github.com/nswbmw/config-lite" target="_blank" rel="noopener">config-lite</a>： A super simple &amp; flexible &amp; intuitive config module, support yaml &amp; toml.</p></blockquote><p>这一次，我们针对不同的环境，将配置写入不同的配置文件中，在项目根目录下新建config目录，里面新建不同环境的配置文件：default.js、dev.js和pro.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// default.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dev.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  host: <span class="string">"https://dev.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://localhost:27017/test'</span>,</span><br><span class="line">  ...省略</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pro.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  host: <span class="string">"https://pro.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://127.0.0.0:27017/test'</span>,</span><br><span class="line">  ...省略</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>好了，配置文件写好了，如何使用呢？这里我们使用的 <code>config-lite</code> 插件，这个插件依旧是依据我们shell脚本指定的对应环境来选择不同的配置文件。</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i config-lite --save</span><br></pre></td></tr></table></figure><p>当我们使用 <code>npm run dev</code> 启动项目的时候，<code>config-lite</code>会去抓取dev.js配置，并且会与default.js里配置去合并，如果有相同的对象，会覆盖default.js里的配置。同理 <code>npm run pro</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'config-lite'</span>)(__dirname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、如果运行 npm run dev</span></span><br><span class="line">config = &#123;</span><br><span class="line">  host: <span class="string">"https://dev.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://localhost:27017/test'</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...省略</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、如果运行 npm run pro</span></span><br><span class="line">config = &#123;</span><br><span class="line">  host: <span class="string">"https://pro.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://127.0.0.0:27017/test'</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们就得到了更好维护的动态加载配置文件。还有一个<code>问题</code>（大多数情况下，在windows平台下使用类似于: NODE_ENV=pro的命令行指令会卡住，windows平台与POSIX在使用命令行时有许多区别（例如在POSIX，使用$ENV_VAR,在windows，使用%ENV_VAR%。。。））。那该如何解决呢？👇</p><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h2><blockquote><p>cross-env 让这一切变得简单，不同平台使用唯一指令，无需担心跨平台问题</p></blockquote><h3 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i cross-env --save</span><br></pre></td></tr></table></figure><h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node ./bin/www",</span><br><span class="line">    "dev": "cross-env NODE_ENV=dev node ./bin/www",</span><br><span class="line">    "pro": "cross-env NODE_ENV=pro node ./bin/www"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 NODE_ENV 便设置成功，无需担心跨平台问题。</p><h2 id="egg-配置文件的使用"><a href="#egg-配置文件的使用" class="headerlink" title="egg 配置文件的使用"></a>egg 配置文件的使用</h2><p>在 config 目录(脚手架生成的)新增 config.dev.js 和 config.pro.js，然后在文件内写我们对应环境的配置。</p><ul><li>配置环境<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "script": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "dev": "EGG_SERVER_ENV=dev egg-bin dev",</span><br><span class="line">    "pro": "EGG_SERVER_ENV=pro egg-scripts start",</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在 egg 中通过 <code>EGG_SERVER_ENV</code> 来声明对应的环境变量。</p><ul><li>使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="keyword">this</span>.app.config <span class="comment">// 得到对应环境的配置文件(也会和 default 进行合并)</span></span><br></pre></td></tr></table></figure></li></ul><p>完结，好久没写了，有点生疏了，苦笑！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在任何一个项目中都缺少不了配置文件&lt;br&gt;具有下面的特点: 数据量不大,信息需要长期保存,容易维护&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在是大前端的时代，Node 的重要性不言而喻。在使用 Node 作为后端或者中间层的技术架构时，往往需要
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
</feed>
