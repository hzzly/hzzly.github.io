<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hzzly</title>
  
  <subtitle>上善若水，笃学敦行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-13T07:55:31.438Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hzzly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深究HTTPS</title>
    <link href="http://yoursite.com/2019/08/13/%E6%B7%B1%E7%A9%B6HTTPS/"/>
    <id>http://yoursite.com/2019/08/13/深究HTTPS/</id>
    <published>2019-08-13T07:44:42.000Z</published>
    <updated>2019-08-13T07:55:31.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP和HTTPS基本概念"><a href="#HTTP和HTTPS基本概念" class="headerlink" title="HTTP和HTTPS基本概念"></a>HTTP和HTTPS基本概念</h2><p><code>HTTP</code>：超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。<br><code>HTTPS</code>：超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p><h2 id="HTTP和HTTPS的差异"><a href="#HTTP和HTTPS的差异" class="headerlink" title="HTTP和HTTPS的差异"></a>HTTP和HTTPS的差异</h2><ol><li><p>从上面概念也可以看出来HTTP是不安全的，且攻击者通过监听和中间人攻击等手段，可以获取网站帐户和敏感信息等。HTTPS被设计为可防止前述攻击，并在正确配置时被认为是安全的。</p></li><li><p>HTTP的URL由”http://“起始且默认使用端口80，而HTTPS的URL由”https://“起始且默认使用端口443。</p></li><li><p>HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。</p><ul><li>1）对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li><li>2）非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li></ul></li></ol><h2 id="简述HTTPS访问过程"><a href="#简述HTTPS访问过程" class="headerlink" title="简述HTTPS访问过程"></a>简述HTTPS访问过程</h2><p>HTTPS在进行数据传输之前会与服务器和浏览器进行一次握手，在握手时确定双方的加密密码信息。</p><p>具体过程如下：</p><ol><li><p>浏览器将支持的加密信息发送给网站服务器；</p></li><li><p>服务器会选择出一套加密算法和哈希算法，将验证身份的信息以证书（证书发布CA机构、证书有效期、公钥、证书所有者、签名等）的形式发送给浏览器；</p></li><li><p>当浏览器收到证书之后首先需要验证证书的合法性，如果证书受到浏览器信任则在浏览器地址栏会有标志显示，否则就会显示不受信的标识。当证书受信之后，浏览器会随机生成一串密码，并使用证书中的公钥加密。之后就是使用约定好的哈希算法握手消息，并生成随机数对消息进行加密，再将生成的信息发送给服务器；</p></li><li><p>当服务器接收到浏览器发送过来的数据后，会使用服务器本身的私钥将信息解密确定密码，然后通过密码解密浏览器发送过来的握手信息，并验证哈希是否与浏览器一致。然后服务器会使用密码加密新的握手信息，发送给浏览器；</p></li><li><p>最后浏览器解密并计算经过哈希算法加密的握手消息，如果与服务发送过来的哈希一致，则此握手过程结束后，服务器与浏览器会使用之前浏览器生成的随机密码和对称加密算法进行加密交换数据。</p></li></ol><h2 id="HTTPS的加密原理"><a href="#HTTPS的加密原理" class="headerlink" title="HTTPS的加密原理"></a>HTTPS的加密原理</h2><p>HTTPS在加密过程中使用了非对称加密技术和对称加密技术。</p><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>采用单钥密码系统的加密方式，同一个密钥可以同时做信息的加密和解密，这种加密的方法称为对称加密。</p><p>SSL在通信过程中，使用了对称加密算法，也就是说客户端和服务器同时共享一个密钥。</p><p>于是，以共享密钥的方式加密，必须将密钥发给对方。这个时候，假如通信过程被监听，密钥被攻击者获取了，那么这个时候也就失去了加密的意义了。</p><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/https/https2.png" alt="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/https/https2.png"></p><p>于是就需要使用两把密钥的非对称加密算法。</p><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p>与对称加密算法相反，非对称加密算法需要两个密钥来进行加密和解密，这两个密钥是配对的，分别是公开密钥（公钥）和私有密钥（私钥）。</p><p>于是现在，假设现在由服务器来生成一对公钥和密钥。</p><p>当客户端第一次发请求和服务器协商的时候，服务器就生成了一对公钥和私钥。</p><p>紧接着，服务器把公钥发给客户端（明文，不需要做任何加密），客户端接收后，使用服务器发过来的公钥进行数据加密。</p><p>再接着，服务器接收到了以后，用配对的私钥进行解密，就得到了客户端发送的数据。</p><p>非对称加密算法的特点：算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加解密速度性能上比较差，没有对称加密算法加解密的速度快。</p><p>但是我们还存在一个问题，如果公钥被中间人拿到篡改呢？</p><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/https/https3.jpeg" alt="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/https/https3.jpeg"></p><p>这时我们就需要使用证书保证公钥的正确性</p><h3 id="公钥证书"><a href="#公钥证书" class="headerlink" title="公钥证书"></a>公钥证书</h3><p>首先，服务器的运营人员向数字证书机构（CA）提出公开密钥的申请。数字证书认证机构在验证申请者的身份之后，会对申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起。</p><p>简单点理解就是：<br>CA会向申请者颁发一个证书文件和证书的私钥文件，这个证书文件里面的内容有：签发者、证书用途、服务器申请的时候附带的公钥、服务器的加密算法、使用的HASH算法、证书到期的时间等等，私钥文件就是与证书中公钥对应的私钥。</p><p>紧接着，把上面所提到的证书文件里的内容，做一次HASH求值，得到一个HASH值。</p><p>再接着，用CA的私钥进行加密，这样就完成了数字签名。而用CA的私钥加密后，就生成了类似人体指纹的签名，任何篡改证书的尝试，都会被数字签名发现。</p><p>最后，把数字签名，附在数字证书的末尾，传输回来给服务器。</p><p>接下来，服务器会把这份由数字证书认证机构颁发的公钥证书发给客户端。<br>客户端拿到这个数字证书以后，会去校验证书签名的合法性，先对证书进行SHA256（浏览器的加密算法）得到一个哈希值，然后用证书的公钥对证书的签名进行解密从中取得另一个哈希值，如果这两个哈希值相等，说明证书没有被篡改过，确实是权威机构颁发。</p><p>如果认证通过，就可以取得服务器的公开密钥。</p><p>接下来就可以使用对称加密算法通信了。</p><h3 id="扩展：客户端证书"><a href="#扩展：客户端证书" class="headerlink" title="扩展：客户端证书"></a>扩展：客户端证书</h3><p>HTTPS中不仅可以使用服务器证书，还可以使用客户端证书。以客户端证书进行客户端认证，它的作用与服务器证书是相同的。</p><p>例如，银行的网上银行就采用了客户端证书（网银盾）。在登录网银时不仅要求用户确认输入ID和密码，还会要求用户的客户端证书（网银盾），以确认用户是否从特定的终端访问网银。</p><h2 id="HTTPS的安全通信机制"><a href="#HTTPS的安全通信机制" class="headerlink" title="HTTPS的安全通信机制"></a>HTTPS的安全通信机制</h2><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/https/https1.png" alt="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/https/https1.png"></p><h3 id="client-hello"><a href="#client-hello" class="headerlink" title="client_hello"></a>client_hello</h3><p>这一步中，客户端通过发送<code>client_hello</code>报文开始SSL通信。在请求中，浏览器会带上一些建立连接的必要信息（注意：这一步的信息全都是明文的），包括：</p><ol><li><code>版本</code>: 客户端支持的最高的 TLS 协议版本。从高到低依次为：TLS v1.2, TLS v1.1, TLS v1.0, SSL v3, SSL v2。其中低于 TLS v1.0 的版本基本不再使用，因为 SSL v3 和 SSL v2 都存在漏洞，Google 和 Mozilla 已明确禁用 SSL 协议。</li><li><code>密码套件</code>: 按优先级降序排列的、客户端支持的加密套件列表。每个加密套件会各包含一个认证算法（用于身份验证）、密钥交换算法（用于协商密钥）、对称加密算法（用于消息加密）和信息摘要算法（用于完整性校验）。</li><li><code>压缩方法</code>: 客户端支持的用于压缩消息、降低传输体积的压缩算法列表。</li><li><code>随机数</code>: 一个由客户端生成的随机数，使用 32 位时间戳和一个安全随机数生成器生成的 28 字节随机数组成。这个随机数用于后续<code>Master Key</code>的生成，并防止重放攻击。</li><li><code>会话标识</code>: 一个变长的会话标志。非 0 值意味着客户端希望更新当前已存在的连接的参数或者为此连接创建一个新的连接。0 值表示客户端想在新会话上创建一个新连接。</li><li><code>扩展字段</code>: 包含一些其他的相关参数（比如 SNI）。</li></ol><h3 id="server-hello"><a href="#server-hello" class="headerlink" title="server_hello"></a>server_hello</h3><p>客户端在发出<code>client_hello</code>消息之后，会等待服务器返回<code>server_hello</code>消息，包含和 <code>client_hello</code>相同的参数。一般来说，参数结构如下：</p><ol><li><code>版本</code>: 包含客户端支持的最低版本和服务器支持的最高版本。</li><li><code>密码套件</code>: 包含了服务器从客户端发来的密码套件列表中选择出的将要使用的密码套件。</li><li><code>压缩方法</code>: 包含了服务器从客户端发来的压缩方法列表中选择出的将要使用的压缩方法。</li><li><code>随机数</code>: 由服务器生成的不同于客户端在<code>client_hello</code>中发来的随机数的另一个独立的随机数。</li><li><code>会话标识</code>: 如果客户端发送的会话标识不为 0，服务器会使用与客户端发送的一致的会话标识，否则返回的是服务器生成的一个新的会话标识。</li></ol><h3 id="certificate-server-hello-done"><a href="#certificate-server-hello-done" class="headerlink" title="certificate + server_hello _done"></a>certificate + server_hello _done</h3><p>通常来说，服务器会在<code>certificate</code>消息中发送其自身的公开密钥证书供客户端进行验证。</p><p>最后，服务器发送<code>server_hello_done</code>消息，表明服务器的 hello 相关的消息结束。在发送此消息之后，服务器会等待客户端应答，该消息没有参数。</p><p>在这一步结束之后表明最初阶段的SSL握手协商部分结束。</p><h3 id="client-key-change"><a href="#client-key-change" class="headerlink" title="client_key_change"></a>client_key_change</h3><p>客户端在收到服务器发来的<code>server_hello_done</code>消息之后，会验证服务器提供的证书是否合法，并检查<code>server_hello</code>的各项参数。如果验证通过，则客户端会向服务器发送一条或多条消息。</p><p>然后客户端会发送<code>client_key_exchange</code>报文消息，报文中包含通信加密中使用的一种被称为<code>PreMaster Key</code>的随机密码串，并使用服务器证书中的公钥或者服务器密钥交换消息中的临时 RSA 密钥加密。这个密钥会被用于之后的<code>Master Key</code>的计算。</p><h3 id="change-cipher-spec-finished"><a href="#change-cipher-spec-finished" class="headerlink" title="change_cipher_spec + finished"></a>change_cipher_spec + finished</h3><p>经过以上步骤，客户端和服务器已经可以通过得到的消息计算出<code>Master Key</code>了。从现在开始，客户端和服务器都将开始使用协商好的加密算法、密钥进行通信，在正式传递消息之前会计算<code>Master Key</code>和之前握手过程中收到的所有信息的<code>hash</code>，并通过协商好的加密算法使用 <code>Master Key</code>加密，作为<code>change_cipher_spec</code>消息的内容，接着发送<code>finished</code>消息。服务器在收到客户端发来的<code>change_cipher_spec</code>和<code>finished</code>消息之后，也会计算<code>Master Key</code>并使用协商好的加密算法和之前握手过程中收到的所有信息的<code>hash</code>，发回给客户端用以验证。至此，握手阶段结束，之后就可以交换应用层的内容了。</p><p>服务器和客户端的<code>finished</code>报文交换完毕之后，SSL连接就算建立完成，当然，通信会受到SSL的保护。从此处开始进行应用层协议的通信，即发送HTTP请求。</p><p>至此，整个过程介绍完毕。</p><h2 id="实践HTTPS连接的握手过程"><a href="#实践HTTPS连接的握手过程" class="headerlink" title="实践HTTPS连接的握手过程"></a>实践HTTPS连接的握手过程</h2><p>我们可以使用 curl 命令来简略查看建立 HTTPS 时的握手过程，在命令行中执行：curl -v -I -L <a href="https://hzzly.cn" target="_blank" rel="noopener">https://hzzly.cn</a></p><p>能得到如下的输出：</p><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/https/http4.png" alt="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/https/http4.png"></p><p>简单说明一下连接的建立过程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示建立了和 hzzly.cn 服务器 443 端口的连接。</span></span><br><span class="line">Connected to hzzly.cn (39.108.182.125) port 443 (<span class="comment">#0) </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端发出 client_hello 消息。</span></span><br><span class="line">TLSv1.2 (OUT), TLS handshake, Client hello (1): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器发出 server_hello 消息。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Server hello (2): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器发出 certificate 消息。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Certificate (11): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器发出 server_key_exchange 消息。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Server key exchange (12): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器发出 server_done 消息。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Server finished (14): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端发出 client_key_exchange 消息。</span></span><br><span class="line">TLSv1.2 (OUT), TLS handshake, Client key exchange (16): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端发出加密后的 client_hello 消息。</span></span><br><span class="line">TLSv1.2 (OUT), TLS change cipher, Client hello (1): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端发出 hello_done 消息。</span></span><br><span class="line">TLSv1.2 (OUT), TLS handshake, Finished (20): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器将加密后的 client_hello 消息发回。</span></span><br><span class="line">TLSv1.2 (IN), TLS change cipher, Client hello (1): </span><br><span class="line"></span><br><span class="line"><span class="comment"># 握手结束。</span></span><br><span class="line">TLSv1.2 (IN), TLS handshake, Finished (20): </span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL 连接采用 ECDHE-RSA-AES256-GCM-SHA384 密码套件。</span></span><br><span class="line"><span class="comment"># ECDHE 表示密钥交换方法采用椭圆曲线迪菲-赫尔曼交换方法</span></span><br><span class="line"><span class="comment"># RSA 表示密钥交换中使用的签名方式</span></span><br><span class="line"><span class="comment"># AES-256-GCM 表示的是对称加密算法</span></span><br><span class="line"><span class="comment"># SHA-384 表示的是内容完整性校验使用的哈希算法</span></span><br><span class="line">SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后的几行包含了证书的内容，包括有效时间、常用名、证书签发机构等。</span></span><br><span class="line">Server certificate: </span><br><span class="line">      <span class="comment"># Common Name 为 hzzly.cn</span></span><br><span class="line">    subject: CN=hzzly.cn</span><br><span class="line">      <span class="comment"># 在此时间之前无效</span></span><br><span class="line">    start date: Aug  2 00:00:00 2019 GMT</span><br><span class="line">      <span class="comment"># 在此时间之后无效</span></span><br><span class="line">    expire date: Aug  1 12:00:00 2020 GMT</span><br><span class="line">      <span class="comment"># 域名和证书的域名匹配</span></span><br><span class="line">    subjectAltName: host <span class="string">"hzzly.cn"</span> matched certs <span class="string">"hzzly.cn"</span></span><br><span class="line">      <span class="comment"># 签发者是 Encryption</span></span><br><span class="line">    issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=Encryption Everywhere DV TLS CA - G1</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《图解http》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP和HTTPS基本概念&quot;&gt;&lt;a href=&quot;#HTTP和HTTPS基本概念&quot; class=&quot;headerlink&quot; title=&quot;HTTP和HTTPS基本概念&quot;&gt;&lt;/a&gt;HTTP和HTTPS基本概念&lt;/h2&gt;&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt;：超文本传
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>动手开发一个自己的项目脚手架</title>
    <link href="http://yoursite.com/2019/07/19/%E5%8A%A8%E6%89%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/07/19/动手开发一个自己的项目脚手架/</id>
    <published>2019-07-19T13:00:49.000Z</published>
    <updated>2019-07-18T01:26:45.210Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：随着前端工程化的不断深入，同时 Node 给前端开发带来了很大的改变，促进了前端开发的自动化，越来越多的人选择使用脚手架来从零到一搭建自己的项目。其中最熟悉的就是vue-cli和create-react-app，它们可以帮助我们初始化配置、生成项目结构、自动安装依赖等等，最后我们一行指令即可运行项目开始开发，或者进行项目构建（build）。在实际的开发过程中，我们可能会有自己的特定需求，那么我们就得学会如何开发一个Node命令行工具。</p></blockquote><p>在前面的文章 动手搭建react开发环境系列 中，结尾处我们说到，既然我们的项目结构搭建好了，但不能每次开发都来手动复制项目结构，所以我们就要通过执行命令就生成我们需要的项目结构。</p><p>我们的初步设想是，在指定目录下执行一个命令（假设为create）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hzzly create demo</span><br></pre></td></tr></table></figure></p><p>就会生成一个目录名为 demo 的项目，里面包含有我们所需的基础项目结构。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir hzzly-cli</span><br><span class="line">cd hzzly-cli</span><br><span class="line">mkdir bin lib</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add commander chalk boxen fs-extra inquirer ora update-notifier download-git-repo rimraf</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander</a> 一款重量轻，表现力和强大的命令行框架</li><li><a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a> 用于打印彩色的信息</li><li><a href="https://github.com/sindresorhus/boxen" target="_blank" rel="noopener">boxen</a> 创建小“面板”</li><li><a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">inquirer</a> 交互式命令行用户界面的集合</li><li><a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">ora</a> 用于创建 spinner，添加下载模板 loading 效果</li><li><a href="https://github.com/yeoman/update-notifier" target="_blank" rel="noopener">update-notifier</a> 用于检查包的线上版本与本地版本</li><li><a href="https://github.com/flipxfx/download-git-repo" target="_blank" rel="noopener">download-git-repo</a> 从节点下载并提取git存储库</li></ul><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><h3 id="1、创建一个用于运行命令的脚本"><a href="#1、创建一个用于运行命令的脚本" class="headerlink" title="1、创建一个用于运行命令的脚本"></a>1、创建一个用于运行命令的脚本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/hzzly.js</span></span><br><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello world ~"</span>);</span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node bin/hzzly.js</span><br></pre></td></tr></table></figure></p><p>不出意外的话能够看到输出了 hello world ~，当然这不是我们想要的结果，我们是要直接运行 hzzly 命令就能输出 hello world ~</p><blockquote><p>🔥Tip: 主入口文件的最上方添加代码 #! /usr/bin/env node, 表明这是一个可执行的应用</p></blockquote><h3 id="2、添加命令"><a href="#2、添加命令" class="headerlink" title="2、添加命令"></a>2、添加命令</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "bin": &#123;</span><br><span class="line">    "hzzly": "bin/hzzly.js"</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们指定 hzzly 命令的执行文件为 bin/hzzly.js。</p><h3 id="3、全局运行命令调试"><a href="#3、全局运行命令调试" class="headerlink" title="3、全局运行命令调试"></a>3、全局运行命令调试</h3><p>在项目目录下运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install . -g</span><br><span class="line">// 或</span><br><span class="line">npm link</span><br></pre></td></tr></table></figure></p><p>这样就可以使用 hzzly 命令了。</p><p>到此，一个本地的 npm 命令行工具就已经成功完成了，接下来我们就来完善具体的功能。</p><h2 id="脚手架开发"><a href="#脚手架开发" class="headerlink" title="脚手架开发"></a>脚手架开发</h2><h3 id="1、效果"><a href="#1、效果" class="headerlink" title="1、效果"></a>1、效果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Usage: hzzly &lt;<span class="built_in">command</span>&gt; [options] &lt;app-name&gt; [folder-name]</span><br><span class="line"> </span><br><span class="line">Options:</span><br><span class="line">  -v, --version  output the version number</span><br><span class="line">  -c, --<span class="built_in">clone</span>    use git <span class="built_in">clone</span></span><br><span class="line">  -h, --<span class="built_in">help</span>     output usage information</span><br><span class="line"> </span><br><span class="line">Commands:</span><br><span class="line">  setup          run remote setup commands</span><br><span class="line">  create         generate a new project from a react template</span><br><span class="line">  check          check <span class="built_in">test</span></span><br><span class="line"> </span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># create a new react project</span></span><br><span class="line">  $ hzzly create demo</span><br></pre></td></tr></table></figure><h3 id="2、准备项目模版"><a href="#2、准备项目模版" class="headerlink" title="2、准备项目模版"></a>2、准备项目模版</h3><p>脚手架是帮助我们快速生成一套既定的项目架构、文件、配置，而最常见的做法的就是先写好一套项目框架模版，等到脚手架要生成项目时，则将这套模版拷贝到目标目录下。</p><ul><li>一种是直接放在本地</li><li>另一种是托管在 github 上</li></ul><p>这里我们选择托管在 github，然后通过<code>download-git-repo</code>下载到指定目录。我准备了一个<a href="https://github.com/hzzly/webpack-template" target="_blank" rel="noopener">项目模版</a>，之后就会用它来作为脚手架生成的项目结构。</p><h3 id="3、初始Command"><a href="#3、初始Command" class="headerlink" title="3、初始Command"></a>3、初始Command</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/hzzly.js</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">"chalk"</span>);</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'../package.json'</span>);</span><br><span class="line"> </span><br><span class="line">program</span><br><span class="line">  .version(pkg.version)</span><br><span class="line">  .usage(<span class="string">'&lt;command&gt; [options] &lt;app-name&gt; [folder-name]'</span>)</span><br><span class="line">  .option(<span class="string">"-c, --clone"</span>, <span class="string">"use git clone"</span>)</span><br><span class="line">  .on(<span class="string">"--help"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Examples:"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      chalk.gray(<span class="string">"  # create a new react project"</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"  $ hzzly create demo"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;);</span><br><span class="line">program.parse(process.argv)</span><br></pre></td></tr></table></figure><p>这样，当我们执行 <code>hzzly</code> 命令时就会有如下效果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Usage: hzzly &lt;<span class="built_in">command</span>&gt; [options] &lt;app-name&gt;</span><br><span class="line"> </span><br><span class="line">Options:</span><br><span class="line">  -V, --version  output the version number</span><br><span class="line">  -c, --<span class="built_in">clone</span>    use git <span class="built_in">clone</span></span><br><span class="line">  -h, --<span class="built_in">help</span>     output usage information</span><br><span class="line"> </span><br><span class="line">Examples:</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># create a new react project</span></span><br><span class="line">  $ hzzly create demo</span><br></pre></td></tr></table></figure></p><p>接下来就可以去定义我们的 Commands 了。</p><h3 id="4、定义Command命令"><a href="#4、定义Command命令" class="headerlink" title="4、定义Command命令"></a>4、定义Command命令</h3><p>在 <code>program.parse(process.argv)</code> 前面去定义我们的command命令</p><p>为什么要在它前面去定义命令呢？</p><blockquote><p>parse 用于解析process.argv，设置options以及触发commands</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/hzzly.js</span></span><br><span class="line"><span class="comment">// 同上...</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'create'</span>)</span><br><span class="line">  .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">  .option(<span class="string">"-c, --clone"</span>, <span class="string">"use git clone"</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">appName, option</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获得了参数，可以在这里做响应的业务处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`指令 create 后面跟的参数值: <span class="subst">$&#123;appName&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(option);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 同上</span></span><br></pre></td></tr></table></figure><ul><li>command 定义命令行指令</li><li>description 命令描述，它会在help里面展示</li><li>option 定义参数。它接受四个参数，在第一个参数中，它可输入短名字 -a和长名字–name ,使用 | 或者 , 分隔，在命令行里使用时，这两个是等价的，区别是后者可以在程序里通过回调获取到；第二个为描述, 会在 help 信息里展示出来；第三个参数为回调函数，他接收的参数为一个string，有时候我们需要一个命令行创建多个模块，就需要一个回调来处理；第四个参数为默认值</li><li>action 注册一个 callback 函数</li></ul><p>接下来就是处理生成项目模板的逻辑了，继续。</p><h3 id="5、处理生成项目结构逻辑"><a href="#5、处理生成项目结构逻辑" class="headerlink" title="5、处理生成项目结构逻辑"></a>5、处理生成项目结构逻辑</h3><h4 id="5-1、思路"><a href="#5-1、思路" class="headerlink" title="5.1、思路"></a>5.1、思路</h4><ul><li>1、输入 <code>vue create</code> 提示输入项目文件夹名称</li><li>2、输入 <code>vue create .</code> 表示在当前目录构建项目，但要给个提示（是否确定要在所在目录生成项目，其它文件将被删除）</li><li>3、输入 <code>vue create app</code> 表示在当前目录生成一个 <code>app</code> 的目录并在此目录构建项目，当有相同的目录时也要提示（当前目录已存在，是否继续构建）</li></ul><p>好了，思路有了就 so easy 了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/hzzly.js</span></span><br><span class="line"><span class="comment">// 同上...</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'create'</span>)</span><br><span class="line">  .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">  .option(<span class="string">"-c, --clone"</span>, <span class="string">"use git clone"</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">appName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// // 获得了参数，可以在这里做响应的业务处理</span></span><br><span class="line">    <span class="comment">// console.log(`指令 create 后面跟的参数值: $&#123;appName&#125;`);</span></span><br><span class="line">    <span class="comment">// 判断是否有传appName</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> appName === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断是否有相同 appName 目录</span></span><br><span class="line">      checkAppName(appName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有传appName的话提示用户输入</span></span><br><span class="line">      <span class="keyword">const</span> opts = [&#123;</span><br><span class="line">        type: <span class="string">'input'</span>,</span><br><span class="line">        name: <span class="string">'appName'</span>,</span><br><span class="line">        message: <span class="string">'Please enter the app name for your project：'</span>,</span><br><span class="line">        validate: <span class="function"><span class="params">appName</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!appName) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'⚠️  app name must not be null！'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;];</span><br><span class="line">      <span class="comment">// inquirer命令行交互工具</span></span><br><span class="line">      inquirer.prompt(opts).then(<span class="function">(<span class="params">&#123; appName &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (appName) &#123;</span><br><span class="line">          <span class="comment">// 输入完之后判断是否有相同 appName 目录</span></span><br><span class="line">          checkAppName(appName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 同上</span></span><br></pre></td></tr></table></figure><h4 id="5-2、checkAppName"><a href="#5-2、checkAppName" class="headerlink" title="5.2、checkAppName"></a>5.2、checkAppName</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理项目名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAppName</span>(<span class="params">appName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取绝对路径</span></span><br><span class="line">  <span class="keyword">const</span> to = path.resolve(appName);</span><br><span class="line">  <span class="comment">// 判断是否在当前目录构建</span></span><br><span class="line">  <span class="keyword">if</span> (appName === <span class="string">'.'</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断当前目录是否为空</span></span><br><span class="line">    checkEmpty(to)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkExist(to)) &#123;</span><br><span class="line">    <span class="comment">// 如果传入的 appName 在当前目录已存在</span></span><br><span class="line">    inquirer.prompt([&#123;</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      message: <span class="string">'Target directory exists. Continue?'</span>,</span><br><span class="line">      name: <span class="string">'ok'</span>,</span><br><span class="line">    &#125;]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (answers.ok) &#123;</span><br><span class="line">        <span class="comment">// 回答是的话删除已存在的目录并下载模板构建项目</span></span><br><span class="line">        rm(appName)</span><br><span class="line">        downloadAndGenerate(REACT_TPL, to, appName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果以上情况都不是就直接下载模板构建项目</span></span><br><span class="line">    downloadAndGenerate(REACT_TPL, to, appName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3、checkEmpty"><a href="#5-3、checkEmpty" class="headerlink" title="5.3、checkEmpty"></a>5.3、checkEmpty</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断目录是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmpty</span>(<span class="params">path, appName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dirFiles = fs.readdirSync(path);</span><br><span class="line">  <span class="keyword">if</span> (dirFiles.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    inquirer.prompt([&#123;</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      name: <span class="string">'ok'</span>,</span><br><span class="line">      message: <span class="string">'Target directory is not empty and will overwritten. Continue?'</span>,</span><br><span class="line">    &#125;]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (answers.ok) &#123;</span><br><span class="line">        fs.emptyDirSync(path)</span><br><span class="line">        downloadAndGenerate(REACT_TPL, path, appName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    downloadAndGenerate(REACT_TPL, path, appName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4、checkExist"><a href="#5-4、checkExist" class="headerlink" title="5.4、checkExist"></a>5.4、checkExist</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断目录是否已存在</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkExist</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fs.pathExistsSync(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5、downloadAndGenerate"><a href="#5-5、downloadAndGenerate" class="headerlink" title="5.5、downloadAndGenerate"></a>5.5、downloadAndGenerate</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载模板构建项目</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadAndGenerate</span>(<span class="params">template, tmp</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 生成下载loading</span></span><br><span class="line">  <span class="keyword">const</span> spinner = ora(<span class="string">"downloading template"</span>);</span><br><span class="line">  <span class="keyword">const</span> clone = program.clone || <span class="literal">false</span>;</span><br><span class="line">  spinner.start();</span><br><span class="line">  download(template, tmp, &#123; clone &#125;, err =&gt; &#123;</span><br><span class="line">    spinner.stop();</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(</span><br><span class="line">        chalk.red(</span><br><span class="line">        <span class="string">"Failed to download repo "</span> + template + <span class="string">": "</span> + err.message.trim()</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下载完成后提示用户操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`To get started:\n\n  cd <span class="subst">$&#123;tmp&#125;</span>\n  npm install\n  npm run dev\n\nDocumentation can be found at https://github.com/hzzly`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这，开发阶段就可告一段落了，我们已经可以通过 <code>hzzly create &lt;app-name&gt;</code> 命令行构建项目目录的步骤，接下来就是发布到npm给其他人使用。</p><h2 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h2><p>到目前为止，我们开发的 hzzly 还是在本地的，现在就该将其发布到 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 上了。</p><p>1、首先 <a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">注册一个账号</a>。</p><p>2、在终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>输入用户名、密码和邮箱便可将本地机器与 npm 连接起来了。</p><p>3、修改package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "files": [</span><br><span class="line">    <span class="string">"bin/"</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加 files 属性指定哪些文件提交到 npm，这样可以减少包的大小。</p><p>4、发布<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></p><h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><p>首先修改 package.json 配置文件中的 version 字段，比如这里我从 1.0.0 改成 1.0.1（只能大于当前版本），然后修改脚手架，最后再次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="1、添加小面板"><a href="#1、添加小面板" class="headerlink" title="1、添加小面板"></a>1、添加小面板</h3><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/cli/hzzly-cli2.png" alt="boxen"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> boxen = <span class="built_in">require</span>(<span class="string">'boxen'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> BOXEN_OPTS = &#123;</span><br><span class="line">  padding: <span class="number">1</span>,</span><br><span class="line">  margin: <span class="number">1</span>,</span><br><span class="line">  align: <span class="string">'center'</span>,</span><br><span class="line">  borderColor: <span class="string">'#678491'</span>,</span><br><span class="line">  borderStyle: <span class="string">'round'</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializing</span>(<span class="params">pkg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> messages = [];</span><br><span class="line">  messages.push(</span><br><span class="line">    <span class="string">`🔥  Welcome to use hzzly-cli <span class="subst">$&#123;chalk.grey(<span class="string">`v<span class="subst">$&#123;pkg.version&#125;</span>`</span>)&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">  messages.push(</span><br><span class="line">    chalk.grey(<span class="string">'https://github.com/hzzly/hzzly-cli'</span>)</span><br><span class="line">  );</span><br><span class="line">  messages.push(</span><br><span class="line">    chalk.grey(<span class="string">'https://www.npmjs.com/package/hzzly-cli'</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="built_in">console</span>.log(boxen(messages.join(<span class="string">'\n'</span>), BOXEN_OPTS));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'create'</span>)</span><br><span class="line">  .description(<span class="string">'generate a new project from a template'</span>)</span><br><span class="line">  .option(<span class="string">"-c, --clone"</span>, <span class="string">"use git clone"</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">appName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用小面板</span></span><br><span class="line">    initializing(pkg)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><h3 id="2、检查包的线上版本与本地版本"><a href="#2、检查包的线上版本与本地版本" class="headerlink" title="2、检查包的线上版本与本地版本"></a>2、检查包的线上版本与本地版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updateNotifier = <span class="built_in">require</span>(<span class="string">'update-notifier'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkVersion</span>(<span class="params">pkg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'🛠️  Checking your hzzly-cli version...'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> notifier = updateNotifier(&#123;</span><br><span class="line">    pkg,</span><br><span class="line">    updateCheckInterval: <span class="number">0</span></span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> update = notifier.update;</span><br><span class="line">  <span class="keyword">if</span> (update) &#123;</span><br><span class="line">    <span class="keyword">const</span> messages = [];</span><br><span class="line">    messages.push(<span class="string">`Update available <span class="subst">$&#123;chalk.grey(update.current)&#125;</span> → <span class="subst">$&#123;chalk.green(update.latest)&#125;</span>`</span>)</span><br><span class="line">    messages.push(<span class="string">`Run <span class="subst">$&#123;chalk.cyan(<span class="string">`npm i -g <span class="subst">$&#123;pkg.name&#125;</span>`</span>)&#125;</span> to update`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(boxen(messages.join(<span class="string">'\n'</span>), &#123; ...BOXEN_OPTS, <span class="attr">borderColor</span>: <span class="string">'#fae191'</span> &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'🛠️  Finish checking your hzzly-cli. CAUTION ↑↑'</span>, <span class="string">'⚠️'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'🛠️  Finish checking your hzzly-cli. OK'</span>, chalk.green(<span class="string">'✔'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializing</span>(<span class="params">pkg</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  checkVersion(pkg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、README-md添加徽标"><a href="#3、README-md添加徽标" class="headerlink" title="3、README.md添加徽标"></a>3、README.md添加徽标</h3><p>推荐自动生成徽标网站 <a href="https://shields.io/" target="_blank" rel="noopener">shields.io</a></p><p><img src="https://img.shields.io/npm/v/hzzly-cli.svg" alt="NPM version"></p><p><img src="https://img.shields.io/npm/l/hzzly-cli.svg" alt="MIT Licence"></p><h2 id="深入inquirer-js"><a href="#深入inquirer-js" class="headerlink" title="深入inquirer.js"></a>深入inquirer.js</h2><p>创建脚手架的时候我们会发现很多脚手架都需要我们和命令行频繁交互，就像我们使用npm init的时候一样，那么是如何实现和命令行交互的呢？此时inquirer.js闪亮登场。</p><h3 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法"></a>1、基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line">inquirer.prompt([<span class="comment">/* opts */</span>])</span><br><span class="line">  .then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Use answers for... whatever!! </span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="2、参数详解"><a href="#2、参数详解" class="headerlink" title="2、参数详解"></a>2、参数详解</h3><ul><li>type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；</li><li>name: 存储当前问题回答的变量；</li><li>message：问题的描述；</li><li>default：默认值；</li><li>choices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；</li><li>validate：对用户的回答进行校验；</li><li>filter：对用户的回答进行过滤处理，返回处理后的值；</li><li>transformer：对用户回答的显示效果进行处理(如：修改回答的字体或背景颜色)，但不会影响最终的答案的内容；</li><li>when：根据前面问题的回答，判断当前问题是否需要被回答；</li><li>pageSize：修改某些type类型下的渲染行数；</li><li>prefix：修改message默认前缀；</li><li>suffix：修改message默认后缀。</li></ul><h3 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opts = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    message: <span class="string">'姓名'</span>,</span><br><span class="line">    name: <span class="string">'name'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    message: <span class="string">'手机号'</span>,</span><br><span class="line">    name: <span class="string">'phone'</span>,</span><br><span class="line">    validate: <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val.match(<span class="regexp">/\d&#123;11&#125;/g</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'请输入11位数字'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'confirm'</span>,</span><br><span class="line">    message: <span class="string">'是否参加本次考核？'</span>,</span><br><span class="line">    name: <span class="string">'assess'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'confirm'</span>,</span><br><span class="line">    message: <span class="string">'是否同意本次考核须知？'</span>,</span><br><span class="line">    name: <span class="string">'notice'</span>,</span><br><span class="line">    when: <span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> answers.assess</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'list'</span>,</span><br><span class="line">    message: <span class="string">'欢迎来到本次考核，请选择语言：'</span>,</span><br><span class="line">    name: <span class="string">'eductionBg'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      <span class="string">"js"</span>,</span><br><span class="line">      <span class="string">"java"</span>,</span><br><span class="line">      <span class="string">"php"</span></span><br><span class="line">    ],</span><br><span class="line">    filter: <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 将选择的内容后面加语言</span></span><br><span class="line">      <span class="keyword">return</span> val + <span class="string">'语言'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'rawlist'</span>,</span><br><span class="line">    message: <span class="string">'请选择你喜欢逛的社区：'</span>,</span><br><span class="line">    name: <span class="string">'game'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      <span class="string">"掘金"</span>,</span><br><span class="line">      <span class="string">"github"</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'expand'</span>,</span><br><span class="line">    message: <span class="string">'请选择你喜欢的水果：'</span>,</span><br><span class="line">    name: <span class="string">'fruit'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">"a"</span>,</span><br><span class="line">        name: <span class="string">"Apple"</span>,</span><br><span class="line">        value: <span class="string">"apple"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">"O"</span>,</span><br><span class="line">        name: <span class="string">"Orange"</span>,</span><br><span class="line">        value: <span class="string">"orange"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">"p"</span>,</span><br><span class="line">        name: <span class="string">"Pear"</span>,</span><br><span class="line">        value: <span class="string">"pear"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'checkbox'</span>,</span><br><span class="line">    message: <span class="string">'请选择你喜欢的颜色：'</span>,</span><br><span class="line">    name: <span class="string">'color'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"red"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">new</span> inquirer.Separator(), <span class="comment">// 添加分隔符</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"blur"</span>,</span><br><span class="line">        checked: <span class="literal">true</span> <span class="comment">// 默认选中</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"green"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">new</span> inquirer.Separator(<span class="string">"--- 分隔符 ---"</span>), <span class="comment">// 自定义分隔符</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"yellow"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    type: <span class="string">'password'</span>,</span><br><span class="line">    message: <span class="string">'请输入你的密码：'</span>,</span><br><span class="line">    name: <span class="string">'pwd'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">inquirer.prompt(opts).then(<span class="function"><span class="params">answers</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(answers);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/cli/hzzly-cli.png" alt="inquirer"></p><p>代码已上传至我的<a href="https://github.com/hzzly/hzzly-cli" target="_blank" rel="noopener">GitHub</a>，欢迎 Star、Fork</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a href="https://segmentfault.com/a/1190000002918295" target="_blank" rel="noopener">Nodejs 制作命令行工具</a></p><p><a href="https://juejin.im/post/5cc160b2f265da03452bdf5b" target="_blank" rel="noopener">用一次就会爱上的cli工具开发</a></p><p><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander.js</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：随着前端工程化的不断深入，同时 Node 给前端开发带来了很大的改变，促进了前端开发的自动化，越来越多的人选择使用脚手架来从零到一搭建自己的项目。其中最熟悉的就是vue-cli和create-react-app，它们可以帮助我们初始化配置、生
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="脚手架" scheme="http://yoursite.com/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>动手搭建react开发环境三</title>
    <link href="http://yoursite.com/2019/07/15/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%89/"/>
    <id>http://yoursite.com/2019/07/15/动手搭建react开发环境三/</id>
    <published>2019-07-15T01:23:52.000Z</published>
    <updated>2019-07-22T07:17:21.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>webpack 4</li><li>Babel 7</li></ul><blockquote><p>本篇主要使用针对代码或者开发效率进行优化</p></blockquote><h2 id="1、ESLint规范"><a href="#1、ESLint规范" class="headerlink" title="1、ESLint规范"></a>1、ESLint规范</h2><blockquote><p>规范代码有利于团队协作</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint babel-eslint eslint-config-airbnb eslint-config-standard eslint-loader eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-promise eslint-plugin-react eslint-plugin-standard -D</span><br></pre></td></tr></table></figure><h3 id="eslintrc"><a href="#eslintrc" class="headerlink" title=".eslintrc"></a>.eslintrc</h3><p>新建.eslintrc文件（配置ESLint）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"node"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"ecmaVersion"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"airbnb"</span>, <span class="string">"prettier"</span>],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"generator-star-spacing"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"consistent-return"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/forbid-prop-types"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/jsx-filename-extension"</span>: [<span class="number">1</span>, &#123; <span class="attr">"extensions"</span>: [<span class="string">".js"</span>] &#125;],</span><br><span class="line">    <span class="attr">"global-require"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="attr">"import/prefer-default-export"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/jsx-no-bind"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/prop-types"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/prefer-stateless-function"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"react/jsx-wrap-multilines"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"declaration"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"assignment"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"return"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"arrow"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"condition"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"logical"</span>: <span class="string">"parens-new-line"</span>,</span><br><span class="line">        <span class="attr">"prop"</span>: <span class="string">"ignore"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"no-else-return"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-restricted-syntax"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"import/no-extraneous-dependencies"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-use-before-define"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"jsx-a11y/no-static-element-interactions"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"jsx-a11y/no-noninteractive-element-interactions"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"jsx-a11y/click-events-have-key-events"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"jsx-a11y/anchor-is-valid"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-nested-ternary"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"arrow-body-style"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"linebreak-style"</span>: [<span class="string">"error"</span>, <span class="string">"unix"</span>],</span><br><span class="line">    <span class="attr">"import/extensions"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-bitwise"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-cond-assign"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"import/no-unresolved"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"comma-dangle"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"arrays"</span>: <span class="string">"always-multiline"</span>,</span><br><span class="line">        <span class="attr">"objects"</span>: <span class="string">"always-multiline"</span>,</span><br><span class="line">        <span class="attr">"imports"</span>: <span class="string">"always-multiline"</span>,</span><br><span class="line">        <span class="attr">"exports"</span>: <span class="string">"always-multiline"</span>,</span><br><span class="line">        <span class="attr">"functions"</span>: <span class="string">"ignore"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"object-curly-newline"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"function-paren-newline"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"no-restricted-globals"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"require-yield"</span>: [<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h3><p>新建.eslintignore文件（ESLint忽略特定的文件或目录）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build<span class="comment">/*.js</span></span><br></pre></td></tr></table></figure><h3 id="编译前置检验"><a href="#编译前置检验" class="headerlink" title="编译前置检验"></a>编译前置检验</h3><p>在执行编译之前去执行eslint-loader检查代码规范，有报错就不执行编译</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、编辑器配置"><a href="#2、编辑器配置" class="headerlink" title="2、编辑器配置"></a>2、编辑器配置</h2><p>EditorConfig包含一个用于定义代码格式的文件和一批编辑器插件，这些插件是让编辑器读取配置文件并以此来格式化代码。</p><h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><p>新建.editorconfig文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># http://editorconfig.org</span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[*]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = <span class="number">2</span></span><br><span class="line">end_of_line = lf</span><br><span class="line">charset = utf<span class="number">-8</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace = <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line">[Makefile]</span><br><span class="line">indent_style = tab</span><br></pre></td></tr></table></figure><h2 id="3、cross-env"><a href="#3、cross-env" class="headerlink" title="3、cross-env"></a>3、cross-env</h2><p>因为windows不支持NODE_ENV=development的设置环境变量的方式，所以使用我们可以cross-env设置跨平台的环境变量的脚本。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add cross-env -D</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "cross-env NODE_ENV=production webpack --config ./build/webpack.config.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以使用 <code>process.env.NODE_ENV</code> 来获取环境变量继续操作了。</p><h2 id="4、代码自动格式化"><a href="#4、代码自动格式化" class="headerlink" title="4、代码自动格式化"></a>4、代码自动格式化</h2><p>使用husky, prettier, eslint在代码提交时自动格式化，并检查代码。</p><ul><li>husky。一个git钩子工具，这里主要用pre-commit钩子。通俗点讲就是husky可以在你commit之前帮你做一些事情。</li><li>prettier。 一个很流行的代码格式化工具，你很容易在编辑器找到实现它的各种插件，像vscode,atom,webstom都可以找到。这里用它在代码提交前做代码格式化。</li><li>eslint。 代码检查工具。eslint也可以负责一部分代码格式检查的工作，让其负责代码错误检查。</li><li>lint-staged。在你提交的文件中，执行自定义的指令。</li></ul><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><h4 id="安装eslint"><a href="#安装eslint" class="headerlink" title="安装eslint"></a>安装eslint</h4><p>如果上面已经安装过了就不用再次安装了，没有安装就按照上面 <code>ESLint规范</code> 步骤安装好。</p><h4 id="安装stylelint"><a href="#安装stylelint" class="headerlink" title="安装stylelint"></a>安装stylelint</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add stylelint stylelint-config-prettier stylelint-config-standard -D</span><br></pre></td></tr></table></figure><p>新建.stylelintrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [&quot;stylelint-config-standard&quot;, &quot;stylelint-config-prettier&quot;],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;selector-pseudo-class-no-unknown&quot;: null,</span><br><span class="line">    &quot;shorthand-property-no-redundant-values&quot;: null,</span><br><span class="line">    &quot;at-rule-empty-line-before&quot;: null,</span><br><span class="line">    &quot;at-rule-name-space-after&quot;: null,</span><br><span class="line">    &quot;comment-empty-line-before&quot;: null,</span><br><span class="line">    &quot;declaration-bang-space-before&quot;: null,</span><br><span class="line">    &quot;declaration-empty-line-before&quot;: null,</span><br><span class="line">    &quot;function-comma-newline-after&quot;: null,</span><br><span class="line">    &quot;function-name-case&quot;: null,</span><br><span class="line">    &quot;function-parentheses-newline-inside&quot;: null,</span><br><span class="line">    &quot;function-max-empty-lines&quot;: null,</span><br><span class="line">    &quot;function-whitespace-after&quot;: null,</span><br><span class="line">    &quot;number-leading-zero&quot;: null,</span><br><span class="line">    &quot;number-no-trailing-zeros&quot;: null,</span><br><span class="line">    &quot;rule-empty-line-before&quot;: null,</span><br><span class="line">    &quot;selector-combinator-space-after&quot;: null,</span><br><span class="line">    &quot;selector-descendant-combinator-no-non-space&quot;: null,</span><br><span class="line">    &quot;selector-list-comma-newline-after&quot;: null,</span><br><span class="line">    &quot;selector-pseudo-element-colon-notation&quot;: null,</span><br><span class="line">    &quot;unit-no-unknown&quot;: null,</span><br><span class="line">    &quot;no-descending-specificity&quot;: null,</span><br><span class="line">    &quot;value-list-max-empty-lines&quot;: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装prettier"><a href="#安装prettier" class="headerlink" title="安装prettier"></a>安装prettier</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add prettier eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure><h4 id="安装husky，lint-staged"><a href="#安装husky，lint-staged" class="headerlink" title="安装husky，lint-staged"></a>安装husky，lint-staged</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add husky lint-staged pretty-quick -D</span><br></pre></td></tr></table></figure><h3 id="prettier配置"><a href="#prettier配置" class="headerlink" title="prettier配置"></a>prettier配置</h3><p>在eslintrc.json修改如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"airbnb"</span>, <span class="string">"prettier"</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建.prettierrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;singleQuote&quot;: true,</span><br><span class="line">  &quot;trailingComma&quot;: &quot;es5&quot;,</span><br><span class="line">  &quot;printWidth&quot;: 100,</span><br><span class="line">  &quot;overrides&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;files&quot;: &quot;.prettierrc&quot;,</span><br><span class="line">      &quot;options&quot;: &#123; &quot;parser&quot;: &quot;json&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置.eslintignore文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build<span class="comment">/*.js</span></span><br></pre></td></tr></table></figure><h3 id="husky钩子配置"><a href="#husky钩子配置" class="headerlink" title="husky钩子配置"></a>husky钩子配置</h3><p>husky会在你提交前，调用pre-commit钩子，执行lint-staged，如果代码不符合prettier配置的规则，会进行格式化；然后再用eslint的规则进行检查，如果有不符合规则且无法自动修复的，就会停止此次提交。如果都通过了就会讲代码添加到stage，然后commit。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    // ...</span><br><span class="line">    "lint-staged": "lint-staged",</span><br><span class="line">    "lint-staged:js": "eslint --ext .js --fix",</span><br><span class="line">    "prettier": "prettier --write ./src/**/**/**/*"</span><br><span class="line">  &#125;,</span><br><span class="line">  "husky": &#123;</span><br><span class="line">    "hooks": &#123;</span><br><span class="line">      "pre-commit": "lint-staged"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "lint-staged": &#123;</span><br><span class="line">    "linters": &#123;</span><br><span class="line">      "**/*.&#123;js,jsx,scss&#125;": [</span><br><span class="line">        "prettier --write",</span><br><span class="line">        <span class="string">"git add"</span></span><br><span class="line">      ],</span><br><span class="line">      "**/*.&#123;js,jsx&#125;": "npm run lint-staged:js",</span><br><span class="line">      "**/*.scss": "stylelint --syntax=scss"</span><br><span class="line">    &#125;,</span><br><span class="line">    "ignore": [</span><br><span class="line">      <span class="string">"**/dist/public/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，我们的react开发环境对于打包、代码规范以及提升开发效率的一些配置我们都具备了，可以开心的写我们的react了。接下来我们就可以把这些配置单独完善成一个库，通过我们的 cli 脚手架拉取直接基于它来开发，Let’s go脚手架开发…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webpack 4&lt;/li&gt;
&lt;li&gt;Babel 7&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇主要使用针对代码
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>动手搭建react开发环境二</title>
    <link href="http://yoursite.com/2019/07/12/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/07/12/动手搭建react开发环境二/</id>
    <published>2019-07-12T01:31:10.000Z</published>
    <updated>2019-07-22T07:21:11.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>webpack 4</li><li>Babel 7</li></ul><blockquote><p>本篇主要使用针对上篇的webpack配置进行优化</p></blockquote><h2 id="webpack优化"><a href="#webpack优化" class="headerlink" title="webpack优化"></a>webpack优化</h2><h3 id="1、抽取css（MiniCssExtractPlugin）"><a href="#1、抽取css（MiniCssExtractPlugin）" class="headerlink" title="1、抽取css（MiniCssExtractPlugin）"></a>1、抽取css（MiniCssExtractPlugin）</h3><p>为每个引入 CSS 的 JS 文件创建一个 CSS 文件，提高首页加载速度</p><ul><li>把 style-loader 替换成 MiniCssExtractPlugin.loader</li><li>新增 plugins</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 'style-loader',</span></span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="comment">// ...同上</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].[hash].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'[id].[hash].css'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、压缩CSS（OptimizeCssAssetsWebpackPlugin）"><a href="#2、压缩CSS（OptimizeCssAssetsWebpackPlugin）" class="headerlink" title="2、压缩CSS（OptimizeCssAssetsWebpackPlugin）"></a>2、压缩CSS（OptimizeCssAssetsWebpackPlugin）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、压缩JS"><a href="#3、压缩JS" class="headerlink" title="3、压缩JS"></a>3、压缩JS</h3><p>webpack 4只要在生产模式下， 代码就会自动压缩<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: <span class="string">'production'</span>,</span><br></pre></td></tr></table></figure></p><h3 id="4、代码分割（SplitChunksPlugin）"><a href="#4、代码分割（SplitChunksPlugin）" class="headerlink" title="4、代码分割（SplitChunksPlugin）"></a>4、代码分割（SplitChunksPlugin）</h3><p>代码分割，单独打包，可以有效避免所有页面只生成一个js文件，首屏加载很慢的情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span>,   <span class="comment">// include all types of chunks</span></span><br><span class="line">      <span class="comment">// minSize: 30000,   // 引入的库大于30kb时才会做代码分割</span></span><br><span class="line">      <span class="comment">// minChunks: 1,     // 一个模块至少被用了1次才会被分割</span></span><br><span class="line">      <span class="comment">// maxAsyncRequests: 5,     // 同时异步加载的模块数最多是5个，如果超过5个则不做代码分割</span></span><br><span class="line">      <span class="comment">// maxInitialRequests: 3,   // 入口文件进行加载时，引入的库最多分割出3个js文件</span></span><br><span class="line">      <span class="comment">// automaticNameDelimiter: '~',  // 生成文件名的文件链接符</span></span><br><span class="line">      <span class="comment">// name: true,   // 开启自定义名称效果</span></span><br><span class="line">      <span class="comment">// cacheGroups: &#123;  // 判断分割出的代码放到那里去</span></span><br><span class="line">      <span class="comment">//   vendors: &#123;   // 配合chunks：‘all’使用，表示如果引入的库是在node-modules中，那就会把这个库分割出来并起名为vendors.js</span></span><br><span class="line">      <span class="comment">//     test: /[\/]node_modules[\/]/,</span></span><br><span class="line">      <span class="comment">//     priority: -10,</span></span><br><span class="line">      <span class="comment">//     filename: 'vendors.js'</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">//   default: &#123;  // 为非node-modules库中分割出的代码设置默认存放名称</span></span><br><span class="line">      <span class="comment">//     priority: -20,</span></span><br><span class="line">      <span class="comment">//     reuseExistingChunk: true, // 避免被重复打包分割</span></span><br><span class="line">      <span class="comment">//     filename: 'common.js'</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5、配置全局变量"><a href="#5、配置全局变量" class="headerlink" title="5、配置全局变量"></a>5、配置全局变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'development'</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔥Tip1 问题：当用 DefinePlugin 来配置全局变量时，只给依赖中注入了环境变量，也就是src文件夹下面的和依赖的模块。当我们在webpack配置文件中去取 process.env.NODE_ENV 依然是 undefined。</p><blockquote><p>解决：在package.json命令中注入<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server NODE_ENV=development --config ./build/webpack.config.js",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="6、CSS-Tree-Shaking"><a href="#6、CSS-Tree-Shaking" class="headerlink" title="6、CSS Tree Shaking"></a>6、CSS Tree Shaking</h3><p>去除项目代码中用不到的 CSS 样式，仅保留被使用的样式代码</p><p>🔥Tip2 问题：当使用 CSS Tree Shaking 的时候，需要把 css-modules 关闭，不然 css 会被全部清除掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add glob-all purify-css purifycss-webpack -D</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PurifyCSS = <span class="built_in">require</span>(<span class="string">"purifycss-webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">"glob-all"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> PurifyCSS(&#123;</span><br><span class="line">      paths: glob.sync([</span><br><span class="line">        <span class="comment">// 要做CSS Tree Shaking的路径文件</span></span><br><span class="line">        path.resolve(__dirname, <span class="string">"../public/*.html"</span>), <span class="comment">// 请注意，我们同样需要对 html 文件进行 tree shaking</span></span><br><span class="line">        path.resolve(__dirname, <span class="string">"../src/*.js"</span>)</span><br><span class="line">      ])</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、JS-Tree-Shaking"><a href="#7、JS-Tree-Shaking" class="headerlink" title="7、JS Tree Shaking"></a>7、JS Tree Shaking</h3><p>清除到代码中无用的js代码，只支持import方式引入，不支持commonjs的方式引入</p><p>webpack 4只要在生产模式下， tree shaking就会生效。</p><h3 id="8、resolve（解析）"><a href="#8、resolve（解析）" class="headerlink" title="8、resolve（解析）"></a>8、resolve（解析）</h3><p>能设置模块如何被解析。</p><ul><li>extension: 指定extension之后可以不用在require或是import的时候加文件扩展名,会依次尝试添加扩展名进行匹配</li><li>alias: 配置别名可以加快webpack查找模块的速度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: path.join(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、模块热替换HMR"><a href="#9、模块热替换HMR" class="headerlink" title="9、模块热替换HMR"></a>9、模块热替换HMR</h3><p>模块热替换也称为HMR，代码更新时只会更新被修改部分都显示。有如下有点</p><ul><li>针对于样式调试更加方便</li><li>只会更新被修改代码的那部分显示，提升开发效率</li><li>保留在完全重新加载页面时丢失的应用程序状态。</li></ul><p>这里我们采用Node.js的方式实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn add express webpack-dev-middleware webpack-hot-middleware react-hot-loader cross-env -D</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">touch dev-server.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dev-server.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-hot-middleware"</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> complier = webpack(config);   <span class="comment">// 编译器，编译器执行一次就会重新打包一下代码</span></span><br><span class="line"><span class="keyword">const</span> app = express();  <span class="comment">// 生成一个实例</span></span><br><span class="line"><span class="keyword">const</span> DIST_DIR = path.resolve(__dirname, <span class="string">'../'</span>, <span class="string">'dist'</span>);  <span class="comment">// 设置静态访问文件路径</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="built_in">parseInt</span>(process.env.PORT, <span class="number">10</span>) || <span class="number">8586</span>;</span><br><span class="line"><span class="keyword">const</span> host = process.env.HOST || <span class="string">'localhost'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> devMiddleware = webpackDevMiddleware(complier, &#123;</span><br><span class="line">  quiet: <span class="literal">true</span>,</span><br><span class="line">  noInfo: <span class="literal">true</span>,</span><br><span class="line">  stats: <span class="string">'minimal'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> hotMiddleware = webpackHotMiddleware(complier, &#123;</span><br><span class="line">  log: <span class="literal">false</span>,</span><br><span class="line">  heartbeat: <span class="number">2000</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.use(devMiddleware)</span><br><span class="line">app.use(hotMiddleware)</span><br><span class="line"><span class="comment">// 设置访问静态文件的路径</span></span><br><span class="line">app.use(express.static(DIST_DIR))</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`App running at: http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;)  <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><p>修改webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: [</span><br><span class="line">      <span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>,</span><br><span class="line">      <span class="string">'./src/index.js'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          isDev ? <span class="string">'style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: &#123;</span><br><span class="line">                localIdentName: <span class="string">'[local]_[hash:base64:5]'</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              sourceMap: !isDev &amp;&amp; <span class="literal">true</span>, <span class="comment">// 开发时刷新会导致闪屏（样式加载慢一步）</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'postcss-loader'</span>, <span class="comment">// 使用 postcss 为 css 加上浏览器前缀</span></span><br><span class="line">          <span class="string">'sass-loader'</span>, <span class="comment">// 编译scss</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(), <span class="comment">// 用于启动HMR时可以显示模块的相对路径</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">// 开启HMR(热替换功能,替换更新部分,不重载页面！) 相当于在命令行加 --hot</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改入口文件index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppContainer &#125; <span class="keyword">from</span> <span class="string">'react-hot-loader'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;AppContainer&gt;</span><br><span class="line">      &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;Router /&gt;</span><br><span class="line">      &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>AppContainer&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line">render();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 热更新 */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./router/index.js'</span>, () =&gt; &#123;</span><br><span class="line">    render();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改script命令行<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"start": "cross-env NODE_ENV=development node ./build/dev-server.js",</span><br></pre></td></tr></table></figure></p><p>ok，当我们修改代码时，页面就不需要刷新了，而是直接更新变化的部分。</p><h3 id="10、BundleAnalyzerPlugin"><a href="#10、BundleAnalyzerPlugin" class="headerlink" title="10、BundleAnalyzerPlugin"></a>10、BundleAnalyzerPlugin</h3><p>使用交互式可缩放树形图可视化webpack输出文件的大小，可以方便我们针对代码依赖的大小进行优化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">      analyzerMode: <span class="string">'server'</span>,</span><br><span class="line">      analyzerHost: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">      analyzerPort: <span class="number">8889</span>,</span><br><span class="line">      reportFilename: <span class="string">'report.html'</span>,</span><br><span class="line">      defaultSizes: <span class="string">'parsed'</span>,</span><br><span class="line">      openAnalyzer: <span class="literal">true</span>,</span><br><span class="line">      generateStatsFile: <span class="literal">false</span>,</span><br><span class="line">      statsFilename: <span class="string">'stats.json'</span>,</span><br><span class="line">      statsOptions: <span class="literal">null</span>,</span><br><span class="line">      logLevel: <span class="string">'info'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script"</span>: &#123;</span><br><span class="line">    <span class="attr">"analyz"</span>: <span class="string">"cross-env NODE_ENV=production npm_config_report=true npm run build"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack分离配置文件"><a href="#webpack分离配置文件" class="headerlink" title="webpack分离配置文件"></a>webpack分离配置文件</h2><p>针对开发环境和发布环境配置对应的webpack，公共的部分提取出来，再使用 webpack-merge 来将不同环境下的配置合并起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">touch webpack.base.conf.js</span><br><span class="line">touch webpack.dev.conf.js</span><br><span class="line">touch webpack.prd.conf.js</span><br><span class="line"> </span><br><span class="line">yarn add webpack-merge -D</span><br></pre></td></tr></table></figure><h3 id="1、提取公共配置"><a href="#1、提取公共配置" class="headerlink" title="1、提取公共配置"></a>1、提取公共配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">'./src/index.js'</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// ...同webpack.config.js的modules</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 最终创建的文件名</span></span><br><span class="line">      template: path.join(__dirname, <span class="string">'../public/index.html'</span>), <span class="comment">// 指定模板路径</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: path.join(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      <span class="comment">// 代码分割按需加载、提取公共代码</span></span><br><span class="line">      chunks: <span class="string">'all'</span>, <span class="comment">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  performance: <span class="literal">false</span>, <span class="comment">// 关闭性能提示</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2、配置开发环境"><a href="#2、配置开发环境" class="headerlink" title="2、配置开发环境"></a>2、配置开发环境</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.conf.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devtool: <span class="string">'cheap-module-eval-soure-map'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">//实现刷新浏览器webpack-hot-middleware/client?noInfo=true&amp;reload=true 是必填的</span></span><br><span class="line">    main: [</span><br><span class="line">      <span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>,</span><br><span class="line">      <span class="string">'./src/index.js'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    filename: <span class="string">"bundle.[name].[hash].js"</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="comment">// new webpack.DefinePlugin(&#123;</span></span><br><span class="line">    <span class="comment">// 'process.env.NODE_ENV': JSON.stringify('development'),</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    contentBase: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">8586</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// 该选项的作用所有的404都连接到index.html</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 代理到后端的服务地址</span></span><br><span class="line">      <span class="comment">// "/api": "http://localhost:3000"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3、配置发布环境"><a href="#3、配置发布环境" class="headerlink" title="3、配置发布环境"></a>3、配置发布环境</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prd.conf.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'cheap-module-source-map'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    publicPath: <span class="string">'/'</span>, <span class="comment">// 打包路径</span></span><br><span class="line">    <span class="comment">// 输出目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    filename: <span class="string">'bundle.[name].[hash].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    usedExports: <span class="literal">true</span>,</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span>, <span class="comment">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        <span class="comment">// 公共代码打包分组配置</span></span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          name: <span class="string">'vendors'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].[hash].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'[id].[hash].css'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// new webpack.DefinePlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   'process.env.NODE_ENV': JSON.stringify('production'),</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4、修改script命令行"><a href="#4、修改script命令行" class="headerlink" title="4、修改script命令行"></a>4、修改script命令行</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"start": "cross-env NODE_ENV=development node ./build/dev-server.js",</span><br><span class="line">"build": "cross-env NODE_ENV=production webpack --config ./build/webpack.prod.conf.js",</span><br></pre></td></tr></table></figure><p>写到这里，一个基本的React开发环境也就搭起来了，接下来就可以针对代码或者开发效率进行优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webpack 4&lt;/li&gt;
&lt;li&gt;Babel 7&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇主要使用针对上篇
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>动手搭建react开发环境一</title>
    <link href="http://yoursite.com/2019/07/11/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80/"/>
    <id>http://yoursite.com/2019/07/11/动手搭建react开发环境一/</id>
    <published>2019-07-11T01:42:50.000Z</published>
    <updated>2019-07-18T07:08:50.704Z</updated>
    
    <content type="html"><![CDATA[<p>前言：接触webpack从在学校的那会起，也一直在使用它，用的都是别人封装好的，偶尔去修改一点点配置，也没有真正自己从零开始配置一个脚手架，接下来几篇将记录我对webpack以及开发中提升效率的配置，其中遇到的一些坑也会提示出来。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>webpack 4</li><li>Babel 7</li></ul><blockquote><p>本篇主要使用webpack搭建基础的React环境</p></blockquote><h3 id="快速浏览："><a href="#快速浏览：" class="headerlink" title="快速浏览："></a>快速浏览：</h3><ul><li><a href="http://hjingren.cn/2019/07/12/%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BA%8C/" target="_blank" rel="noopener">webpack优化篇</a></li></ul><h2 id="webpack核心概念"><a href="#webpack核心概念" class="headerlink" title="webpack核心概念"></a>webpack核心概念</h2><ul><li>entry: 入口起点</li><li>output: 输出</li><li>module: 模块，webpack中一切皆是模块</li><li>loader: 转换工具，webpack 只能理解 JavaScript 和 JSON 文件。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效模块，以供应用程序使用，以及被添加到依赖图中</li><li>plugin: 扩展插件，loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情，比如：打包优化，资源管理，注入环境变量等等</li><li>mode: webpac的打包环境[development, production]</li><li>chunk: 代码库，一个chunk由十多个模块组合而成，用于代码合并与分割</li></ul><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-template</span><br><span class="line">cd webpack-template</span><br><span class="line">mkdir src public build dist</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="2、安装webpack"><a href="#2、安装webpack" class="headerlink" title="2、安装webpack"></a>2、安装webpack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli -D</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">touch webpack.config.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的webpack配置</span></span><br><span class="line"><span class="comment">// webpack.config.js初始化内容</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,  <span class="comment">// 指定环境</span></span><br><span class="line">  entry: [<span class="string">"./src/index.js"</span>],  <span class="comment">// 打包入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,  <span class="comment">// 打包输出到 dist/bundle.js.</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;&#125;,</span><br><span class="line">  plugins:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package.json更改<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack --config ./build/webpack.config.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="3、HtmlWebpackPlugin"><a href="#3、HtmlWebpackPlugin" class="headerlink" title="3、HtmlWebpackPlugin"></a>3、HtmlWebpackPlugin</h3><p>将打包的js自动插入到 index.html 里面去。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin -D</span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">touch index.html</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 最终创建的文件名</span></span><br><span class="line">      template: path.join(__dirname, <span class="string">'../public/index.html'</span>), <span class="comment">// 指定模板路径</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、配置转义ES6-ES7-JSX"><a href="#4、配置转义ES6-ES7-JSX" class="headerlink" title="4、配置转义ES6/ES7/JSX"></a>4、配置转义ES6/ES7/JSX</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// @babel/polyfill: 模拟一个es6+的环境,提供es6方法和函数的垫片</span><br><span class="line">// core-js@2：@babel/preset-env实现按需引入polyfill时，声明core-js版本</span><br><span class="line">yarn add @babel/polyfill core-js@2</span><br><span class="line"> </span><br><span class="line">// babel-loader和@babel/core是核心模块</span><br><span class="line">// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript</span><br><span class="line">// @babel/preset-react 转换JSX</span><br><span class="line">yarn add babel-loader @babel/core @babel/preset-env @babel/preset-react @babel/plugin-proposal-class-properties -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建.babelrc文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>, <span class="comment">// 将es6的语法翻译成es5语法</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"useBuiltIns"</span>: <span class="string">"usage"</span>, <span class="comment">// 做@babel/polyfill补充时，按需补充，用到什么才补充什么</span></span><br><span class="line">        <span class="string">"corejs"</span>: <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"@babel/preset-react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-class-properties"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>🔥Tip1 问题：Support for the experimental syntax ‘classProperties’ isn’t currently enabled</p><blockquote><p>yarn add @babel/plugin-proposal-class-properties 并在plugins中配置</p></blockquote><p>🔥Tip2 提示：useBuiltIns 和 transform-runtime 不能同时使用，如果使用transform-runtime就不要配useBuiltInsor，一般独立的类库项目才用transform-runtime</p><h3 id="5、配置转义Typescript"><a href="#5、配置转义Typescript" class="headerlink" title="5、配置转义Typescript"></a>5、配置转义Typescript</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add typescript ts-loader -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">"ts-loader"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建tsconfig.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"rootDir"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"dist"</span>,</span><br><span class="line">    "module": "esnext", // 模块引入的方式</span><br><span class="line">    "target": "es6", // 转换为es6</span><br><span class="line">    "lib": ["dom", "es7"],</span><br><span class="line">    "jsx": "preserve",</span><br><span class="line">    "moduleResolution": "node",</span><br><span class="line">    "sourceMap": true,</span><br><span class="line">    "allowJs": true, // 在typescript中允许引入js文件</span><br><span class="line">    "forceConsistentCasingInFileNames": true,</span><br><span class="line">    "noImplicitReturns": true,</span><br><span class="line">    "noImplicitThis": true,</span><br><span class="line">    "noImplicitAny": true,</span><br><span class="line">    "noUnusedLocals": true,</span><br><span class="line">    "noUnusedParameters": true,</span><br><span class="line">    "strictNullChecks": true,</span><br><span class="line">    "importHelpers": true,</span><br><span class="line">    "suppressImplicitAnyIndexErrors": true,</span><br><span class="line">    "experimentalDecorators": true,</span><br><span class="line">    "downlevelIteration": true,</span><br><span class="line">    "allowSyntheticDefaultImports": true,</span><br><span class="line">    "paths": &#123;</span><br><span class="line">      "@/*": ["src/*"]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "exclude": ["node_modules", "dist", "build", "mock"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6、CleanWebpackPlugin"><a href="#6、CleanWebpackPlugin" class="headerlink" title="6、CleanWebpackPlugin"></a>6、CleanWebpackPlugin</h3><p>清除 dist 目录下旧版本文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add clean-webpack-plugin -D</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="comment">//...同上</span></span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、source-map"><a href="#7、source-map" class="headerlink" title="7、source-map"></a>7、source-map</h3><p>可以帮助我们定位到错误信息位置的文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devtool: <span class="string">"cheap-module-eval-source-map"</span>,  <span class="comment">// development</span></span><br><span class="line">devtool: <span class="string">"cheap-module-source-map"</span>,  <span class="comment">// production</span></span><br></pre></td></tr></table></figure></p><h3 id="8、WebpackDevServer"><a href="#8、WebpackDevServer" class="headerlink" title="8、WebpackDevServer"></a>8、WebpackDevServer</h3><p>webpack在本地为搭建了一个静态文件服务器，实时打包重加载修改的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    contentBase: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">8586</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">//  该选项的作用所有的404都连接到index.html</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 代理到后端的服务地址</span></span><br><span class="line">      <span class="comment">// "/api": "http://localhost:3000"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改package.json命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --config ./build/webpack.config.js",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="9、编译css和scss并使用css-modules"><a href="#9、编译css和scss并使用css-modules" class="headerlink" title="9、编译css和scss并使用css-modules"></a>9、编译css和scss并使用css-modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add css-loader style-loader sass-loader node-sass -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: &#123;</span><br><span class="line">                localIdentName: <span class="string">'[local]_[hash:base64:5]'</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">// sourceMap: !isDev &amp;&amp; true,</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'sass-loader'</span>, <span class="comment">// 编译scss</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔥Tip3 问题：当在 css-loader 配置上 sourceMap 时，配合热加载样式会闪屏</p><blockquote><p>sourceMap: !isDev &amp;&amp; true,</p></blockquote><h3 id="10、集成postcss"><a href="#10、集成postcss" class="headerlink" title="10、集成postcss"></a>10、集成postcss</h3><p>为css某些特性自动增加前缀，并做一些兼容处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">//...同上</span></span><br><span class="line">          <span class="string">'postcss-loader'</span>, <span class="comment">// 使用 postcss 为 css 加上浏览器前缀</span></span><br><span class="line">          <span class="string">'sass-loader'</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建postcss.config.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-preset-env'</span>: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建.browserlistrc文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>% <span class="keyword">in</span> CN</span><br><span class="line">android &gt;= <span class="number">4.4</span></span><br><span class="line">ios &gt;= <span class="number">8</span></span><br><span class="line">not ie &lt;= <span class="number">11</span></span><br></pre></td></tr></table></figure></p><h3 id="11、图片处理"><a href="#11、图片处理" class="headerlink" title="11、图片处理"></a>11、图片处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add file-loader url-loader -D</span><br><span class="line"><span class="comment"># file-loader 解决css等文件中引入图片路径的问题</span></span><br><span class="line"><span class="comment"># url-loader 当图片较小的时候会把图片BASE64编码，大于limit参数的时候还是使用file-loader 进行拷贝</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            outputPath: <span class="string">'images/'</span>,</span><br><span class="line">            limit: <span class="number">10</span> * <span class="number">1024</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12、字体文件处理"><a href="#12、字体文件处理" class="headerlink" title="12、字体文件处理"></a>12、字体文件处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...同上</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">'[name]-[hash:5].min.[ext]'</span>,</span><br><span class="line">              limit: <span class="number">5000</span>,</span><br><span class="line">              publicPath: <span class="string">'fonts/'</span>,</span><br><span class="line">              outputPath: <span class="string">'fonts/'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，webpack的基本配置我们已经准备的差不多了，赶紧写点react来试试水。</p><h2 id="测试React环境"><a href="#测试React环境" class="headerlink" title="测试React环境"></a>测试React环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react react-dom react-router react-router-dom</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        hello word~</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>执行 <code>npm start</code> ，如果页面上能正常显示 <code>hello word~</code> 那表示我们的webapck基础配置成功。</p><p>第一篇webpack基础配置到此结束了，下一篇对webpack进行优化配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：接触webpack从在学校的那会起，也一直在使用它，用的都是别人封装好的，偶尔去修改一点点配置，也没有真正自己从零开始配置一个脚手架，接下来几篇将记录我对webpack以及开发中提升效率的配置，其中遇到的一些坑也会提示出来。&lt;/p&gt;
&lt;h2 id=&quot;版本&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Nginx下升级https</title>
    <link href="http://yoursite.com/2019/06/11/Nginx%E4%B8%8B%E5%8D%87%E7%BA%A7https/"/>
    <id>http://yoursite.com/2019/06/11/Nginx下升级https/</id>
    <published>2019-06-11T07:26:49.000Z</published>
    <updated>2019-06-11T07:33:57.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="购买证书"><a href="#购买证书" class="headerlink" title="购买证书"></a>购买证书</h2><p>可以去阿里云的云盾证书服务<a href="https://common-buy.aliyun.com/?spm=5176.2020520163.cas.3.75c3lKQ2lKQ27E&amp;commodityCode=cas#/buy" target="_blank" rel="noopener">购买</a></p><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><p>在证书控制台下载 Nginx 版本证书。下载到本地的压缩文件包解压后包含：</p><ul><li><strong>.pem</strong>文件：证书文件</li><li><strong>.key</strong>文件：证书的私钥文件（申请证书时如果没有选择<strong>自动创建CSR</strong>，则没有该文件）</li></ul><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>1、在 Nginx 的安装目录下创建 cert 目录，并且将下载的全部文件拷贝到 cert 目录中，如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到 cert 目录下。</p><p>2、打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;   <span class="comment">#开启gzip</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>; <span class="comment">#低于1kb的资源不压缩</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">3</span>; <span class="comment">#压缩级别【1-9】，越大压缩率越高，同时消耗cpu资源也越多，建议设置在4左右。</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/javascript text/xml text/css;  <span class="comment">#需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片，下面会讲为什么。</span></span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>;  <span class="comment">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span></span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;  <span class="comment">#是否添加“Vary: Accept-Encoding”响应头</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default backlog=<span class="number">2048</span>; <span class="comment">#配置http可用</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl; <span class="comment">#配置https</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      ../cert/hzzly.pem; <span class="comment">#配置证书文件</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  ../cert/hzzly.key; <span class="comment">#配置私钥文件</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /home/hzzly;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># location ^~ /apis/ &#123;</span></span><br><span class="line">        <span class="comment">#     proxy_set_header Host $host;</span></span><br><span class="line">        <span class="comment">#     proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">        <span class="comment">#     proxy_set_header X-Forwarded-Server $host;</span></span><br><span class="line">        <span class="comment">#     # 匹配任何以 /apis/ 开始的请求，并停止匹配 其它location</span></span><br><span class="line">        <span class="comment">#     proxy_pass http://xxxxxxxxxx/;</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># location ^~ /assets/ &#123;</span></span><br><span class="line">        <span class="comment">#     gzip_static on;</span></span><br><span class="line">        <span class="comment">#     expires max;</span></span><br><span class="line">        <span class="comment">#     add_header Cache-Control public;</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、重启 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ ./nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="错误详解"><a href="#错误详解" class="headerlink" title="错误详解"></a>错误详解</h2><h3 id="1、Nginx如果未开启SSL模块，配置Https时提示错误"><a href="#1、Nginx如果未开启SSL模块，配置Https时提示错误" class="headerlink" title="1、Nginx如果未开启SSL模块，配置Https时提示错误"></a>1、Nginx如果未开启SSL模块，配置Https时提示错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] the <span class="string">"ssl"</span> parameter requires ngx_http_ssl_module <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><p><strong>Nginx开启SSL模块</strong></p><p>切换到源码包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.16.0</span><br></pre></td></tr></table></figure><p>修改新的configure参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>配置完成后，运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make  //这里不要进行make install，否则就是覆盖安装</span><br></pre></td></tr></table></figure><p>备份原有已安装好的nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br></pre></td></tr></table></figure><p>将刚刚编译好的nginx覆盖掉原有的nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ./objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin/</span><br></pre></td></tr></table></figure><p>重启 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ ./nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;购买证书&quot;&gt;&lt;a href=&quot;#购买证书&quot; class=&quot;headerlink&quot; title=&quot;购买证书&quot;&gt;&lt;/a&gt;购买证书&lt;/h2&gt;&lt;p&gt;可以去阿里云的云盾证书服务&lt;a href=&quot;https://common-buy.aliyun.com/?spm=5176.
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>图解词法作用域与作用域链</title>
    <link href="http://yoursite.com/2019/03/04/%E5%9B%BE%E8%A7%A3%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>http://yoursite.com/2019/03/04/图解词法作用域与作用域链/</id>
    <published>2019-03-04T07:53:11.000Z</published>
    <updated>2019-05-18T05:31:12.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p>作用域是指程序源代码中定义变量的区域。</p><p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p><p>JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。</p><p>想了解更多关于作用域的问题推荐阅读《你不知道的JavaScript上卷》第一章（或第一部分），从编译原理的角度说明什么是作用域。概括的说作用域就是一套设计良好的规则来存储变量，并且之后可以方便地找到这些变量。</p></blockquote><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>在你不知道的javascript上卷中是这样定义的：<strong>词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变(大部分情况下是这样的)。</strong></p><p>在JS中词法作用域的规则：</p><blockquote><ul><li>函数允许访问函数外部的数据</li><li>整个代码结构中只有函数可以限定作用域</li><li>作用规则首先使用提升规则分析</li><li>如果当前作用域中有了名字了，就不考虑外面的名字</li></ul></blockquote><p>栗1：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>栗2：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>只有函数才能制造作用域结构，那么只要是代码，至少有一个作用域，即全局作用域。</p><p>凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域，那么将这样的所有作用域列出来，可以有一个结构：函数内指向函数外的链式结构。</p><p>以上面栗2：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><ul><li>全局作用域，有三个标识符：foo、bar、a</li><li>bar 所创建的作用域，其中有一个标识符：a</li></ul><p>作用域是由代码写在哪里决定的，并且是逐级包含的。</p><p>我们用级链来表示一下以上代码块：</p><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/scope/scope1.png" alt="scope1"></p><p>从图中我们可以看到：函数foo和bar以及变量 a=2， 在1级链，而bar下又可以展开2级链，2级链上有a=3。程序bar()调用进入中间2级链，而bar中又调用了foo函数，此时程序进入foo的作用域链，按照向上查找的原则，程序会从这一条链向上查找，首先2级链没有a，向上到达1级链，刚好1级链上有a=2，所以就直接使用2，程序最后的结果就是打印2。</p><p>所以无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">《JavaScript深入之词法作用域和动态作用域》</a>思考题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/scope/scope2.png" alt="scope2"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;作用域是指程序源代码中定义变量的区域。&lt;/p&gt;
&lt;p&gt;作用域规定了如何查找变量，也就是确定当前执行代码对变
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>gitflow基本操作</title>
    <link href="http://yoursite.com/2019/03/03/gitflow%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/03/03/gitflow基本操作/</id>
    <published>2019-03-03T15:34:28.000Z</published>
    <updated>2019-05-09T06:12:51.415Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：在多组员，多项目等环境进行协同工作时，如果没有统一规范、统一流程，则会导致额外的工作量，甚至会做无用功。所以要减少版本冲突，减轻不必要的工作，就需要规范化的工作流程，本文就gitflow作简要的命令操作。</p></blockquote><h2 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h2><blockquote><p>master 只负责管理发布的状态。在提交时使用标签记录发布版本号。<br>develop 针对发布的日常开发分支。刚才我们已经讲解过有合并分支的功用。</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-workflow-1.png" alt="gitflow"></p><h2 id="开发分支"><a href="#开发分支" class="headerlink" title="开发分支"></a>开发分支</h2><h3 id="Git创建Develop分支的命令："><a href="#Git创建Develop分支的命令：" class="headerlink" title="Git创建Develop分支的命令："></a>Git创建Develop分支的命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop master</span><br></pre></td></tr></table></figure><h3 id="将Develop分支发布到Master分支的命令："><a href="#将Develop分支发布到Master分支的命令：" class="headerlink" title="将Develop分支发布到Master分支的命令："></a>将Develop分支发布到Master分支的命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到Master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 对Develop分支进行合并(使用了--no-ff参数，生成一个新的节点提交)</span></span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure><h2 id="临时性分支"><a href="#临时性分支" class="headerlink" title="临时性分支"></a>临时性分支</h2><blockquote><p>功能（feature）分支<br>预发布（release）分支<br>修补bug（fixbug）分支</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-workflow-2.png" alt="gitflow"></p><h2 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h2><h3 id="创建一个功能分支："><a href="#创建一个功能分支：" class="headerlink" title="创建一个功能分支："></a>创建一个功能分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-x develop</span><br></pre></td></tr></table></figure><h3 id="开发完成后，将功能分支合并到develop分支："><a href="#开发完成后，将功能分支合并到develop分支：" class="headerlink" title="开发完成后，将功能分支合并到develop分支："></a>开发完成后，将功能分支合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure><h3 id="删除feature分支："><a href="#删除feature分支：" class="headerlink" title="删除feature分支："></a>删除feature分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-x</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete feature-x</span><br></pre></td></tr></table></figure><h2 id="预发布分支"><a href="#预发布分支" class="headerlink" title="预发布分支"></a>预发布分支</h2><h3 id="创建一个预发布分支："><a href="#创建一个预发布分支：" class="headerlink" title="创建一个预发布分支："></a>创建一个预发布分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-1.2 develop</span><br></pre></td></tr></table></figure><h3 id="确认没有问题后，合并到master分支："><a href="#确认没有问题后，合并到master分支：" class="headerlink" title="确认没有问题后，合并到master分支："></a>确认没有问题后，合并到master分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-1.2</span><br><span class="line"><span class="comment"># 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a 1.2</span><br></pre></td></tr></table></figure><h3 id="再合并到develop分支："><a href="#再合并到develop分支：" class="headerlink" title="再合并到develop分支："></a>再合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure><h3 id="最后，删除预发布分支："><a href="#最后，删除预发布分支：" class="headerlink" title="最后，删除预发布分支："></a>最后，删除预发布分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d release-1.2</span><br></pre></td></tr></table></figure><h2 id="修补bug分支"><a href="#修补bug分支" class="headerlink" title="修补bug分支"></a>修补bug分支</h2><h3 id="创建一个修补bug分支："><a href="#创建一个修补bug分支：" class="headerlink" title="创建一个修补bug分支："></a>创建一个修补bug分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b fixbug-0.1 master</span><br></pre></td></tr></table></figure><h3 id="修补结束后，合并到master分支："><a href="#修补结束后，合并到master分支：" class="headerlink" title="修补结束后，合并到master分支："></a>修补结束后，合并到master分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br><span class="line"><span class="comment"># 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a 0.1.1</span><br></pre></td></tr></table></figure><h3 id="再合并到develop分支：-1"><a href="#再合并到develop分支：-1" class="headerlink" title="再合并到develop分支："></a>再合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br></pre></td></tr></table></figure><h3 id="最后，删除修补bug分支："><a href="#最后，删除修补bug分支：" class="headerlink" title="最后，删除修补bug分支："></a>最后，删除修补bug分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d fixbug-0.1</span><br></pre></td></tr></table></figure><h2 id="取消刚才的合并merge"><a href="#取消刚才的合并merge" class="headerlink" title="取消刚才的合并merge"></a>取消刚才的合并merge</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~</span><br></pre></td></tr></table></figure><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rebase 合并</span></span><br><span class="line">git checkout issue3</span><br><span class="line">git rebase master</span><br><span class="line"><span class="comment"># master 合并</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge issue3</span><br></pre></td></tr></table></figure><h3 id="修改冲突后的提交"><a href="#修改冲突后的提交" class="headerlink" title="修改冲突后的提交"></a>修改冲突后的提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="取消rebase"><a href="#取消rebase" class="headerlink" title="取消rebase"></a>取消rebase</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><h2 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h2><h3 id="commit-回退"><a href="#commit-回退" class="headerlink" title="commit 回退"></a>commit 回退</h3><blockquote><p>commit log</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-commit-log.png" alt="git-commit-log"></p><blockquote><p>commit reset</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-commit-reset.png" alt="git-commit-reset"></p><h3 id="push-回退"><a href="#push-回退" class="headerlink" title="push 回退"></a>push 回退</h3><blockquote><p>push log</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-push-log.png" alt="git-push-log"></p><blockquote><p>push reset</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-push-reset.png" alt="git-push-reset"></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="添加轻标签"><a href="#添加轻标签" class="headerlink" title="添加轻标签"></a>添加轻标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag v2.0</span><br><span class="line"><span class="comment"># 显示标签列表</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 显示标签列表包含标签资料的历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --decorate</span><br></pre></td></tr></table></figure><h2 id="添加注解标签"><a href="#添加注解标签" class="headerlink" title="添加注解标签"></a>添加注解标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v3.0</span><br><span class="line">// 或</span><br><span class="line">git tag -am <span class="string">"注解"</span> v3.0</span><br><span class="line"><span class="comment"># 显示标签的列表和注解</span></span><br><span class="line">git tag -n</span><br></pre></td></tr></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v2.0</span><br><span class="line">git tag -d v3.0</span><br></pre></td></tr></table></figure><h2 id="推送标签到远程"><a href="#推送标签到远程" class="headerlink" title="推送标签到远程"></a>推送标签到远程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.5</span><br></pre></td></tr></table></figure><h2 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="Git远程仓库地址变更"><a href="#Git远程仓库地址变更" class="headerlink" title="Git远程仓库地址变更"></a>Git远程仓库地址变更</h2><h3 id="查看所有远程仓库"><a href="#查看所有远程仓库" class="headerlink" title="查看所有远程仓库"></a>查看所有远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h3 id="删除远程仓库地址"><a href="#删除远程仓库地址" class="headerlink" title="删除远程仓库地址"></a>删除远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><h3 id="修改变更后的远程仓库地址"><a href="#修改变更后的远程仓库地址" class="headerlink" title="修改变更后的远程仓库地址"></a>修改变更后的远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin http://xxx.git</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">《Git分支管理策略–阮一峰》</a></li><li><a href="https://backlogtool.com/git-tutorial/cn/stepup/stepup1_1.html" target="_blank" rel="noopener">猴子都能懂的GIT入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：在多组员，多项目等环境进行协同工作时，如果没有统一规范、统一流程，则会导致额外的工作量，甚至会做无用功。所以要减少版本冲突，减轻不必要的工作，就需要规范化的工作流程，本文就gitflow作简要的命令操作。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>dva models一些隐藏的骚操作</title>
    <link href="http://yoursite.com/2019/02/27/dva%20models%E4%B8%80%E4%BA%9B%E9%9A%90%E8%97%8F%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/02/27/dva models一些隐藏的骚操作/</id>
    <published>2019-02-27T12:34:09.000Z</published>
    <updated>2019-02-27T12:36:14.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://dvajs.com/guide/getting-started.html" target="_blank" rel="noopener">dva</a> 是一个基于 redux 和 redux-saga 的数据流方案<br><a href="https://redux-saga.js.org/docs/api/" target="_blank" rel="noopener">redux-saga API</a></p></blockquote><h3 id="take-pattern"><a href="#take-pattern" class="headerlink" title="take(pattern)"></a>take(pattern)</h3><blockquote><p>使用take操作进行事件监听，用来命令 middleware 在 Store 上等待指定的 action。 在发起与 pattern 匹配的 action 之前，Generator 将暂停（eg：下一个请求的参数依赖前一个请求的结果）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; call, put, select, take &#125;) &#123;</span><br><span class="line">  <span class="keyword">yield</span> put(&#123;</span><br><span class="line">    type: <span class="string">'dict/xxxx'</span>,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">yield</span> take(<span class="string">'dict/xxxx/@@end'</span>);</span><br><span class="line">  <span class="keyword">const</span> dictData = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.dict.dicts);</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">yield</span> call(getList, &#123;</span><br><span class="line">    xxx: dictData.xxx</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="race-effects"><a href="#race-effects" class="headerlink" title="race(effects)"></a>race(effects)</h3><blockquote><p>任务的竞争，用来命令 middleware 在多个 Effect 间运行 竞赛（Race）（与 Promise.race([…]) 的行为类似）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; race &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; list, timeout &#125; = <span class="keyword">yield</span> race(&#123;</span><br><span class="line">    list: call(services.fetchList),</span><br><span class="line">    timeout: call(delay, TIMEOUT),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任务的并行执行"><a href="#任务的并行执行" class="headerlink" title="任务的并行执行"></a>任务的并行执行</h3><blockquote><p>把多个要并行执行的东西放在一个数组里，就可以并行执行，等所有的都结束之后，进入下个环节，类似promise.all的操作。一般有一些集成界面，比如dashboard，其中各组件之间业务关联较小，就可以用这种方式去分别加载数据，此时，整体加载时间只取决于时间最长的那个。</p></blockquote><blockquote><p>之前是 <code>yield []</code>, 后来 dva 升级了 saga 的版本之后就推荐用 <code>yield all([])</code></p></blockquote><ul><li><p>yield []</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [xx1_req, xx2_req, xx3_req] = <span class="keyword">yield</span> [</span><br><span class="line">    call(xx1, payload),</span><br><span class="line">    call(xx2, payload),</span><br><span class="line">    call(xx3, payload),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yield all([])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; all &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [xx1_req, xx2_req, xx3_req] = <span class="keyword">yield</span> all([</span><br><span class="line">    call(xx1, payload),</span><br><span class="line">    call(xx2, payload),</span><br><span class="line">    call(xx3, payload),</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dvajs.com/guide/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dva&lt;/a&gt; 是一个基于 redux 和 redux-saga 的数据流方
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>折腾一个chrome插件</title>
    <link href="http://yoursite.com/2019/01/04/%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%AAchrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/04/折腾一个chrome插件/</id>
    <published>2019-01-04T09:43:48.000Z</published>
    <updated>2019-01-04T09:49:11.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：作为一个开发者，是否有时一个单词不认识或者业务命名而烦恼呢，以至于需要打开浏览器，然后打开google翻译，如此繁琐的打开页面可能一天重复好几遍，而我们开发者对于浏览器标签打开的又多，所以如何简化我们重新打开标签来翻译呢？所以浏览器插件就非常强大了。</p></blockquote><p>chrome浏览器是一个工作、学习和生活的必备工具。除了chrome本身的基本能力（控制台等）外，能大幅提高这个神器的使用体验的是它可扩展能力（插件）以及丰富的插件生态。接下来我们就来折腾一个在线翻译的chrome插件。</p><p><img src="https://raw.githubusercontent.com/hzzly/online-translate/master/online-translate.png" alt="online-translate"></p><p>好了，有了需求我们就得开发了(囧)！</p><h2 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h2><ul><li>manifest.json  // chrome配置文件</li><li>webpack配置(打包，热编译)</li><li>jsonp</li><li>ajax封装</li></ul><p>开发之前了解一下什么是Chrome插件=&gt;</p><h2 id="什么是Chrome插件"><a href="#什么是Chrome插件" class="headerlink" title="什么是Chrome插件"></a>什么是Chrome插件</h2><p>Chrome插件是一个用Web技术开发、用来增强浏览器功能的软件，它其实就是一个由HTML、CSS、JS、图片等资源组成的一个.crx后缀的压缩包。</p><h2 id="核心介绍（manifest-json）"><a href="#核心介绍（manifest-json）" class="headerlink" title="核心介绍（manifest.json）"></a>核心介绍（manifest.json）</h2><p>这是一个Chrome插件最重要也是必不可少的文件，用来配置所有和插件相关的配置，必须放在需要浏览器打包的根目录。其中，manifest_version、name、version3个是必不可少的，description和icons是推荐的。</p><p>栗子(比较全)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 清单文件的版本，这个必须写，而且必须是2</span></span><br><span class="line">  <span class="string">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 插件的名称</span></span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"demo"</span>,</span><br><span class="line">  <span class="comment">// 插件的版本</span></span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="comment">// 插件描述</span></span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"简单的Chrome扩展demo"</span>,</span><br><span class="line">  <span class="comment">// 图标，一般偷懒全部用一个尺寸的也没问题</span></span><br><span class="line">  <span class="string">"icons"</span>: &#123;</span><br><span class="line">    <span class="string">"16"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="string">"48"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="string">"128"</span>: <span class="string">"img/icon.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 会一直常驻的后台JS或后台页面</span></span><br><span class="line">  <span class="string">"background"</span>: &#123;</span><br><span class="line">    <span class="comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span></span><br><span class="line">    <span class="string">"page"</span>: <span class="string">"background.html"</span></span><br><span class="line">    <span class="comment">//"scripts": ["js/background.js"]</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 浏览器右上角图标设置，browser_action、page_action、app必须三选一</span></span><br><span class="line">  <span class="string">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="string">"default_icon"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="comment">// 图标悬停时的标题，可选</span></span><br><span class="line">    <span class="string">"default_title"</span>: <span class="string">"这是一个示例Chrome插件"</span>,</span><br><span class="line">    <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当某些特定页面打开才显示的图标</span></span><br><span class="line">  <span class="comment">/*"page_action": &#123;</span></span><br><span class="line"><span class="comment">    "default_icon": "img/icon.png",</span></span><br><span class="line"><span class="comment">    "default_title": "我是pageAction",</span></span><br><span class="line"><span class="comment">    "default_popup": "popup.html"</span></span><br><span class="line"><span class="comment">  &#125;,*/</span></span><br><span class="line">  <span class="comment">// 需要直接注入页面的JS</span></span><br><span class="line">  <span class="string">"content_scripts"</span>: [&#123;</span><br><span class="line">    <span class="comment">//"matches": ["http://*/*", "https://*/*"],</span></span><br><span class="line">    <span class="comment">// "&lt;all_urls&gt;" 表示匹配所有地址</span></span><br><span class="line">    <span class="string">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</span><br><span class="line">    <span class="comment">// 多个JS按顺序注入</span></span><br><span class="line">    <span class="string">"js"</span>: [<span class="string">"js/jquery-1.8.3.js"</span>, <span class="string">"js/content-script.js"</span>],</span><br><span class="line">    <span class="comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span></span><br><span class="line">    <span class="string">"css"</span>: [<span class="string">"css/custom.css"</span>],</span><br><span class="line">    <span class="comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span></span><br><span class="line">    <span class="string">"run_at"</span>: <span class="string">"document_start"</span></span><br><span class="line">  &#125;, &#123; <span class="comment">// 这里仅仅是为了演示content-script可以配置多个规则</span></span><br><span class="line">    <span class="string">"matches"</span>: [<span class="string">"*://*/*.png"</span>, <span class="string">"*://*/*.jpg"</span>, <span class="string">"*://*/*.gif"</span>, <span class="string">"*://*/*.bmp"</span>],</span><br><span class="line">    <span class="string">"js"</span>: [<span class="string">"js/show-image-content-size.js"</span>]</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 权限申请</span></span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"contextMenus"</span>, <span class="comment">// 右键菜单</span></span><br><span class="line">    <span class="string">"tabs"</span>, <span class="comment">// 标签</span></span><br><span class="line">    <span class="string">"notifications"</span>, <span class="comment">// 通知</span></span><br><span class="line">    <span class="string">"webRequest"</span>, <span class="comment">// web请求</span></span><br><span class="line">    <span class="string">"webRequestBlocking"</span>,</span><br><span class="line">    <span class="string">"storage"</span>, <span class="comment">// 插件本地存储</span></span><br><span class="line">    <span class="string">"http://*/*"</span>, <span class="comment">// 需要请求的地址</span></span><br><span class="line">    <span class="string">"https://*/*"</span> <span class="comment">// 需要请求的地址</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>介绍完后我们就来开发了(码代码中…)</p><h2 id="开发-基于Vue"><a href="#开发-基于Vue" class="headerlink" title="开发(基于Vue)"></a>开发(基于Vue)</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir online-translate</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> online-translate</span><br><span class="line"></span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">// 文件层级</span><br><span class="line">├── chrome  // 浏览器打包的文件夹</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src  // 源码</span><br><span class="line">└── webpack.config.js  // wepack</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装项目依赖</span><br><span class="line">npm install vue element-ui --save</span><br><span class="line"></span><br><span class="line">// 安装开发依赖</span><br><span class="line">npm install babel-core babel-loader babel-plugin-component babel-preset-env cross-env css-loader file-loader html-webpack-plugin style-loader vue-loader vue-template-compiler webpack webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    popup: <span class="string">'./src/popup.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./chrome'</span>),</span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// other vue-loader options go here</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: <span class="string">'style-loader!css-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name].[ext]?[hash]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// new webpack.HotModuleReplacementPlugin(),</span></span><br><span class="line">    <span class="comment">// new webpack.NamedModulesPlugin(),</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.join(__dirname, <span class="string">'./index.html'</span>),</span><br><span class="line">      inject: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    noInfo: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  performance: &#123;</span><br><span class="line">    hints: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'#eval-source-map'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports.devtool = <span class="string">'#source-map'</span></span><br><span class="line">  <span class="comment">// http://vue-loader.vuejs.org/en/workflow/production.html</span></span><br><span class="line">  <span class="built_in">module</span>.exports.plugins = (<span class="built_in">module</span>.exports.plugins || []).concat([</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      sourceMap: <span class="literal">false</span>,</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好了，我们就能愉快的开发了</p><h3 id="接下来就是-Vue-的开发了！"><a href="#接下来就是-Vue-的开发了！" class="headerlink" title="接下来就是 Vue 的开发了！"></a>接下来就是 <code>Vue</code> 的开发了！</h3><p>正常的项目开发…</p><p>详细源码可以看<a href="https://github.com/hzzly/online-translate" target="_blank" rel="noopener">github</a></p><h3 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>把代码打包到了chrome文件夹内，然后就可以使用chrome扩展进行打包扩展程序，会生成.crx和.pem文件，然后直接发布或者把.crx文件拖进扩展程序内进行内测。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：作为一个开发者，是否有时一个单词不认识或者业务命名而烦恼呢，以至于需要打开浏览器，然后打开google翻译，如此繁琐的打开页面可能一天重复好几遍，而我们开发者对于浏览器标签打开的又多，所以如何简化我们重新打开标签来翻译呢？所以浏览器插件就非常
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Node 配置文件的定制</title>
    <link href="http://yoursite.com/2018/11/13/Node-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9A%E5%88%B6/"/>
    <id>http://yoursite.com/2018/11/13/Node-配置文件的定制/</id>
    <published>2018-11-13T13:54:17.000Z</published>
    <updated>2019-01-02T07:58:14.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在任何一个项目中都缺少不了配置文件<br>具有下面的特点: 数据量不大,信息需要长期保存,容易维护</p></blockquote><p>现在是大前端的时代，Node 的重要性不言而喻。在使用 Node 作为后端或者中间层的技术架构时，往往需要用到一些可配置的变量，比如数据库，在开发时我们会连开发的数据库，生成环境我们需要连生产的数据库，这样我们就需要根据不同的环境加载不一样的配置文件，从而提高我们的开发效率，接下来我们就一起来定制我们的配置文件。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在 Node 中可以通过 <code>process.env</code> 来访问当前的环境变量信息。<br>比如我们在 <code>package.json</code> 中通过 <code>scripts</code> 定义的shell脚本执行对应的命令。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node ./bin/www",</span><br><span class="line">    "dev": "NODE_ENV=dev node ./bin/www",</span><br><span class="line">    "pro": "NODE_ENV=pro node ./bin/www"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，上面有三条条启动命令，一条是默认的 <code>start</code>，另外两条我们通过 <code>NODE_ENV=xxx</code> 来设置了对应的环境，当我们使用 <code>npm run dev</code> 启动项目的时候，通过 <code>process.env.NODE_ENV</code> 就可以取到项目的当前环境。</p><h2 id="通过环境变量指定对应的配置文件"><a href="#通过环境变量指定对应的配置文件" class="headerlink" title="通过环境变量指定对应的配置文件"></a>通过环境变量指定对应的配置文件</h2><p>在上面我们通过shell脚本指定了对应的环境，那我们就可以通过 <code>process.env.NODE_ENV</code> 来加载对应的配置文件了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    ...省略</span><br><span class="line">    mongodb: <span class="string">'mongodb://localhost:27017/demo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  build: &#123;</span><br><span class="line">    ...省略</span><br><span class="line">    mongodb: <span class="string">'mongodb://127.0.0.0:27017/demo'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongodb = process.env.NODE_ENV === <span class="string">'dev'</span> ? config.build.mongodb : config.dev.mongodb</span><br></pre></td></tr></table></figure></p><p>这样，我们就可以开开心心的放心的写代码了，但这样写还不是很优雅，都写到一个文件里了，不太好维护，接下来我们就真正的动态加载，不需要我们再加判断了。</p><h2 id="config-lite"><a href="#config-lite" class="headerlink" title="config-lite"></a>config-lite</h2><blockquote><p><a href="https://github.com/nswbmw/config-lite" target="_blank" rel="noopener">config-lite</a>： A super simple &amp; flexible &amp; intuitive config module, support yaml &amp; toml.</p></blockquote><p>这一次，我们针对不同的环境，将配置写入不同的配置文件中，在项目根目录下新建config目录，里面新建不同环境的配置文件：default.js、dev.js和pro.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// default.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dev.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  host: <span class="string">"https://dev.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://localhost:27017/test'</span>,</span><br><span class="line">  ...省略</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pro.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  host: <span class="string">"https://pro.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://127.0.0.0:27017/test'</span>,</span><br><span class="line">  ...省略</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>好了，配置文件写好了，如何使用呢？这里我们使用的 <code>config-lite</code> 插件，这个插件依旧是依据我们shell脚本指定的对应环境来选择不同的配置文件。</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i config-lite --save</span><br></pre></td></tr></table></figure><p>当我们使用 <code>npm run dev</code> 启动项目的时候，<code>config-lite</code>会去抓取dev.js配置，并且会与default.js里配置去合并，如果有相同的对象，会覆盖default.js里的配置。同理 <code>npm run pro</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'config-lite'</span>)(__dirname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、如果运行 npm run dev</span></span><br><span class="line">config = &#123;</span><br><span class="line">  host: <span class="string">"https://dev.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://localhost:27017/test'</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...省略</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、如果运行 npm run pro</span></span><br><span class="line">config = &#123;</span><br><span class="line">  host: <span class="string">"https://pro.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://127.0.0.0:27017/test'</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们就得到了更好维护的动态加载配置文件。还有一个<code>问题</code>（大多数情况下，在windows平台下使用类似于: NODE_ENV=pro的命令行指令会卡住，windows平台与POSIX在使用命令行时有许多区别（例如在POSIX，使用$ENV_VAR,在windows，使用%ENV_VAR%。。。））。那该如何解决呢？👇</p><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h2><blockquote><p>cross-env 让这一切变得简单，不同平台使用唯一指令，无需担心跨平台问题</p></blockquote><h3 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i cross-env --save</span><br></pre></td></tr></table></figure><h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node ./bin/www",</span><br><span class="line">    "dev": "cross-env NODE_ENV=dev node ./bin/www",</span><br><span class="line">    "pro": "cross-env NODE_ENV=pro node ./bin/www"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 NODE_ENV 便设置成功，无需担心跨平台问题。</p><h2 id="egg-配置文件的使用"><a href="#egg-配置文件的使用" class="headerlink" title="egg 配置文件的使用"></a>egg 配置文件的使用</h2><p>在 config 目录(脚手架生成的)新增 config.dev.js 和 config.pro.js，然后在文件内写我们对应环境的配置。</p><ul><li>配置环境<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "script": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "dev": "EGG_SERVER_ENV=dev egg-bin dev",</span><br><span class="line">    "pro": "EGG_SERVER_ENV=pro egg-scripts start",</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在 egg 中通过 <code>EGG_SERVER_ENV</code> 来声明对应的环境变量。</p><ul><li>使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="keyword">this</span>.app.config <span class="comment">// 得到对应环境的配置文件(也会和 default 进行合并)</span></span><br></pre></td></tr></table></figure></li></ul><p>完结，好久没写了，有点生疏了，苦笑！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在任何一个项目中都缺少不了配置文件&lt;br&gt;具有下面的特点: 数据量不大,信息需要长期保存,容易维护&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在是大前端的时代，Node 的重要性不言而喻。在使用 Node 作为后端或者中间层的技术架构时，往往需要
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>前端路由的实现原理</title>
    <link href="http://yoursite.com/2017/09/16/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/09/16/前端路由的实现原理/</id>
    <published>2017-09-16T13:09:32.000Z</published>
    <updated>2019-03-05T12:22:34.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><blockquote><p>在现代前端开发中，路由是非常重要的一环。但路由到底是什么呢？有些说：路由就是指随着浏览器地址栏的变化，展示给用户的页面也不相同。这是从路由的用途上来解释路由是什么的，还有一种说法是：路由就是URL到函数的映射。这是从路由的实现原理上来解释路由是什么的。这两种说法都很有道理。</p></blockquote><blockquote><p>早期的路由都是后端实现的，直接根据 url 来 reload 页面，页面变得越来越复杂服务器端压力变大，随着 ajax 的出现，页面实现非 reload 就能刷新数据，也给前端路由的出现奠定了基础。我们可以通过记录 url 来记录 ajax 的变化，从而实现前端路由。</p></blockquote><p>前端路由说白了就是监听浏览器路由地址的变化，渲染不同的页面或组件。<br>下面主要讲两种主流方式实现前端路由：</p><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>这里不细说每一个 API 的用法，大家可以看 MDN 的文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/History" target="_blank" rel="noopener">https://developer.mozilla.org…</a></p><p>14年后，因为HTML5标准发布，新增了两个 API，history.pushState 和 history.replaceState，通过这两个 API 可以改变 url 地址且不会发送请求。</p><p>这两个 API 都接收三个参数，分别是</p><ul><li>状态对象（state object） — 一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</li><li>标题（title） — FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</li><li>地址（URL） — 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。<br>相同之处是两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新。</li></ul><p>不同之处在于，pushState会增加一条新的历史记录，而replaceState则会替换当前的历史记录。</p><p>我们拿大百度的控制台举例子（具体说是我的浏览器在百度首页打开控制台。。。）</p><p>我们在控制台输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"https://www.baidu.com/?name=hzzly"</span>);</span><br></pre></td></tr></table></figure><p>好，我们观察此时的 url 变成了这样<br><code>https://www.baidu.com/?name=hzzly</code></p><p>我们这里不一一测试，直接给出其它用法，大家自行尝试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"https://www.baidu.com/name/hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/hzzly</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"?name=hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com?name=hzzly</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"name=hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name=hzzly</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"/name/hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/hzzly</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"name/hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/hzzly</span></span><br></pre></td></tr></table></figure></p><p>每次改变 url 页面并没有刷新，同样根据上文所述，浏览器会产生历史记录。</p><p>我们需要一个根据监听history变化触发的事件 —— popstate 事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchAndUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 匹配路径 做 dom 更新操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, matchAndUpdate)</span><br></pre></td></tr></table></figure></p><h1 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h1><p>我们经常在 url 中看到 #，这个 # 有两种情况，一个是我们所谓的锚点，比如典型的各个标题之间的跳转等，路由里的 # 不叫锚点，我们称之为 hash。</p><p>同样我们需要一个根据监听哈希变化触发的事件 —— hashchange 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchAndUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 匹配 hash 做 dom 更新操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, matchAndUpdate)</span><br></pre></td></tr></table></figure><p>我们用 window.location 处理哈希的改变时不会重新渲染页面，而是当作新页面加到历史记录中，这样我们跳转页面就可以在 hashchange 事件中注册 ajax 从而改变页面内容。</p><h1 id="前端路由优缺点"><a href="#前端路由优缺点" class="headerlink" title="前端路由优缺点"></a>前端路由优缺点</h1><p>优点：<br>1.从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升。<br>2.在某些场合中，用ajax请求，可以让页面无刷新，页面变了但Url没有变化，用户就不能复制到想要的地址，用前端路由做单页面网页就很好的解决了这个问题</p><p>缺点：<br>使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;路由&quot;&gt;&lt;a href=&quot;#路由&quot; class=&quot;headerlink&quot; title=&quot;路由&quot;&gt;&lt;/a&gt;路由&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在现代前端开发中，路由是非常重要的一环。但路由到底是什么呢？有些说：路由就是指随着浏览器地址栏的变化，展示给用户的
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>在Vue.js中使用Mixins</title>
    <link href="http://yoursite.com/2017/09/12/%E5%9C%A8Vue-js%E4%B8%AD%E4%BD%BF%E7%94%A8Mixins/"/>
    <id>http://yoursite.com/2017/09/12/在Vue-js中使用Mixins/</id>
    <published>2017-09-12T03:15:14.000Z</published>
    <updated>2019-01-02T07:46:54.665Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个很常见的场景: 有两个非常相似的组件, 它们拥有非常相似的基本功能, 但是它们之间又有足够的不同的地方, 该如何选择呢? 我们是应该将它们分成两个完全不同的组件呢? 还是创建一个基础组件, 然后定义足够多的props以方便区分使用场景?</p></blockquote><p>这两种方式都不是完美的: 如果你将它们分成两个完全不同的组件, 在需求变化(功能变化)时, 可能会增加需要同时修改两个组件的风险, 这违反了”DRY”的前提. 另一方面, 太多的props很快会让人变得凌乱, 并且, 迫使维护人员, 甚至是你自己, 要首先理解这些props的上下文才能使用它, 这会让人非常失望.</p><p>Vue的Mixins是非常实用的编程方式, 因为最终实用的编程是通过不断减少运动部件(moving parts)使代码变得容易理解. (关于这一点, Michael Feathers有一个很好的引用). 一个mixin允许你封装一个功能, 以便你能在整个应用程序中的不同组件中使用它. 如果mixin被正确的创建, 它们是纯粹的–它们不会修改或更改函数的作用范围(scope)之外的内容, 因此, 您可以在多个地方执行它们, 并且只要输入值相同, 总是能非常可靠得得到相同的结果. 这真的非常强大.</p><h1 id="认识Mixins"><a href="#认识Mixins" class="headerlink" title="认识Mixins"></a>认识Mixins</h1><p><a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">混合 (mixins)</a> 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混合对象可以包含任意组件选项。以组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p><h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><blockquote><p>假设我们有一些不同的组件, 它们的工作是切换状态boolean, 一个模态(modal)和一个提示(tooltip). 这些tooltips和modals没有很多共同之处, 除了这个功能: 它们看起来不一样, 它们使用起来也不尽相同, 但是它们的逻辑是相似的 .</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//modal</span></span><br><span class="line"><span class="keyword">const</span> Modal = &#123;</span><br><span class="line">  template: <span class="string">'#modal'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShowing: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleShow() &#123;</span><br><span class="line">      <span class="keyword">this</span>.isShowing = !<span class="keyword">this</span>.isShowing;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//tooltip</span></span><br><span class="line"><span class="keyword">const</span> Tooltip = &#123;</span><br><span class="line">  template: <span class="string">'#tooltip'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShowing: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleShow() &#123;</span><br><span class="line">      <span class="keyword">this</span>.isShowing = !<span class="keyword">this</span>.isShowing;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以从中提取逻辑, 并创建可以复用的部分：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toggle = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShowing: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleShow() &#123;</span><br><span class="line">      <span class="keyword">this</span>.isShowing = !<span class="keyword">this</span>.isShowing;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Modal = &#123;</span><br><span class="line">  template: <span class="string">'#modal'</span>,</span><br><span class="line">  mixins: [toggle]</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Tooltip = &#123;</span><br><span class="line">  template: <span class="string">'#tooltip'</span>,</span><br><span class="line">  mixins: [toggle]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>duang — 一个小而简单的🌰让我们知道了Mixins对于封装一些可复用的功能如此有趣、方便、实用。</p><h1 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h1><blockquote><ul><li><a href="https://github.com/hzzly/MagicMusic/blob/master/src/common/js/mixin.js" target="_blank" rel="noopener">MagicMusic</a> star(200+)</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一个很常见的场景: 有两个非常相似的组件, 它们拥有非常相似的基本功能, 但是它们之间又有足够的不同的地方, 该如何选择呢? 我们是应该将它们分成两个完全不同的组件呢? 还是创建一个基础组件, 然后定义足够多的props以方便区分使用场景?&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue插件的开发(一)</title>
    <link href="http://yoursite.com/2017/08/25/Vue%E6%8F%92%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/08/25/Vue插件的开发-一/</id>
    <published>2017-08-25T05:59:55.000Z</published>
    <updated>2017-08-25T06:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：随着 Vue.js 越来越火，Vue.js 的相关插件也在不断的被贡献出来，数不胜数。比如官方推荐的 vue-router、vuex 等，都是非常优秀的插件。但是我们更多的人还只停留在使用的阶段，比较少自己开发。所以接下来通过一个简单的 vue-toast 插件，来了解掌握插件的开发和使用。</p></blockquote><h1 id="认识插件"><a href="#认识插件" class="headerlink" title="认识插件"></a>认识插件</h1><p>想要开发插件，先要认识一个插件是什么样子的。<a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">官方文档:插件</a></p><p>Vue.js 的插件应当有一个公开方法 install 。这个方法的第一个参数是 Vue 构造器 , 第二个参数是一个可选的选项对象:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 1. 添加全局方法或属性，如: vue-custom-element</span></span><br><span class="line"><span class="comment">// 逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line">Vue.directive(<span class="string">'my-directive'</span>, &#123;  <span class="comment">// 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch</span></span><br><span class="line">bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line"><span class="comment">// 逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 3. 通过全局 mixin方法添加一些组件选项，如: vuex</span></span><br><span class="line"><span class="comment">// 逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br><span class="line">Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;  <span class="comment">// 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现</span></span><br><span class="line"><span class="comment">// 逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来要讲到的 vue-toast 插件则是通过添加实例方法实现的。我们先来看个小例子。先新建个js文件来编写插件：toast.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toast.js</span></span><br><span class="line"><span class="keyword">var</span> Toast = &#123;&#125;;</span><br><span class="line">Toast.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">Vue.prototype.$msg = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure><p>在 main.js 中，需要导入 toast.js 并且通过全局方法 Vue.use() 来使用插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">'./toast.js'</span>;</span><br><span class="line">Vue.use(Toast);</span><br></pre></td></tr></table></figure><p>然后，我们在组件中来获取该插件定义的 $msg 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">mounted()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$msg);         <span class="comment">// Hello World</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，控制台成功的打印出了 Hello World 。既然 $msg 能获取到，那么我们就可以来实现我们的 vue-toast 插件了。</p><h1 id="开发-vue-toast-插件"><a href="#开发-vue-toast-插件" class="headerlink" title="开发 vue-toast 插件"></a>开发 vue-toast 插件</h1><p>需求：在组件中通过调用 <strong>this.$toast(‘网络请求失败’) </strong>来弹出提示，默认在底部显示。可以通过调用 <strong>this.$toast.top()</strong> 或 <strong>this.$toast.center()</strong> 等方法来实现在不同位置显示。</p><p>整理一下思路，弹出提示的时候，我可以在 body 中添加一个 div 用来显示提示信息，不同的位置我通过添加不同的类名来定位，那就可以开始写了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toast.js</span></span><br><span class="line"><span class="keyword">var</span> Toast = &#123;&#125;;</span><br><span class="line">Toast.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">Vue.prototype.$toast = <span class="function">(<span class="params">tips</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> toastTpl = Vue.extend(&#123;     <span class="comment">// 1、创建构造器，定义好提示信息的模板</span></span><br><span class="line">template: <span class="string">'&lt;div class="vue-toast"&gt;'</span> + tips + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> tpl = <span class="keyword">new</span> toastTpl().$mount().$el;  <span class="comment">// 2、创建实例，挂载到文档以后的地方</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(tpl);     <span class="comment">// 3、把创建的实例添加到body中</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;        <span class="comment">// 4、延迟2.5秒后移除该提示</span></span><br><span class="line"><span class="built_in">document</span>.body.removeChild(tpl);</span><br><span class="line">&#125;, <span class="number">2500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure><p>好像很简单，我们就实现了 this.$toast() ，接下来显示不同位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toast.js</span></span><br><span class="line">[<span class="string">'bottom'</span>, <span class="string">'center'</span>, <span class="string">'top'</span>].forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">Vue.prototype.$toast[type] = <span class="function">(<span class="params">tips</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Vue.prototype.$toast(tips,type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里把 type 传给 $toast 在该方法里进行不同位置的处理，上面说了通过添加不同的类名(toast-bottom、toast-top、toast-center)来实现，那 $toast 方法需要小小修改一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$toast = <span class="function">(<span class="params">tips,type</span>) =&gt;</span> &#123;     <span class="comment">// 添加 type 参数</span></span><br><span class="line"><span class="keyword">let</span> toastTpl = Vue.extend(&#123;             <span class="comment">// 模板添加位置类</span></span><br><span class="line">template: <span class="string">'&lt;div class="vue-toast toast-'</span>+ type +<span class="string">'"&gt;'</span> + tips + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像差不多了。但是如果我想默认在顶部显示，我每次都要调用 this.$toast.top() 好像就有点多余了，我能不能 this.$toast() 就直接在我想要的地方呢？还有我不想要 2.5s 后才消失呢？这时候注意到 Toast.install(Vue,options) 里的 options 参数，我们可以在 Vue.use() 通过 options 传进我们想要的参数。最后修改插件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Toast = &#123;&#125;;</span><br><span class="line">Toast.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> opt = &#123;</span><br><span class="line">defaultType:<span class="string">'bottom'</span>,   <span class="comment">// 默认显示位置</span></span><br><span class="line">duration:<span class="string">'2500'</span>         <span class="comment">// 持续时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> property <span class="keyword">in</span> options)&#123;</span><br><span class="line">opt[property] = options[property];  <span class="comment">// 使用 options 的配置</span></span><br><span class="line">&#125;</span><br><span class="line">Vue.prototype.$toast = <span class="function">(<span class="params">tips,type</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(type)&#123;</span><br><span class="line">opt.defaultType = type;         <span class="comment">// 如果有传type，位置则设为该type</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'vue-toast'</span>).length)&#123;</span><br><span class="line"><span class="comment">// 如果toast还在，则不再执行</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> toastTpl = Vue.extend(&#123;</span><br><span class="line">template: <span class="string">'&lt;div class="vue-toast toast-'</span>+opt.defaultType+<span class="string">'"&gt;'</span> + tips + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> tpl = <span class="keyword">new</span> toastTpl().$mount().$el;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(tpl);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(tpl);</span><br><span class="line">&#125;, opt.duration)</span><br><span class="line">&#125;</span><br><span class="line">[<span class="string">'bottom'</span>, <span class="string">'center'</span>, <span class="string">'top'</span>].forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">Vue.prototype.$toast[type] = <span class="function">(<span class="params">tips</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Vue.prototype.$toast(tips,type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure><p>这样子一个简单的 vue 插件就实现了，并且可以通过 npm 打包发布，下次就可以使用 npm install 来安装了。</p><p>好久没更新博客，逃。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：随着 Vue.js 越来越火，Vue.js 的相关插件也在不断的被贡献出来，数不胜数。比如官方推荐的 vue-router、vuex 等，都是非常优秀的插件。但是我们更多的人还只停留在使用的阶段，比较少自己开发。所以接下来通过一个简单的 vu
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue与echarts的可视化</title>
    <link href="http://yoursite.com/2017/07/09/vue%E4%B8%8Eecharts%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2017/07/09/vue与echarts的可视化/</id>
    <published>2017-07-09T13:51:32.000Z</published>
    <updated>2017-07-09T15:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新博客了，但我并没有偷懒哦。因为进入了公司实习，需要熟悉项目需求以及技术栈，公司技术栈用的react与dva，所以需要现学现卖。趁着周末写写vue，美滋滋，哈哈哈。</p><h1 id="一、配方"><a href="#一、配方" class="headerlink" title="一、配方"></a>一、配方</h1><ul><li>vue</li><li>echarts</li></ul><h1 id="二、参考案例"><a href="#二、参考案例" class="headerlink" title="二、参考案例"></a>二、参考案例</h1><ul><li><a href="http://gallery.echartsjs.com/explore.html" target="_blank" rel="noopener">gallery</a> 社区demo</li></ul><h1 id="三、实践"><a href="#三、实践" class="headerlink" title="三、实践"></a>三、实践</h1><h2 id="3-1安装-echarts"><a href="#3-1安装-echarts" class="headerlink" title="3.1安装 echarts"></a>3.1安装 echarts</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><h2 id="3-2vue-dom-结构"><a href="#3-2vue-dom-结构" class="headerlink" title="3.2vue dom 结构"></a>3.2vue dom 结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"charts"</span> <span class="attr">style</span>=<span class="string">"height:300px;width:300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3在vue中引入echarts"><a href="#3-3在vue中引入echarts" class="headerlink" title="3.3在vue中引入echarts"></a>3.3在vue中引入echarts</h2><p>因为ECharts初始化必须绑定dom，所以我们只能在vue的mounted生命周期里初始化。</p><h3 id="3-3-1全部引入"><a href="#3-3-1全部引入" class="headerlink" title="3.3.1全部引入"></a>3.3.1全部引入</h3><p>可以直接在项目代码中 require(‘echarts’) 或 import 得到 ECharts，我这里通过es6的import来引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></span><br><span class="line"> </span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>.initChart()</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  initChart () &#123;</span><br><span class="line">    <span class="keyword">this</span>.chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'charts'</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">      title: &#123; <span class="attr">text</span>: <span class="string">'ECharts 入门示例'</span> &#125;,</span><br><span class="line">      tooltip: &#123;&#125;,</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: &#123;&#125;,</span><br><span class="line">      series: [&#123;</span><br><span class="line">        name: <span class="string">'销量'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        data: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.chart.setOption(option)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-2按需引入"><a href="#3-3-2按需引入" class="headerlink" title="3.3.2按需引入"></a>3.3.2按需引入</h3><p>默认使用 require(‘echarts’) 得到的是已经加载了所有图表和组件的 ECharts 包，因此体积会比较大，如果在项目中对体积要求比较苛刻，也可以只按需引入需要的模块。</p><p>例如上面示例代码中只用到了柱状图，提示框和标题组件，因此在引入的时候也只需要引入这些模块，可以有效的将打包后的体积从 400 多 KB 减小到 170 多 KB。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 ECharts 主模块</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span></span><br><span class="line"><span class="comment">// 引入柱状图</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/chart/bar'</span></span><br><span class="line"><span class="comment">// 引入提示框和标题组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/component/tooltip'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/component/title'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 后面的跟上面的就一样了</span></span><br></pre></td></tr></table></figure><h3 id="3-3-3动态改变ECharts的配置-option"><a href="#3-3-3动态改变ECharts的配置-option" class="headerlink" title="3.3.3动态改变ECharts的配置(option)"></a>3.3.3动态改变ECharts的配置(option)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种 watch options变化 利用vue的深度 watcher，options一有变化就重新setOption</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    handler(options) &#123;</span><br><span class="line">      <span class="keyword">this</span>.chart.setOption(<span class="keyword">this</span>.options)</span><br><span class="line">    &#125;,</span><br><span class="line">    deep: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种 只watch 数据的变化 只有数据变化时触发ECharts</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  seriesData(val) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setOptions(&#123;<span class="attr">series</span>:val&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4结果"><a href="#3-4结果" class="headerlink" title="3.4结果"></a>3.4结果</h2><p><img src="http://omt3u4bph.bkt.clouddn.com/echarts.png" alt="vue-echarts"><br>到这我们在页面上就可以显示图表了，实现可视化数据，是不是很酷炫。</p><h1 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h1><p><a href="http://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts" target="_blank" rel="noopener">在 webpack 中使用 ECharts</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有更新博客了，但我并没有偷懒哦。因为进入了公司实习，需要熟悉项目需求以及技术栈，公司技术栈用的react与dva，所以需要现学现卖。趁着周末写写vue，美滋滋，哈哈哈。&lt;/p&gt;
&lt;h1 id=&quot;一、配方&quot;&gt;&lt;a href=&quot;#一、配方&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="echarts" scheme="http://yoursite.com/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>基于vue-cli配置proxyTable开发环境的跨域</title>
    <link href="http://yoursite.com/2017/06/21/%E5%9F%BA%E4%BA%8Evue-cli%E9%85%8D%E7%BD%AEproxyTable%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2017/06/21/基于vue-cli配置proxyTable开发环境的跨域/</id>
    <published>2017-06-21T02:30:54.000Z</published>
    <updated>2017-06-21T02:52:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：目前前端项目普遍采用前后端分离的思想来开发，这样在和后端进行数据联调时势必会面临恼人的跨域问题，最近几个基于Vue开发项目时也遇到了这个问题，网上关于跨域的解决方案很多，这里就简单的介绍基于vue-cli配置proxyTable的开发环境来解决跨域。</p></blockquote><p>还不懂前后端分离的可以移步👉：<a href="http://hjingren.cn/2017/03/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%B0%9D%E8%AF%95/" target="_blank" rel="noopener">前后端分离的尝试</a></p><h1 id="配置-proxyTable"><a href="#配置-proxyTable" class="headerlink" title="配置 proxyTable"></a>配置 proxyTable</h1><p>在 config/index.js 中，把 dev 下的 proxytable 里面配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://api.hjingren.cn'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用（请求）"><a href="#使用（请求）" class="headerlink" title="使用（请求）"></a>使用（请求）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/api/playlist/detail?id=12345'</span>)</span><br></pre></td></tr></table></figure><p>最后：vue-cli的这个配置来自于其使用的插件<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a>，想进一步了解的可以深入研究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：目前前端项目普遍采用前后端分离的思想来开发，这样在和后端进行数据联调时势必会面临恼人的跨域问题，最近几个基于Vue开发项目时也遇到了这个问题，网上关于跨域的解决方案很多，这里就简单的介绍基于vue-cli配置proxyTable的开发环境来解
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>基于vue-cli配置移动端自适应</title>
    <link href="http://yoursite.com/2017/06/16/%E5%9F%BA%E4%BA%8Evue-cli%E9%85%8D%E7%BD%AE%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://yoursite.com/2017/06/16/基于vue-cli配置移动端自适应/</id>
    <published>2017-06-16T10:44:03.000Z</published>
    <updated>2017-06-16T10:44:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前写过一篇关于移动端屏幕适配：<a href="http://hjingren.cn/2017/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E8%A7%A3%E5%86%B3/" target="_blank" rel="noopener">移动端屏幕适配的解决</a>，今天来聊一聊基于vue-cli配置的移动端屏幕适配问题。</p></blockquote><p>配方还是一样：手淘的 <a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a> + rem</p><h1 id="配置-flexible"><a href="#配置-flexible" class="headerlink" title="配置 flexible"></a>配置 flexible</h1><h2 id="安装-lib-flexible"><a href="#安装-lib-flexible" class="headerlink" title="安装 lib-flexible"></a>安装 lib-flexible</h2><p>在命令行中运行如下安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible --save</span><br></pre></td></tr></table></figure><h2 id="引入-lib-flexible"><a href="#引入-lib-flexible" class="headerlink" title="引入 lib-flexible"></a>引入 lib-flexible</h2><p>在项目入口文件 main.js 里 引入 lib-flexible</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib-flexible'</span></span><br></pre></td></tr></table></figure><h2 id="添加-meta-标签"><a href="#添加-meta-标签" class="headerlink" title="添加 meta 标签"></a>添加 meta 标签</h2><p>在项目根目录的 index.html 中添加如下 meta</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="px-转-rem"><a href="#px-转-rem" class="headerlink" title="px 转 rem"></a>px 转 rem</h1><p>实际开发中，我们通过设计稿得到的值单位是 px，所以要将 px 转换成 rem 再写进样式中。<br>将 px 转换成 rem 我们将使用 px2rem 这个工具，它有 webpack 的 loader：<a href="https://github.com/Jinjiang/px2rem-loader" target="_blank" rel="noopener">px2rem-loader</a></p><h2 id="安装-px2rem-loader"><a href="#安装-px2rem-loader" class="headerlink" title="安装 px2rem-loader"></a>安装 px2rem-loader</h2><p>在命令行中运行如下安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i px2rem-loade --save-dev</span><br></pre></td></tr></table></figure><h2 id="配置-px2rem-loade"><a href="#配置-px2rem-loade" class="headerlink" title="配置 px2rem-loade"></a>配置 px2rem-loade</h2><p>在 vue-cli 生成的 webpack 配置中，vue-loader 的 options 和其他样式文件 loader 最终是都是由 build/utils.js 里的一个方法生成的。</p><p>我们只需在 cssLoader 后再加上一个 px2remLoader 即可，px2rem-loader 的 remUnit 选项意思是 1rem=多少像素，结合 lib-flexible 的方案，我们将 px2remLoader 的 options.remUnit 设置成设计稿宽度的 1/10，这里我们假设设计稿宽为 750px。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line"><span class="keyword">var</span> cssLoader = &#123;</span><br><span class="line">  loader: <span class="string">'css-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    minimize: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">    sourceMap: options.sourceMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> px2remLoader = &#123;</span><br><span class="line">  loader: <span class="string">'px2rem-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    remUnit: <span class="number">75</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>并放进 loaders 数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span>(<span class="params">loader, loaderOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loaders = [cssLoader, px2remLoader]</span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>修改配置后需要重启，然后我们在组件中写单位直接写 px，设计稿量多少就可以写多少了，舒服多了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前写过一篇关于移动端屏幕适配：&lt;a href=&quot;http://hjingren.cn/2017/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Nginx与Node的纠缠</title>
    <link href="http://yoursite.com/2017/06/11/Nginx%E4%B8%8ENode%E7%9A%84%E7%BA%A0%E7%BC%A0/"/>
    <id>http://yoursite.com/2017/06/11/Nginx与Node的纠缠/</id>
    <published>2017-06-11T12:10:54.000Z</published>
    <updated>2017-06-11T12:13:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：前几天面试被问到：“nginx的好处？nginx和node的比较”，所以在这里总结一波。</p></blockquote><h1 id="nginx的好处"><a href="#nginx的好处" class="headerlink" title="nginx的好处"></a>nginx的好处</h1><ul><li>热部署</li><li>高并发连接</li><li>处理响应请求很快</li><li>具有很高的可靠性</li></ul><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>在不停止服务的情况下修改配置文件，更换日志文件等功能。</p><h2 id="高并发连接"><a href="#高并发连接" class="headerlink" title="高并发连接"></a>高并发连接</h2><p>高并发：是指在同一个时间点，有很多用户同时的访问URL地址，比如：淘宝的双11，双12，就会产生高并发。</p><p>这是一个很重要的一个特性！在这一个 互联网 快速发展， 互联网 用户数量不断增加，一些大公司、网站都需要面对高并发请求，如果有一个能够在峰值顶住10万以上并发请求的Server，肯定会得到大家的青睐。理论上，Nginx支持的并发连接上限取决于你的内存，10万远未封顶。</p><h1 id="Nginx能做什么"><a href="#Nginx能做什么" class="headerlink" title="Nginx能做什么"></a>Nginx能做什么</h1><ul><li>反向代理</li><li>负载均衡</li><li>HTTP服务器（包含动静分离）</li><li>正向代理</li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理应该是Nginx做的最多的一件事了，什么是反向代理呢，以下是百度百科的说法：反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。 </p><p>下面贴上一段简单的实现反向代理的代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  localhost;</span><br><span class="line"> </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://localhost:8081;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们访问localhost的时候，就相当于访问localhost:8081了</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡可以把用户的请求分摊到多个服务器上进行处理，从而实现了对海量用户的访问支持。负载均衡的架构如图所示：</p><p>简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line"><span class="attribute">server_name</span>  localhost;</span><br><span class="line"> </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://test;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h2><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  localhost;</span><br><span class="line"> </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>   /home/hzzly;</span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line"><span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line"><span class="attribute">root</span>   html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。</p><h1 id="node的特点"><a href="#node的特点" class="headerlink" title="node的特点"></a>node的特点</h1><ul><li>它是一个javascript运行环境</li><li>依赖于Chrome V8引擎进行代码解释</li><li>事件驱动</li><li>非阻塞I/O</li><li>轻量、可伸缩，适于实时数据交互应用</li><li>并发连接（高并发）</li></ul><h2 id="node应用场景"><a href="#node应用场景" class="headerlink" title="node应用场景"></a>node应用场景</h2><p>NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景。（RESTful API，聊天）</p><h2 id="Event-Loop、消息队列、事件轮询"><a href="#Event-Loop、消息队列、事件轮询" class="headerlink" title="Event Loop、消息队列、事件轮询"></a>Event Loop、消息队列、事件轮询</h2><p>通过回调函数（Callback）和异步机制来实现非阻塞。<br>通过事件队列和事件循环来实现并发连接。</p><p>异步函数在执行结束后，会在事件队列中添加一个事件（回调函数）(遵循先进先出原则)，主线程中的代码执行完毕后（即一次循环结束），下一次循环开始就在事件队列中“读取”事件，然后调用它所对应的回调函数。这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）</p><h1 id="nginx和node的比较"><a href="#nginx和node的比较" class="headerlink" title="nginx和node的比较"></a>nginx和node的比较</h1><ul><li>一个更专业，一个更全面。</li><li>Nginx 采用C编写，性能更高，但是它仅适合于做web服务器，用于反向代理或者负载均衡等服务。</li><li>NodeJs高性能平台，web服务只是其中一块，NodeJs在处理业务层用的是JS编写,采用的是异步编程方式和思维方式。</li><li>Node.js发展方向不再单独是一个Web服务器，而是一个面向网络的平台，它甚至可以是TCP服务器，或者变身为远端服务器的客户端。</li></ul><h1 id="nginx与node的完美搭配"><a href="#nginx与node的完美搭配" class="headerlink" title="nginx与node的完美搭配"></a>nginx与node的完美搭配</h1><p>node自己本身可以作为服务器进行驱动，但是node本身对文件的处理能力并不是很好，所以当我们的生产环境中应尽量使用nginx来处理静态的资源以及反向代理，同时也解决了node分布式以及负载均衡的相关问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：前几天面试被问到：“nginx的好处？nginx和node的比较”，所以在这里总结一波。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;nginx的好处&quot;&gt;&lt;a href=&quot;#nginx的好处&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>js实现图片懒加载</title>
    <link href="http://yoursite.com/2017/06/09/js%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2017/06/09/js实现图片懒加载/</id>
    <published>2017-06-09T14:23:39.000Z</published>
    <updated>2019-07-09T11:35:09.931Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：最近面试都被问到了这个问题，所以在这里整理一波。</p></blockquote><h1 id="懒加载的意义"><a href="#懒加载的意义" class="headerlink" title="懒加载的意义"></a>懒加载的意义</h1><blockquote><p>懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数，对服务器缓压。</p></blockquote><p><strong>预加载:</strong>提前加载好，缓存到本地，当需要的时候直接读取缓存，对服务器增压</p><h1 id="懒加载实现方式"><a href="#懒加载实现方式" class="headerlink" title="懒加载实现方式"></a>懒加载实现方式</h1><ul><li><p>第一种是纯粹的延迟加载，使用setTimeOut或setInterval进行加载延迟</p></li><li><p>第二种是条件加载，符合某些条件，或触发了某些事件才开始异步下载</p></li><li><p>第三种是可视区加载，即仅加载用户可以看到的区域，这个主要由监控滚动条来实现，一般会在距用户看到某图片前一定距离遍开始加载，这样能保证用户拉下时正好能看到图片</p></li></ul><p>Web 图片的懒加载就是通过读取img元素，然后获得img元素的data-src（也可以约定为其他属性名）属性的值，并赋予img的src，从而实现动态加载图片的机制</p><h2 id="1、懒加载HTML约定"><a href="#1、懒加载HTML约定" class="headerlink" title="1、懒加载HTML约定"></a>1、懒加载HTML约定</h2><p>我们首先需要给准备实施懒加载的img元素添加指定的class 这里为m-lazyload ,同时将img src赋值给 data-src属性。<br>具体示例为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"m-lazyload"</span> <span class="attr">data-src</span>=<span class="string">"imgUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="2、懒加载JavaScript实现"><a href="#2、懒加载JavaScript实现" class="headerlink" title="2、懒加载JavaScript实现"></a>2、懒加载JavaScript实现</h2><p>动态加载总共分为以下几个步骤:<br>1、添加页面滚动监听事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">imgBoxList.addEventListener(<span class="string">'scroll'</span>, debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  _loadImage();</span><br><span class="line">&#125;, <span class="number">200</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 简单的防抖函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、当触发监听事件时会执行 _loadImage 函数，该函数负责加载图片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_loadImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> domOffsetHeight = imgBoxList.offsetHeight;</span><br><span class="line">  <span class="keyword">const</span> imgs = imgBoxList.querySelectorAll(<span class="string">'img[data-src]'</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = imgs[i];</span><br><span class="line">    <span class="keyword">if</span> (_isShow(el, domOffsetHeight)) &#123;</span><br><span class="line">      el.src = el.getAttribute(<span class="string">'data-src'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、判断该图片是否在当前窗口的可视区域内<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isShow</span>(<span class="params">el, domHeight</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> rect = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">return</span> rect.top &lt;= domHeight + <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这一个简单的图片懒加载就写成了</p><blockquote><p>当网页滚动的事件被触发 -&gt; 执行加载图片操作 -&gt; 判断图片是否在可视区域内 -&gt; 在，则动态将data-src的值赋予该图片。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：最近面试都被问到了这个问题，所以在这里整理一波。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;懒加载的意义&quot;&gt;&lt;a href=&quot;#懒加载的意义&quot; class=&quot;headerlink&quot; title=&quot;懒加载的意义&quot;&gt;&lt;/a&gt;懒加载的意义
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DIY一个自己的音乐播放器2.0来袭</title>
    <link href="http://yoursite.com/2017/06/05/DIY%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A82-0%E6%9D%A5%E8%A2%AD/"/>
    <id>http://yoursite.com/2017/06/05/DIY一个自己的音乐播放器2-0来袭/</id>
    <published>2017-06-05T13:32:59.000Z</published>
    <updated>2017-06-06T02:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：之前做的第一版播放器功能做出来了，但发现结构不是很优雅以及后端api很不稳定，所以进行了一次小升级。此次升级 <strong>功能更全，体验更好，api更稳定，技术栈更多，收获也更多</strong>👍。</p></blockquote><p>[温馨提示：pc浏览f12手机模式最佳,手机建议wifi下访问,低版本浏览器可能有兼容性问题]</p><h2 id="预览地址：-http-hzzly-net-magic-music"><a href="#预览地址：-http-hzzly-net-magic-music" class="headerlink" title="预览地址： http://hzzly.net/magic-music"></a>预览地址： <a href="http://hzzly.net/magic-music" target="_blank" rel="noopener">http://hzzly.net/magic-music</a></h2><h2 id="Github地址：-https-github-com-hzzly-MagicMusic"><a href="#Github地址：-https-github-com-hzzly-MagicMusic" class="headerlink" title="Github地址： https://github.com/hzzly/MagicMusic"></a>Github地址： <a href="https://github.com/hzzly/MagicMusic" target="_blank" rel="noopener">https://github.com/hzzly/MagicMusic</a></h2><p>欢迎大家的star和fork😄~</p><h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><ul><li><strong>首页</strong><ul><li>轮播</li><li>个性推荐[流行、古典、轻音乐、流行]</li><li>歌曲操作（动画）</li></ul></li><li><strong>底部播放控件</strong><ul><li>播放、暂停、下一曲</li><li>实时播放进度条</li></ul></li><li><strong>播放页</strong><ul><li>上一曲、播放、暂停、下一曲</li><li>播放进度条（弧形进度条）</li><li>歌词滚动、歌词高亮</li></ul></li><li><strong>播放列表</strong><ul><li>播放歌曲高亮</li><li>切歌(单击切歌)</li><li>删歌(点击右侧小X)</li><li>清空播放列表</li><li>本地缓存播放列表</li></ul></li><li><strong>排行榜</strong><ul><li>排行榜列表</li><li>排行榜里的歌曲(单击播放)、全部播放</li></ul></li><li><strong>音乐搜索</strong><ul><li>搜索单曲、歌手</li><li>搜索历史记录</li></ul></li><li><strong>侧边栏</strong></li></ul><h2 id="未实现的功能"><a href="#未实现的功能" class="headerlink" title="未实现的功能"></a>未实现的功能</h2><ul><li>喜欢、分享、下载、切换播放模式</li></ul><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="http://hzzly.net/magic-music/screenshots/music.gif" alt="http://hzzly.net/magic-music/screenshots/music.gif"></p><p><strong>更多预览👉</strong><a href="http://hzzly.net/magic-music/screenshots/" target="_blank" rel="noopener">更多</a></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>1、<code>Vue全家桶(vue2、vue-router、vuex)</code> 快速开发SPA神器<br>2、<code>Axios</code> vue作者推荐的数据请求方案<br>3、<code>ES6</code> 全面过度es6的写法 趋势<br>4、<code>Webpack2</code> 脚手架已经配置好了，超贴心<br>5、<code>Promise</code> 把请求封装在promise中，方便的可以使用.then回调<br>6、<code>flex布局</code> 对于移动端可以放心大胆的使用<br>7、<code>移动端屏幕适配</code> 采用手淘的flexible+rem方案<br>8、<code>本地存储(sessionStorage、localStorage)</code> 避免重复资源请求，快速读取<br>9、<code>图片懒加载</code> vue-lazyload 提升用户体验</p><h2 id="本次更新日志"><a href="#本次更新日志" class="headerlink" title="本次更新日志"></a>本次更新日志</h2><ul><li>后端api采用pm2来部署，防止断开后数据无法请求的尴尬。</li><li>把监听audio加载完数据事件统一管理起来，避免重复监听，优化代码结构。</li><li>更新axios请求，让请求更加优美。</li><li>修改播放页面，优化用户体验。</li><li>添加加载音乐loading等待，提升用户体验。</li><li>添加播放全部，避免一个一个添加。</li><li>本地缓存播放列表与清空。</li><li>修改首页tab切换动效</li></ul><p><a href="http://hjingren.cn/2017/04/27/%E2%80%99DIY%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/" target="_blank" rel="noopener">DIY一个自己的音乐播放器1.0</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>MagicMusic还在不断努力的改进，觉得还行的可以点个star，<strong>你的star是我继续开源创作的动力</strong>，谢谢！！！当然有建议可以在issues里提。<br><strong>项目地址：</strong> <a href="https://github.com/hzzly/MagicMusic" target="_blank" rel="noopener">https://github.com/hzzly/MagicMusic</a><br>欢迎大家的star啦~</p><h2 id="求实习"><a href="#求实习" class="headerlink" title="求实习"></a>求实习</h2><p>本人大三，求一个前端实习：<a href="http://hzzly.net/resume/" target="_blank" rel="noopener">简历</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：之前做的第一版播放器功能做出来了，但发现结构不是很优雅以及后端api很不稳定，所以进行了一次小升级。此次升级 &lt;strong&gt;功能更全，体验更好，api更稳定，技术栈更多，收获也更多&lt;/strong&gt;👍。&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
</feed>
