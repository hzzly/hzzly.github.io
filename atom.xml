<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hzzly</title>
  
  <subtitle>上善若水，笃学敦行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-03T15:36:35.169Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hzzly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitflow基本操作</title>
    <link href="http://yoursite.com/2019/03/03/gitflow%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/03/03/gitflow基本操作/</id>
    <published>2019-03-03T15:34:28.000Z</published>
    <updated>2019-03-03T15:36:35.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：在多组员，多项目等环境进行协同工作时，如果没有统一规范、统一流程，则会导致额外的工作量，甚至会做无用功。所以要减少版本冲突，减轻不必要的工作，就需要规范化的工作流程，本文就gitflow作简要的命令操作。</p></blockquote><h2 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h2><blockquote><p>master 只负责管理发布的状态。在提交时使用标签记录发布版本号。<br>develop 针对发布的日常开发分支。刚才我们已经讲解过有合并分支的功用。</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-workflow-1.png" alt="gitflow"></p><h2 id="开发分支"><a href="#开发分支" class="headerlink" title="开发分支"></a>开发分支</h2><h3 id="Git创建Develop分支的命令："><a href="#Git创建Develop分支的命令：" class="headerlink" title="Git创建Develop分支的命令："></a>Git创建Develop分支的命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop master</span><br></pre></td></tr></table></figure><h3 id="将Develop分支发布到Master分支的命令："><a href="#将Develop分支发布到Master分支的命令：" class="headerlink" title="将Develop分支发布到Master分支的命令："></a>将Develop分支发布到Master分支的命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到Master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 对Develop分支进行合并(使用了--no-ff参数，生成一个新的节点提交)</span></span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure><h2 id="临时性分支"><a href="#临时性分支" class="headerlink" title="临时性分支"></a>临时性分支</h2><blockquote><p>功能（feature）分支<br>预发布（release）分支<br>修补bug（fixbug）分支</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-workflow-2.png" alt="gitflow"></p><h2 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h2><h3 id="创建一个功能分支："><a href="#创建一个功能分支：" class="headerlink" title="创建一个功能分支："></a>创建一个功能分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-x develop</span><br></pre></td></tr></table></figure><h3 id="开发完成后，将功能分支合并到develop分支："><a href="#开发完成后，将功能分支合并到develop分支：" class="headerlink" title="开发完成后，将功能分支合并到develop分支："></a>开发完成后，将功能分支合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure><h3 id="删除feature分支："><a href="#删除feature分支：" class="headerlink" title="删除feature分支："></a>删除feature分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-x</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete feature-x</span><br></pre></td></tr></table></figure><h2 id="预发布分支"><a href="#预发布分支" class="headerlink" title="预发布分支"></a>预发布分支</h2><h3 id="创建一个预发布分支："><a href="#创建一个预发布分支：" class="headerlink" title="创建一个预发布分支："></a>创建一个预发布分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-1.2 develop</span><br></pre></td></tr></table></figure><h3 id="确认没有问题后，合并到master分支："><a href="#确认没有问题后，合并到master分支：" class="headerlink" title="确认没有问题后，合并到master分支："></a>确认没有问题后，合并到master分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-1.2</span><br><span class="line"><span class="comment"># 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a 1.2</span><br></pre></td></tr></table></figure><h3 id="再合并到develop分支："><a href="#再合并到develop分支：" class="headerlink" title="再合并到develop分支："></a>再合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure><h3 id="最后，删除预发布分支："><a href="#最后，删除预发布分支：" class="headerlink" title="最后，删除预发布分支："></a>最后，删除预发布分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d release-1.2</span><br></pre></td></tr></table></figure><h2 id="修补bug分支"><a href="#修补bug分支" class="headerlink" title="修补bug分支"></a>修补bug分支</h2><h3 id="创建一个修补bug分支："><a href="#创建一个修补bug分支：" class="headerlink" title="创建一个修补bug分支："></a>创建一个修补bug分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b fixbug-0.1 master</span><br></pre></td></tr></table></figure><h3 id="修补结束后，合并到master分支："><a href="#修补结束后，合并到master分支：" class="headerlink" title="修补结束后，合并到master分支："></a>修补结束后，合并到master分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br><span class="line"><span class="comment"># 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a 0.1.1</span><br></pre></td></tr></table></figure><h3 id="再合并到develop分支：-1"><a href="#再合并到develop分支：-1" class="headerlink" title="再合并到develop分支："></a>再合并到develop分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br></pre></td></tr></table></figure><h3 id="最后，删除修补bug分支："><a href="#最后，删除修补bug分支：" class="headerlink" title="最后，删除修补bug分支："></a>最后，删除修补bug分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d fixbug-0.1</span><br></pre></td></tr></table></figure><h2 id="取消刚才的合并merge"><a href="#取消刚才的合并merge" class="headerlink" title="取消刚才的合并merge"></a>取消刚才的合并merge</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~</span><br></pre></td></tr></table></figure><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rebase 合并</span></span><br><span class="line">git checkout issue3</span><br><span class="line">git rebase master</span><br><span class="line"><span class="comment"># master 合并</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge issue3</span><br></pre></td></tr></table></figure><h3 id="修改冲突后的提交"><a href="#修改冲突后的提交" class="headerlink" title="修改冲突后的提交"></a>修改冲突后的提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="取消rebase"><a href="#取消rebase" class="headerlink" title="取消rebase"></a>取消rebase</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><h2 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h2><h3 id="commit-回退"><a href="#commit-回退" class="headerlink" title="commit 回退"></a>commit 回退</h3><blockquote><p>commit log</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-commit-log.png" alt="git-commit-log"></p><blockquote><p>commit reset</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-commit-log.png" alt="git-commit-reset"></p><h3 id="push-回退"><a href="#push-回退" class="headerlink" title="push 回退"></a>push 回退</h3><blockquote><p>push log</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-push-log.png" alt="git-push-log"></p><blockquote><p>push reset</p></blockquote><p><img src="https://raw.githubusercontent.com/hzzly/hzzly.github.io/master/images/git/git-push-log.png" alt="git-push-reset"></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="添加轻标签"><a href="#添加轻标签" class="headerlink" title="添加轻标签"></a>添加轻标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag v2.0</span><br><span class="line"><span class="comment"># 显示标签列表</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 显示标签列表包含标签资料的历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --decorate</span><br></pre></td></tr></table></figure><h2 id="添加注解标签"><a href="#添加注解标签" class="headerlink" title="添加注解标签"></a>添加注解标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v3.0</span><br><span class="line">// 或</span><br><span class="line">git tag -am <span class="string">"注解"</span> v3.0</span><br><span class="line"><span class="comment"># 显示标签的列表和注解</span></span><br><span class="line">git tag -n</span><br></pre></td></tr></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v2.0</span><br><span class="line">git tag -d v3.0</span><br></pre></td></tr></table></figure><h2 id="推送标签到远程"><a href="#推送标签到远程" class="headerlink" title="推送标签到远程"></a>推送标签到远程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.5</span><br></pre></td></tr></table></figure><h2 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">《Git分支管理策略–阮一峰》</a></li><li><a href="https://backlogtool.com/git-tutorial/cn/stepup/stepup1_1.html" target="_blank" rel="noopener">猴子都能懂的GIT入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：在多组员，多项目等环境进行协同工作时，如果没有统一规范、统一流程，则会导致额外的工作量，甚至会做无用功。所以要减少版本冲突，减轻不必要的工作，就需要规范化的工作流程，本文就gitflow作简要的命令操作。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>dva models一些隐藏的骚操作</title>
    <link href="http://yoursite.com/2019/02/27/dva%20models%E4%B8%80%E4%BA%9B%E9%9A%90%E8%97%8F%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/02/27/dva models一些隐藏的骚操作/</id>
    <published>2019-02-27T12:34:09.000Z</published>
    <updated>2019-02-27T12:36:14.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://dvajs.com/guide/getting-started.html" target="_blank" rel="noopener">dva</a> 是一个基于 redux 和 redux-saga 的数据流方案<br><a href="https://redux-saga.js.org/docs/api/" target="_blank" rel="noopener">redux-saga API</a></p></blockquote><h3 id="take-pattern"><a href="#take-pattern" class="headerlink" title="take(pattern)"></a>take(pattern)</h3><blockquote><p>使用take操作进行事件监听，用来命令 middleware 在 Store 上等待指定的 action。 在发起与 pattern 匹配的 action 之前，Generator 将暂停（eg：下一个请求的参数依赖前一个请求的结果）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; call, put, select, take &#125;) &#123;</span><br><span class="line">  <span class="keyword">yield</span> put(&#123;</span><br><span class="line">    type: <span class="string">'dict/xxxx'</span>,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">yield</span> take(<span class="string">'dict/xxxx/@@end'</span>);</span><br><span class="line">  <span class="keyword">const</span> dictData = <span class="keyword">yield</span> select(<span class="function"><span class="params">state</span> =&gt;</span> state.dict.dicts);</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">yield</span> call(getList, &#123;</span><br><span class="line">    xxx: dictData.xxx</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="race-effects"><a href="#race-effects" class="headerlink" title="race(effects)"></a>race(effects)</h3><blockquote><p>任务的竞争，用来命令 middleware 在多个 Effect 间运行 竞赛（Race）（与 Promise.race([…]) 的行为类似）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; race &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; list, timeout &#125; = <span class="keyword">yield</span> race(&#123;</span><br><span class="line">    list: call(services.fetchList),</span><br><span class="line">    timeout: call(delay, TIMEOUT),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任务的并行执行"><a href="#任务的并行执行" class="headerlink" title="任务的并行执行"></a>任务的并行执行</h3><blockquote><p>把多个要并行执行的东西放在一个数组里，就可以并行执行，等所有的都结束之后，进入下个环节，类似promise.all的操作。一般有一些集成界面，比如dashboard，其中各组件之间业务关联较小，就可以用这种方式去分别加载数据，此时，整体加载时间只取决于时间最长的那个。</p></blockquote><blockquote><p>之前是 <code>yield []</code>, 后来 dva 升级了 saga 的版本之后就推荐用 <code>yield all([])</code></p></blockquote><ul><li><p>yield []</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [xx1_req, xx2_req, xx3_req] = <span class="keyword">yield</span> [</span><br><span class="line">    call(xx1, payload),</span><br><span class="line">    call(xx2, payload),</span><br><span class="line">    call(xx3, payload),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yield all([])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*fetchList(&#123; payload, callback &#125;, &#123; all &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> [xx1_req, xx2_req, xx3_req] = <span class="keyword">yield</span> all([</span><br><span class="line">    call(xx1, payload),</span><br><span class="line">    call(xx2, payload),</span><br><span class="line">    call(xx3, payload),</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dvajs.com/guide/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dva&lt;/a&gt; 是一个基于 redux 和 redux-saga 的数据流方
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>折腾一个chrome插件</title>
    <link href="http://yoursite.com/2019/01/04/%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%AAchrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/04/折腾一个chrome插件/</id>
    <published>2019-01-04T09:43:48.000Z</published>
    <updated>2019-01-04T09:49:11.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：作为一个开发者，是否有时一个单词不认识或者业务命名而烦恼呢，以至于需要打开浏览器，然后打开google翻译，如此繁琐的打开页面可能一天重复好几遍，而我们开发者对于浏览器标签打开的又多，所以如何简化我们重新打开标签来翻译呢？所以浏览器插件就非常强大了。</p></blockquote><p>chrome浏览器是一个工作、学习和生活的必备工具。除了chrome本身的基本能力（控制台等）外，能大幅提高这个神器的使用体验的是它可扩展能力（插件）以及丰富的插件生态。接下来我们就来折腾一个在线翻译的chrome插件。</p><p><img src="https://raw.githubusercontent.com/hzzly/online-translate/master/online-translate.png" alt="online-translate"></p><p>好了，有了需求我们就得开发了(囧)！</p><h2 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h2><ul><li>manifest.json  // chrome配置文件</li><li>webpack配置(打包，热编译)</li><li>jsonp</li><li>ajax封装</li></ul><p>开发之前了解一下什么是Chrome插件=&gt;</p><h2 id="什么是Chrome插件"><a href="#什么是Chrome插件" class="headerlink" title="什么是Chrome插件"></a>什么是Chrome插件</h2><p>Chrome插件是一个用Web技术开发、用来增强浏览器功能的软件，它其实就是一个由HTML、CSS、JS、图片等资源组成的一个.crx后缀的压缩包。</p><h2 id="核心介绍（manifest-json）"><a href="#核心介绍（manifest-json）" class="headerlink" title="核心介绍（manifest.json）"></a>核心介绍（manifest.json）</h2><p>这是一个Chrome插件最重要也是必不可少的文件，用来配置所有和插件相关的配置，必须放在需要浏览器打包的根目录。其中，manifest_version、name、version3个是必不可少的，description和icons是推荐的。</p><p>栗子(比较全)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 清单文件的版本，这个必须写，而且必须是2</span></span><br><span class="line">  <span class="string">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 插件的名称</span></span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"demo"</span>,</span><br><span class="line">  <span class="comment">// 插件的版本</span></span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="comment">// 插件描述</span></span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"简单的Chrome扩展demo"</span>,</span><br><span class="line">  <span class="comment">// 图标，一般偷懒全部用一个尺寸的也没问题</span></span><br><span class="line">  <span class="string">"icons"</span>: &#123;</span><br><span class="line">    <span class="string">"16"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="string">"48"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="string">"128"</span>: <span class="string">"img/icon.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 会一直常驻的后台JS或后台页面</span></span><br><span class="line">  <span class="string">"background"</span>: &#123;</span><br><span class="line">    <span class="comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span></span><br><span class="line">    <span class="string">"page"</span>: <span class="string">"background.html"</span></span><br><span class="line">    <span class="comment">//"scripts": ["js/background.js"]</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 浏览器右上角图标设置，browser_action、page_action、app必须三选一</span></span><br><span class="line">  <span class="string">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="string">"default_icon"</span>: <span class="string">"img/icon.png"</span>,</span><br><span class="line">    <span class="comment">// 图标悬停时的标题，可选</span></span><br><span class="line">    <span class="string">"default_title"</span>: <span class="string">"这是一个示例Chrome插件"</span>,</span><br><span class="line">    <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当某些特定页面打开才显示的图标</span></span><br><span class="line">  <span class="comment">/*"page_action": &#123;</span></span><br><span class="line"><span class="comment">    "default_icon": "img/icon.png",</span></span><br><span class="line"><span class="comment">    "default_title": "我是pageAction",</span></span><br><span class="line"><span class="comment">    "default_popup": "popup.html"</span></span><br><span class="line"><span class="comment">  &#125;,*/</span></span><br><span class="line">  <span class="comment">// 需要直接注入页面的JS</span></span><br><span class="line">  <span class="string">"content_scripts"</span>: [&#123;</span><br><span class="line">    <span class="comment">//"matches": ["http://*/*", "https://*/*"],</span></span><br><span class="line">    <span class="comment">// "&lt;all_urls&gt;" 表示匹配所有地址</span></span><br><span class="line">    <span class="string">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</span><br><span class="line">    <span class="comment">// 多个JS按顺序注入</span></span><br><span class="line">    <span class="string">"js"</span>: [<span class="string">"js/jquery-1.8.3.js"</span>, <span class="string">"js/content-script.js"</span>],</span><br><span class="line">    <span class="comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span></span><br><span class="line">    <span class="string">"css"</span>: [<span class="string">"css/custom.css"</span>],</span><br><span class="line">    <span class="comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span></span><br><span class="line">    <span class="string">"run_at"</span>: <span class="string">"document_start"</span></span><br><span class="line">  &#125;, &#123; <span class="comment">// 这里仅仅是为了演示content-script可以配置多个规则</span></span><br><span class="line">    <span class="string">"matches"</span>: [<span class="string">"*://*/*.png"</span>, <span class="string">"*://*/*.jpg"</span>, <span class="string">"*://*/*.gif"</span>, <span class="string">"*://*/*.bmp"</span>],</span><br><span class="line">    <span class="string">"js"</span>: [<span class="string">"js/show-image-content-size.js"</span>]</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 权限申请</span></span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"contextMenus"</span>, <span class="comment">// 右键菜单</span></span><br><span class="line">    <span class="string">"tabs"</span>, <span class="comment">// 标签</span></span><br><span class="line">    <span class="string">"notifications"</span>, <span class="comment">// 通知</span></span><br><span class="line">    <span class="string">"webRequest"</span>, <span class="comment">// web请求</span></span><br><span class="line">    <span class="string">"webRequestBlocking"</span>,</span><br><span class="line">    <span class="string">"storage"</span>, <span class="comment">// 插件本地存储</span></span><br><span class="line">    <span class="string">"http://*/*"</span>, <span class="comment">// 需要请求的地址</span></span><br><span class="line">    <span class="string">"https://*/*"</span> <span class="comment">// 需要请求的地址</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>介绍完后我们就来开发了(码代码中…)</p><h2 id="开发-基于Vue"><a href="#开发-基于Vue" class="headerlink" title="开发(基于Vue)"></a>开发(基于Vue)</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir online-translate</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> online-translate</span><br><span class="line"></span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">// 文件层级</span><br><span class="line">├── chrome  // 浏览器打包的文件夹</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src  // 源码</span><br><span class="line">└── webpack.config.js  // wepack</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装项目依赖</span><br><span class="line">npm install vue element-ui --save</span><br><span class="line"></span><br><span class="line">// 安装开发依赖</span><br><span class="line">npm install babel-core babel-loader babel-plugin-component babel-preset-env cross-env css-loader file-loader html-webpack-plugin style-loader vue-loader vue-template-compiler webpack webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    popup: <span class="string">'./src/popup.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./chrome'</span>),</span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// other vue-loader options go here</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: <span class="string">'style-loader!css-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">'[name].[ext]?[hash]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// new webpack.HotModuleReplacementPlugin(),</span></span><br><span class="line">    <span class="comment">// new webpack.NamedModulesPlugin(),</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.join(__dirname, <span class="string">'./index.html'</span>),</span><br><span class="line">      inject: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    noInfo: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  performance: &#123;</span><br><span class="line">    hints: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'#eval-source-map'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports.devtool = <span class="string">'#source-map'</span></span><br><span class="line">  <span class="comment">// http://vue-loader.vuejs.org/en/workflow/production.html</span></span><br><span class="line">  <span class="built_in">module</span>.exports.plugins = (<span class="built_in">module</span>.exports.plugins || []).concat([</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      sourceMap: <span class="literal">false</span>,</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好了，我们就能愉快的开发了</p><h3 id="接下来就是-Vue-的开发了！"><a href="#接下来就是-Vue-的开发了！" class="headerlink" title="接下来就是 Vue 的开发了！"></a>接下来就是 <code>Vue</code> 的开发了！</h3><p>正常的项目开发…</p><p>详细源码可以看<a href="https://github.com/hzzly/online-translate" target="_blank" rel="noopener">github</a></p><h3 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>把代码打包到了chrome文件夹内，然后就可以使用chrome扩展进行打包扩展程序，会生成.crx和.pem文件，然后直接发布或者把.crx文件拖进扩展程序内进行内测。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：作为一个开发者，是否有时一个单词不认识或者业务命名而烦恼呢，以至于需要打开浏览器，然后打开google翻译，如此繁琐的打开页面可能一天重复好几遍，而我们开发者对于浏览器标签打开的又多，所以如何简化我们重新打开标签来翻译呢？所以浏览器插件就非常
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Node 配置文件的定制</title>
    <link href="http://yoursite.com/2018/11/13/Node-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9A%E5%88%B6/"/>
    <id>http://yoursite.com/2018/11/13/Node-配置文件的定制/</id>
    <published>2018-11-13T13:54:17.000Z</published>
    <updated>2019-01-02T07:58:14.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在任何一个项目中都缺少不了配置文件<br>具有下面的特点: 数据量不大,信息需要长期保存,容易维护</p></blockquote><p>现在是大前端的时代，Node 的重要性不言而喻。在使用 Node 作为后端或者中间层的技术架构时，往往需要用到一些可配置的变量，比如数据库，在开发时我们会连开发的数据库，生成环境我们需要连生产的数据库，这样我们就需要根据不同的环境加载不一样的配置文件，从而提高我们的开发效率，接下来我们就一起来定制我们的配置文件。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在 Node 中可以通过 <code>process.env</code> 来访问当前的环境变量信息。<br>比如我们在 <code>package.json</code> 中通过 <code>scripts</code> 定义的shell脚本执行对应的命令。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node ./bin/www",</span><br><span class="line">    "dev": "NODE_ENV=dev node ./bin/www",</span><br><span class="line">    "pro": "NODE_ENV=pro node ./bin/www"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，上面有三条条启动命令，一条是默认的 <code>start</code>，另外两条我们通过 <code>NODE_ENV=xxx</code> 来设置了对应的环境，当我们使用 <code>npm run dev</code> 启动项目的时候，通过 <code>process.env.NODE_ENV</code> 就可以取到项目的当前环境。</p><h2 id="通过环境变量指定对应的配置文件"><a href="#通过环境变量指定对应的配置文件" class="headerlink" title="通过环境变量指定对应的配置文件"></a>通过环境变量指定对应的配置文件</h2><p>在上面我们通过shell脚本指定了对应的环境，那我们就可以通过 <code>process.env.NODE_ENV</code> 来加载对应的配置文件了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    ...省略</span><br><span class="line">    mongodb: <span class="string">'mongodb://localhost:27017/demo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  build: &#123;</span><br><span class="line">    ...省略</span><br><span class="line">    mongodb: <span class="string">'mongodb://127.0.0.0:27017/demo'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongodb = process.env.NODE_ENV === <span class="string">'dev'</span> ? config.build.mongodb : config.dev.mongodb</span><br></pre></td></tr></table></figure></p><p>这样，我们就可以开开心心的放心的写代码了，但这样写还不是很优雅，都写到一个文件里了，不太好维护，接下来我们就真正的动态加载，不需要我们再加判断了。</p><h2 id="config-lite"><a href="#config-lite" class="headerlink" title="config-lite"></a>config-lite</h2><blockquote><p><a href="https://github.com/nswbmw/config-lite" target="_blank" rel="noopener">config-lite</a>： A super simple &amp; flexible &amp; intuitive config module, support yaml &amp; toml.</p></blockquote><p>这一次，我们针对不同的环境，将配置写入不同的配置文件中，在项目根目录下新建config目录，里面新建不同环境的配置文件：default.js、dev.js和pro.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// default.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dev.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  host: <span class="string">"https://dev.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://localhost:27017/test'</span>,</span><br><span class="line">  ...省略</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pro.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  host: <span class="string">"https://pro.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://127.0.0.0:27017/test'</span>,</span><br><span class="line">  ...省略</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>好了，配置文件写好了，如何使用呢？这里我们使用的 <code>config-lite</code> 插件，这个插件依旧是依据我们shell脚本指定的对应环境来选择不同的配置文件。</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i config-lite --save</span><br></pre></td></tr></table></figure><p>当我们使用 <code>npm run dev</code> 启动项目的时候，<code>config-lite</code>会去抓取dev.js配置，并且会与default.js里配置去合并，如果有相同的对象，会覆盖default.js里的配置。同理 <code>npm run pro</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'config-lite'</span>)(__dirname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、如果运行 npm run dev</span></span><br><span class="line">config = &#123;</span><br><span class="line">  host: <span class="string">"https://dev.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://localhost:27017/test'</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...省略</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、如果运行 npm run pro</span></span><br><span class="line">config = &#123;</span><br><span class="line">  host: <span class="string">"https://pro.com"</span>,</span><br><span class="line">  mongodb: <span class="string">'mongodb://127.0.0.0:27017/test'</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'config-lite-demo'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      maxAge: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们就得到了更好维护的动态加载配置文件。还有一个<code>问题</code>（大多数情况下，在windows平台下使用类似于: NODE_ENV=pro的命令行指令会卡住，windows平台与POSIX在使用命令行时有许多区别（例如在POSIX，使用$ENV_VAR,在windows，使用%ENV_VAR%。。。））。那该如何解决呢？👇</p><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h2><blockquote><p>cross-env 让这一切变得简单，不同平台使用唯一指令，无需担心跨平台问题</p></blockquote><h3 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i cross-env --save</span><br></pre></td></tr></table></figure><h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node ./bin/www",</span><br><span class="line">    "dev": "cross-env NODE_ENV=dev node ./bin/www",</span><br><span class="line">    "pro": "cross-env NODE_ENV=pro node ./bin/www"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 NODE_ENV 便设置成功，无需担心跨平台问题。</p><h2 id="egg-配置文件的使用"><a href="#egg-配置文件的使用" class="headerlink" title="egg 配置文件的使用"></a>egg 配置文件的使用</h2><p>在 config 目录(脚手架生成的)新增 config.dev.js 和 config.pro.js，然后在文件内写我们对应环境的配置。</p><ul><li>配置环境<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "script": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "dev": "EGG_SERVER_ENV=dev egg-bin dev",</span><br><span class="line">    "pro": "EGG_SERVER_ENV=pro egg-scripts start",</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在 egg 中通过 <code>EGG_SERVER_ENV</code> 来声明对应的环境变量。</p><ul><li>使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="keyword">this</span>.app.config <span class="comment">// 得到对应环境的配置文件(也会和 default 进行合并)</span></span><br></pre></td></tr></table></figure></li></ul><p>完结，好久没写了，有点生疏了，苦笑！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在任何一个项目中都缺少不了配置文件&lt;br&gt;具有下面的特点: 数据量不大,信息需要长期保存,容易维护&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在是大前端的时代，Node 的重要性不言而喻。在使用 Node 作为后端或者中间层的技术架构时，往往需要
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>前端路由的实现原理</title>
    <link href="http://yoursite.com/2017/09/16/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/09/16/前端路由的实现原理/</id>
    <published>2017-09-16T13:09:32.000Z</published>
    <updated>2017-09-16T13:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>早期的路由都是后端实现的，直接根据 url 来 reload 页面，页面变得越来越复杂服务器端压力变大，随着 ajax 的出现，页面实现非 reload 就能刷新数据，也给前端路由的出现奠定了基础。我们可以通过记录 url 来记录 ajax 的变化，从而实现前端路由。</p></blockquote><p>下面主要讲两种主流方式实现前端路由：</p><h1 id="History-API"><a href="#History-API" class="headerlink" title="History API"></a>History API</h1><p>这里不细说每一个 API 的用法，大家可以看 MDN 的文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/History" target="_blank" rel="noopener">https://developer.mozilla.org…</a></p><p>重点说其中的两个新增的API history.pushState 和 history.replaceState</p><p>这两个 API 都接收三个参数，分别是</p><ul><li>状态对象（state object） — 一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</li><li>标题（title） — FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</li><li>地址（URL） — 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。<br>相同之处是两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新。</li></ul><p>不同之处在于，pushState会增加一条新的历史记录，而replaceState则会替换当前的历史记录。</p><p>我们拿大百度的控制台举例子（具体说是我的浏览器在百度首页打开控制台。。。）</p><p>我们在控制台输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"https://www.baidu.com/?name=hzzly"</span>);</span><br></pre></td></tr></table></figure><p>好，我们观察此时的 url 变成了这样<br><code>https://www.baidu.com/?name=hzzly</code></p><p>我们这里不一一测试，直接给出其它用法，大家自行尝试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"https://www.baidu.com/name/hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/hzzly</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"?name=hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com?name=hzzly</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"name=hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name=hzzly</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"/name/hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/hzzly</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"name/hzzly"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/hzzly</span></span><br></pre></td></tr></table></figure></p><p>每次改变 url 页面并没有刷新，同样根据上文所述，浏览器会产生历史记录。</p><h1 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h1><p>我们经常在 url 中看到 #，这个 # 有两种情况，一个是我们所谓的锚点，比如典型的回到顶部按钮原理、Github 上各个标题之间的跳转等，路由里的 # 不叫锚点，我们称之为 hash，大型框架的路由系统大多都是哈希实现的。</p><p>同样我们需要一个根据监听哈希变化触发的事件 —— hashchange 事件</p><p>我们用 window.location 处理哈希的改变时不会重新渲染页面，而是当作新页面加到历史记录中，这样我们跳转页面就可以在 hashchange 事件中注册 ajax 从而改变页面内容。</p><h1 id="前端路由优缺点"><a href="#前端路由优缺点" class="headerlink" title="前端路由优缺点"></a>前端路由优缺点</h1><p>优点：<br>1.从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升。<br>2.在某些场合中，用ajax请求，可以让页面无刷新，页面变了但Url没有变化，用户就不能复制到想要的地址，用前端路由做单页面网页就很好的解决了这个问题</p><p>缺点：<br>使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;早期的路由都是后端实现的，直接根据 url 来 reload 页面，页面变得越来越复杂服务器端压力变大，随着 ajax 的出现，页面实现非 reload 就能刷新数据，也给前端路由的出现奠定了基础。我们可以通过记录 url 来记录 ajax 的变化
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>在Vue.js中使用Mixins</title>
    <link href="http://yoursite.com/2017/09/12/%E5%9C%A8Vue-js%E4%B8%AD%E4%BD%BF%E7%94%A8Mixins/"/>
    <id>http://yoursite.com/2017/09/12/在Vue-js中使用Mixins/</id>
    <published>2017-09-12T03:15:14.000Z</published>
    <updated>2019-01-02T07:46:54.665Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个很常见的场景: 有两个非常相似的组件, 它们拥有非常相似的基本功能, 但是它们之间又有足够的不同的地方, 该如何选择呢? 我们是应该将它们分成两个完全不同的组件呢? 还是创建一个基础组件, 然后定义足够多的props以方便区分使用场景?</p></blockquote><p>这两种方式都不是完美的: 如果你将它们分成两个完全不同的组件, 在需求变化(功能变化)时, 可能会增加需要同时修改两个组件的风险, 这违反了”DRY”的前提. 另一方面, 太多的props很快会让人变得凌乱, 并且, 迫使维护人员, 甚至是你自己, 要首先理解这些props的上下文才能使用它, 这会让人非常失望.</p><p>Vue的Mixins是非常实用的编程方式, 因为最终实用的编程是通过不断减少运动部件(moving parts)使代码变得容易理解. (关于这一点, Michael Feathers有一个很好的引用). 一个mixin允许你封装一个功能, 以便你能在整个应用程序中的不同组件中使用它. 如果mixin被正确的创建, 它们是纯粹的–它们不会修改或更改函数的作用范围(scope)之外的内容, 因此, 您可以在多个地方执行它们, 并且只要输入值相同, 总是能非常可靠得得到相同的结果. 这真的非常强大.</p><h1 id="认识Mixins"><a href="#认识Mixins" class="headerlink" title="认识Mixins"></a>认识Mixins</h1><p><a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">混合 (mixins)</a> 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混合对象可以包含任意组件选项。以组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p><h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><blockquote><p>假设我们有一些不同的组件, 它们的工作是切换状态boolean, 一个模态(modal)和一个提示(tooltip). 这些tooltips和modals没有很多共同之处, 除了这个功能: 它们看起来不一样, 它们使用起来也不尽相同, 但是它们的逻辑是相似的 .</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//modal</span></span><br><span class="line"><span class="keyword">const</span> Modal = &#123;</span><br><span class="line">  template: <span class="string">'#modal'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShowing: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleShow() &#123;</span><br><span class="line">      <span class="keyword">this</span>.isShowing = !<span class="keyword">this</span>.isShowing;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//tooltip</span></span><br><span class="line"><span class="keyword">const</span> Tooltip = &#123;</span><br><span class="line">  template: <span class="string">'#tooltip'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShowing: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleShow() &#123;</span><br><span class="line">      <span class="keyword">this</span>.isShowing = !<span class="keyword">this</span>.isShowing;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以从中提取逻辑, 并创建可以复用的部分：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toggle = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShowing: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleShow() &#123;</span><br><span class="line">      <span class="keyword">this</span>.isShowing = !<span class="keyword">this</span>.isShowing;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Modal = &#123;</span><br><span class="line">  template: <span class="string">'#modal'</span>,</span><br><span class="line">  mixins: [toggle]</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Tooltip = &#123;</span><br><span class="line">  template: <span class="string">'#tooltip'</span>,</span><br><span class="line">  mixins: [toggle]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>duang — 一个小而简单的🌰让我们知道了Mixins对于封装一些可复用的功能如此有趣、方便、实用。</p><h1 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h1><blockquote><ul><li><a href="https://github.com/hzzly/MagicMusic/blob/master/src/common/js/mixin.js" target="_blank" rel="noopener">MagicMusic</a> star(200+)</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一个很常见的场景: 有两个非常相似的组件, 它们拥有非常相似的基本功能, 但是它们之间又有足够的不同的地方, 该如何选择呢? 我们是应该将它们分成两个完全不同的组件呢? 还是创建一个基础组件, 然后定义足够多的props以方便区分使用场景?&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue插件的开发(一)</title>
    <link href="http://yoursite.com/2017/08/25/Vue%E6%8F%92%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/08/25/Vue插件的开发-一/</id>
    <published>2017-08-25T05:59:55.000Z</published>
    <updated>2017-08-25T06:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：随着 Vue.js 越来越火，Vue.js 的相关插件也在不断的被贡献出来，数不胜数。比如官方推荐的 vue-router、vuex 等，都是非常优秀的插件。但是我们更多的人还只停留在使用的阶段，比较少自己开发。所以接下来通过一个简单的 vue-toast 插件，来了解掌握插件的开发和使用。</p></blockquote><h1 id="认识插件"><a href="#认识插件" class="headerlink" title="认识插件"></a>认识插件</h1><p>想要开发插件，先要认识一个插件是什么样子的。<a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">官方文档:插件</a></p><p>Vue.js 的插件应当有一个公开方法 install 。这个方法的第一个参数是 Vue 构造器 , 第二个参数是一个可选的选项对象:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 1. 添加全局方法或属性，如: vue-custom-element</span></span><br><span class="line"><span class="comment">// 逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line">Vue.directive(<span class="string">'my-directive'</span>, &#123;  <span class="comment">// 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch</span></span><br><span class="line">bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line"><span class="comment">// 逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 3. 通过全局 mixin方法添加一些组件选项，如: vuex</span></span><br><span class="line"><span class="comment">// 逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br><span class="line">Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;  <span class="comment">// 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现</span></span><br><span class="line"><span class="comment">// 逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来要讲到的 vue-toast 插件则是通过添加实例方法实现的。我们先来看个小例子。先新建个js文件来编写插件：toast.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toast.js</span></span><br><span class="line"><span class="keyword">var</span> Toast = &#123;&#125;;</span><br><span class="line">Toast.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">Vue.prototype.$msg = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure><p>在 main.js 中，需要导入 toast.js 并且通过全局方法 Vue.use() 来使用插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">'./toast.js'</span>;</span><br><span class="line">Vue.use(Toast);</span><br></pre></td></tr></table></figure><p>然后，我们在组件中来获取该插件定义的 $msg 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">mounted()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$msg);         <span class="comment">// Hello World</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，控制台成功的打印出了 Hello World 。既然 $msg 能获取到，那么我们就可以来实现我们的 vue-toast 插件了。</p><h1 id="开发-vue-toast-插件"><a href="#开发-vue-toast-插件" class="headerlink" title="开发 vue-toast 插件"></a>开发 vue-toast 插件</h1><p>需求：在组件中通过调用 <strong>this.$toast(‘网络请求失败’) </strong>来弹出提示，默认在底部显示。可以通过调用 <strong>this.$toast.top()</strong> 或 <strong>this.$toast.center()</strong> 等方法来实现在不同位置显示。</p><p>整理一下思路，弹出提示的时候，我可以在 body 中添加一个 div 用来显示提示信息，不同的位置我通过添加不同的类名来定位，那就可以开始写了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toast.js</span></span><br><span class="line"><span class="keyword">var</span> Toast = &#123;&#125;;</span><br><span class="line">Toast.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">Vue.prototype.$toast = <span class="function">(<span class="params">tips</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> toastTpl = Vue.extend(&#123;     <span class="comment">// 1、创建构造器，定义好提示信息的模板</span></span><br><span class="line">template: <span class="string">'&lt;div class="vue-toast"&gt;'</span> + tips + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> tpl = <span class="keyword">new</span> toastTpl().$mount().$el;  <span class="comment">// 2、创建实例，挂载到文档以后的地方</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(tpl);     <span class="comment">// 3、把创建的实例添加到body中</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;        <span class="comment">// 4、延迟2.5秒后移除该提示</span></span><br><span class="line"><span class="built_in">document</span>.body.removeChild(tpl);</span><br><span class="line">&#125;, <span class="number">2500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure><p>好像很简单，我们就实现了 this.$toast() ，接下来显示不同位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toast.js</span></span><br><span class="line">[<span class="string">'bottom'</span>, <span class="string">'center'</span>, <span class="string">'top'</span>].forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">Vue.prototype.$toast[type] = <span class="function">(<span class="params">tips</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Vue.prototype.$toast(tips,type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里把 type 传给 $toast 在该方法里进行不同位置的处理，上面说了通过添加不同的类名(toast-bottom、toast-top、toast-center)来实现，那 $toast 方法需要小小修改一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$toast = <span class="function">(<span class="params">tips,type</span>) =&gt;</span> &#123;     <span class="comment">// 添加 type 参数</span></span><br><span class="line"><span class="keyword">let</span> toastTpl = Vue.extend(&#123;             <span class="comment">// 模板添加位置类</span></span><br><span class="line">template: <span class="string">'&lt;div class="vue-toast toast-'</span>+ type +<span class="string">'"&gt;'</span> + tips + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像差不多了。但是如果我想默认在顶部显示，我每次都要调用 this.$toast.top() 好像就有点多余了，我能不能 this.$toast() 就直接在我想要的地方呢？还有我不想要 2.5s 后才消失呢？这时候注意到 Toast.install(Vue,options) 里的 options 参数，我们可以在 Vue.use() 通过 options 传进我们想要的参数。最后修改插件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Toast = &#123;&#125;;</span><br><span class="line">Toast.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> opt = &#123;</span><br><span class="line">defaultType:<span class="string">'bottom'</span>,   <span class="comment">// 默认显示位置</span></span><br><span class="line">duration:<span class="string">'2500'</span>         <span class="comment">// 持续时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> property <span class="keyword">in</span> options)&#123;</span><br><span class="line">opt[property] = options[property];  <span class="comment">// 使用 options 的配置</span></span><br><span class="line">&#125;</span><br><span class="line">Vue.prototype.$toast = <span class="function">(<span class="params">tips,type</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(type)&#123;</span><br><span class="line">opt.defaultType = type;         <span class="comment">// 如果有传type，位置则设为该type</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'vue-toast'</span>).length)&#123;</span><br><span class="line"><span class="comment">// 如果toast还在，则不再执行</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> toastTpl = Vue.extend(&#123;</span><br><span class="line">template: <span class="string">'&lt;div class="vue-toast toast-'</span>+opt.defaultType+<span class="string">'"&gt;'</span> + tips + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> tpl = <span class="keyword">new</span> toastTpl().$mount().$el;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(tpl);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(tpl);</span><br><span class="line">&#125;, opt.duration)</span><br><span class="line">&#125;</span><br><span class="line">[<span class="string">'bottom'</span>, <span class="string">'center'</span>, <span class="string">'top'</span>].forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">Vue.prototype.$toast[type] = <span class="function">(<span class="params">tips</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Vue.prototype.$toast(tips,type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Toast;</span><br></pre></td></tr></table></figure><p>这样子一个简单的 vue 插件就实现了，并且可以通过 npm 打包发布，下次就可以使用 npm install 来安装了。</p><p>好久没更新博客，逃。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：随着 Vue.js 越来越火，Vue.js 的相关插件也在不断的被贡献出来，数不胜数。比如官方推荐的 vue-router、vuex 等，都是非常优秀的插件。但是我们更多的人还只停留在使用的阶段，比较少自己开发。所以接下来通过一个简单的 vu
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue与echarts的可视化</title>
    <link href="http://yoursite.com/2017/07/09/vue%E4%B8%8Eecharts%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2017/07/09/vue与echarts的可视化/</id>
    <published>2017-07-09T13:51:32.000Z</published>
    <updated>2017-07-09T15:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新博客了，但我并没有偷懒哦。因为进入了公司实习，需要熟悉项目需求以及技术栈，公司技术栈用的react与dva，所以需要现学现卖。趁着周末写写vue，美滋滋，哈哈哈。</p><h1 id="一、配方"><a href="#一、配方" class="headerlink" title="一、配方"></a>一、配方</h1><ul><li>vue</li><li>echarts</li></ul><h1 id="二、参考案例"><a href="#二、参考案例" class="headerlink" title="二、参考案例"></a>二、参考案例</h1><ul><li><a href="http://gallery.echartsjs.com/explore.html" target="_blank" rel="noopener">gallery</a> 社区demo</li></ul><h1 id="三、实践"><a href="#三、实践" class="headerlink" title="三、实践"></a>三、实践</h1><h2 id="3-1安装-echarts"><a href="#3-1安装-echarts" class="headerlink" title="3.1安装 echarts"></a>3.1安装 echarts</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><h2 id="3-2vue-dom-结构"><a href="#3-2vue-dom-结构" class="headerlink" title="3.2vue dom 结构"></a>3.2vue dom 结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"charts"</span> <span class="attr">style</span>=<span class="string">"height:300px;width:300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3在vue中引入echarts"><a href="#3-3在vue中引入echarts" class="headerlink" title="3.3在vue中引入echarts"></a>3.3在vue中引入echarts</h2><p>因为ECharts初始化必须绑定dom，所以我们只能在vue的mounted生命周期里初始化。</p><h3 id="3-3-1全部引入"><a href="#3-3-1全部引入" class="headerlink" title="3.3.1全部引入"></a>3.3.1全部引入</h3><p>可以直接在项目代码中 require(‘echarts’) 或 import 得到 ECharts，我这里通过es6的import来引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></span><br><span class="line"> </span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>.initChart()</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  initChart () &#123;</span><br><span class="line">    <span class="keyword">this</span>.chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'charts'</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">      title: &#123; <span class="attr">text</span>: <span class="string">'ECharts 入门示例'</span> &#125;,</span><br><span class="line">      tooltip: &#123;&#125;,</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: &#123;&#125;,</span><br><span class="line">      series: [&#123;</span><br><span class="line">        name: <span class="string">'销量'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        data: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.chart.setOption(option)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-2按需引入"><a href="#3-3-2按需引入" class="headerlink" title="3.3.2按需引入"></a>3.3.2按需引入</h3><p>默认使用 require(‘echarts’) 得到的是已经加载了所有图表和组件的 ECharts 包，因此体积会比较大，如果在项目中对体积要求比较苛刻，也可以只按需引入需要的模块。</p><p>例如上面示例代码中只用到了柱状图，提示框和标题组件，因此在引入的时候也只需要引入这些模块，可以有效的将打包后的体积从 400 多 KB 减小到 170 多 KB。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 ECharts 主模块</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span></span><br><span class="line"><span class="comment">// 引入柱状图</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/chart/bar'</span></span><br><span class="line"><span class="comment">// 引入提示框和标题组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/component/tooltip'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/component/title'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 后面的跟上面的就一样了</span></span><br></pre></td></tr></table></figure><h3 id="3-3-3动态改变ECharts的配置-option"><a href="#3-3-3动态改变ECharts的配置-option" class="headerlink" title="3.3.3动态改变ECharts的配置(option)"></a>3.3.3动态改变ECharts的配置(option)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种 watch options变化 利用vue的深度 watcher，options一有变化就重新setOption</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    handler(options) &#123;</span><br><span class="line">      <span class="keyword">this</span>.chart.setOption(<span class="keyword">this</span>.options)</span><br><span class="line">    &#125;,</span><br><span class="line">    deep: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种 只watch 数据的变化 只有数据变化时触发ECharts</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  seriesData(val) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setOptions(&#123;<span class="attr">series</span>:val&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4结果"><a href="#3-4结果" class="headerlink" title="3.4结果"></a>3.4结果</h2><p><img src="http://omt3u4bph.bkt.clouddn.com/echarts.png" alt="vue-echarts"><br>到这我们在页面上就可以显示图表了，实现可视化数据，是不是很酷炫。</p><h1 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h1><p><a href="http://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts" target="_blank" rel="noopener">在 webpack 中使用 ECharts</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有更新博客了，但我并没有偷懒哦。因为进入了公司实习，需要熟悉项目需求以及技术栈，公司技术栈用的react与dva，所以需要现学现卖。趁着周末写写vue，美滋滋，哈哈哈。&lt;/p&gt;
&lt;h1 id=&quot;一、配方&quot;&gt;&lt;a href=&quot;#一、配方&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="echarts" scheme="http://yoursite.com/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>基于vue-cli配置proxyTable开发环境的跨域</title>
    <link href="http://yoursite.com/2017/06/21/%E5%9F%BA%E4%BA%8Evue-cli%E9%85%8D%E7%BD%AEproxyTable%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2017/06/21/基于vue-cli配置proxyTable开发环境的跨域/</id>
    <published>2017-06-21T02:30:54.000Z</published>
    <updated>2017-06-21T02:52:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：目前前端项目普遍采用前后端分离的思想来开发，这样在和后端进行数据联调时势必会面临恼人的跨域问题，最近几个基于Vue开发项目时也遇到了这个问题，网上关于跨域的解决方案很多，这里就简单的介绍基于vue-cli配置proxyTable的开发环境来解决跨域。</p></blockquote><p>还不懂前后端分离的可以移步👉：<a href="http://hjingren.cn/2017/03/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%B0%9D%E8%AF%95/" target="_blank" rel="noopener">前后端分离的尝试</a></p><h1 id="配置-proxyTable"><a href="#配置-proxyTable" class="headerlink" title="配置 proxyTable"></a>配置 proxyTable</h1><p>在 config/index.js 中，把 dev 下的 proxytable 里面配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://api.hjingren.cn'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用（请求）"><a href="#使用（请求）" class="headerlink" title="使用（请求）"></a>使用（请求）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/api/playlist/detail?id=12345'</span>)</span><br></pre></td></tr></table></figure><p>最后：vue-cli的这个配置来自于其使用的插件<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a>，想进一步了解的可以深入研究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：目前前端项目普遍采用前后端分离的思想来开发，这样在和后端进行数据联调时势必会面临恼人的跨域问题，最近几个基于Vue开发项目时也遇到了这个问题，网上关于跨域的解决方案很多，这里就简单的介绍基于vue-cli配置proxyTable的开发环境来解
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>致歉</title>
    <link href="http://yoursite.com/2017/06/19/%E8%87%B4%E6%AD%89/"/>
    <id>http://yoursite.com/2017/06/19/致歉/</id>
    <published>2017-06-19T04:06:20.000Z</published>
    <updated>2017-06-19T04:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="致歉"><a href="#致歉" class="headerlink" title="致歉"></a>致歉</h1><p>我在写文章的时候的时候只注意了原作者的文章内容是否够好，而忽略了内容的原创性。因此发生了最近几篇内容抄袭原创作品这样不好的事情。本人以全部删除。</p><p>原创是很多作者最为看重的事情。正所谓支持原创，盗版必究。本人认识到了事情的严重性。</p><p>因此，在这里我向原作者表达深深的歉意：</p><p><strong>对不起！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;致歉&quot;&gt;&lt;a href=&quot;#致歉&quot; class=&quot;headerlink&quot; title=&quot;致歉&quot;&gt;&lt;/a&gt;致歉&lt;/h1&gt;&lt;p&gt;我在写文章的时候的时候只注意了原作者的文章内容是否够好，而忽略了内容的原创性。因此发生了最近几篇内容抄袭原创作品这样不好的事情。本人以全部删
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>基于vue-cli配置移动端自适应</title>
    <link href="http://yoursite.com/2017/06/16/%E5%9F%BA%E4%BA%8Evue-cli%E9%85%8D%E7%BD%AE%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://yoursite.com/2017/06/16/基于vue-cli配置移动端自适应/</id>
    <published>2017-06-16T10:44:03.000Z</published>
    <updated>2017-06-16T10:44:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前写过一篇关于移动端屏幕适配：<a href="http://hjingren.cn/2017/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E8%A7%A3%E5%86%B3/" target="_blank" rel="noopener">移动端屏幕适配的解决</a>，今天来聊一聊基于vue-cli配置的移动端屏幕适配问题。</p></blockquote><p>配方还是一样：手淘的 <a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a> + rem</p><h1 id="配置-flexible"><a href="#配置-flexible" class="headerlink" title="配置 flexible"></a>配置 flexible</h1><h2 id="安装-lib-flexible"><a href="#安装-lib-flexible" class="headerlink" title="安装 lib-flexible"></a>安装 lib-flexible</h2><p>在命令行中运行如下安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible --save</span><br></pre></td></tr></table></figure><h2 id="引入-lib-flexible"><a href="#引入-lib-flexible" class="headerlink" title="引入 lib-flexible"></a>引入 lib-flexible</h2><p>在项目入口文件 main.js 里 引入 lib-flexible</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib-flexible'</span></span><br></pre></td></tr></table></figure><h2 id="添加-meta-标签"><a href="#添加-meta-标签" class="headerlink" title="添加 meta 标签"></a>添加 meta 标签</h2><p>在项目根目录的 index.html 中添加如下 meta</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="px-转-rem"><a href="#px-转-rem" class="headerlink" title="px 转 rem"></a>px 转 rem</h1><p>实际开发中，我们通过设计稿得到的值单位是 px，所以要将 px 转换成 rem 再写进样式中。<br>将 px 转换成 rem 我们将使用 px2rem 这个工具，它有 webpack 的 loader：<a href="https://github.com/Jinjiang/px2rem-loader" target="_blank" rel="noopener">px2rem-loader</a></p><h2 id="安装-px2rem-loader"><a href="#安装-px2rem-loader" class="headerlink" title="安装 px2rem-loader"></a>安装 px2rem-loader</h2><p>在命令行中运行如下安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i px2rem-loade --save-dev</span><br></pre></td></tr></table></figure><h2 id="配置-px2rem-loade"><a href="#配置-px2rem-loade" class="headerlink" title="配置 px2rem-loade"></a>配置 px2rem-loade</h2><p>在 vue-cli 生成的 webpack 配置中，vue-loader 的 options 和其他样式文件 loader 最终是都是由 build/utils.js 里的一个方法生成的。</p><p>我们只需在 cssLoader 后再加上一个 px2remLoader 即可，px2rem-loader 的 remUnit 选项意思是 1rem=多少像素，结合 lib-flexible 的方案，我们将 px2remLoader 的 options.remUnit 设置成设计稿宽度的 1/10，这里我们假设设计稿宽为 750px。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line"><span class="keyword">var</span> cssLoader = &#123;</span><br><span class="line">  loader: <span class="string">'css-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    minimize: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">    sourceMap: options.sourceMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> px2remLoader = &#123;</span><br><span class="line">  loader: <span class="string">'px2rem-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    remUnit: <span class="number">75</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>并放进 loaders 数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span>(<span class="params">loader, loaderOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loaders = [cssLoader, px2remLoader]</span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>修改配置后需要重启，然后我们在组件中写单位直接写 px，设计稿量多少就可以写多少了，舒服多了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前写过一篇关于移动端屏幕适配：&lt;a href=&quot;http://hjingren.cn/2017/03/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Nginx与Node的纠缠</title>
    <link href="http://yoursite.com/2017/06/11/Nginx%E4%B8%8ENode%E7%9A%84%E7%BA%A0%E7%BC%A0/"/>
    <id>http://yoursite.com/2017/06/11/Nginx与Node的纠缠/</id>
    <published>2017-06-11T12:10:54.000Z</published>
    <updated>2017-06-11T12:13:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：前几天面试被问到：“nginx的好处？nginx和node的比较”，所以在这里总结一波。</p></blockquote><h1 id="nginx的好处"><a href="#nginx的好处" class="headerlink" title="nginx的好处"></a>nginx的好处</h1><ul><li>热部署</li><li>高并发连接</li><li>处理响应请求很快</li><li>具有很高的可靠性</li></ul><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>在不停止服务的情况下修改配置文件，更换日志文件等功能。</p><h2 id="高并发连接"><a href="#高并发连接" class="headerlink" title="高并发连接"></a>高并发连接</h2><p>高并发：是指在同一个时间点，有很多用户同时的访问URL地址，比如：淘宝的双11，双12，就会产生高并发。</p><p>这是一个很重要的一个特性！在这一个 互联网 快速发展， 互联网 用户数量不断增加，一些大公司、网站都需要面对高并发请求，如果有一个能够在峰值顶住10万以上并发请求的Server，肯定会得到大家的青睐。理论上，Nginx支持的并发连接上限取决于你的内存，10万远未封顶。</p><h1 id="Nginx能做什么"><a href="#Nginx能做什么" class="headerlink" title="Nginx能做什么"></a>Nginx能做什么</h1><ul><li>反向代理</li><li>负载均衡</li><li>HTTP服务器（包含动静分离）</li><li>正向代理</li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理应该是Nginx做的最多的一件事了，什么是反向代理呢，以下是百度百科的说法：反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。 </p><p>下面贴上一段简单的实现反向代理的代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  localhost;</span><br><span class="line"> </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://localhost:8081;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们访问localhost的时候，就相当于访问localhost:8081了</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡可以把用户的请求分摊到多个服务器上进行处理，从而实现了对海量用户的访问支持。负载均衡的架构如图所示：</p><p>简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line"><span class="attribute">server_name</span>  localhost;</span><br><span class="line"> </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://test;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h2><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  localhost;</span><br><span class="line"> </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>   /home/hzzly;</span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line"><span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line"><span class="attribute">root</span>   html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。</p><h1 id="node的特点"><a href="#node的特点" class="headerlink" title="node的特点"></a>node的特点</h1><ul><li>它是一个javascript运行环境</li><li>依赖于Chrome V8引擎进行代码解释</li><li>事件驱动</li><li>非阻塞I/O</li><li>轻量、可伸缩，适于实时数据交互应用</li><li>并发连接（高并发）</li></ul><h2 id="node应用场景"><a href="#node应用场景" class="headerlink" title="node应用场景"></a>node应用场景</h2><p>NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景。（RESTful API，聊天）</p><h2 id="Event-Loop、消息队列、事件轮询"><a href="#Event-Loop、消息队列、事件轮询" class="headerlink" title="Event Loop、消息队列、事件轮询"></a>Event Loop、消息队列、事件轮询</h2><p>通过回调函数（Callback）和异步机制来实现非阻塞。<br>通过事件队列和事件循环来实现并发连接。</p><p>异步函数在执行结束后，会在事件队列中添加一个事件（回调函数）(遵循先进先出原则)，主线程中的代码执行完毕后（即一次循环结束），下一次循环开始就在事件队列中“读取”事件，然后调用它所对应的回调函数。这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）</p><h1 id="nginx和node的比较"><a href="#nginx和node的比较" class="headerlink" title="nginx和node的比较"></a>nginx和node的比较</h1><ul><li>一个更专业，一个更全面。</li><li>Nginx 采用C编写，性能更高，但是它仅适合于做web服务器，用于反向代理或者负载均衡等服务。</li><li>NodeJs高性能平台，web服务只是其中一块，NodeJs在处理业务层用的是JS编写,采用的是异步编程方式和思维方式。</li><li>Node.js发展方向不再单独是一个Web服务器，而是一个面向网络的平台，它甚至可以是TCP服务器，或者变身为远端服务器的客户端。</li></ul><h1 id="nginx与node的完美搭配"><a href="#nginx与node的完美搭配" class="headerlink" title="nginx与node的完美搭配"></a>nginx与node的完美搭配</h1><p>node自己本身可以作为服务器进行驱动，但是node本身对文件的处理能力并不是很好，所以当我们的生产环境中应尽量使用nginx来处理静态的资源以及反向代理，同时也解决了node分布式以及负载均衡的相关问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：前几天面试被问到：“nginx的好处？nginx和node的比较”，所以在这里总结一波。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;nginx的好处&quot;&gt;&lt;a href=&quot;#nginx的好处&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>js实现图片懒加载</title>
    <link href="http://yoursite.com/2017/06/09/js%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2017/06/09/js实现图片懒加载/</id>
    <published>2017-06-09T14:23:39.000Z</published>
    <updated>2017-06-19T03:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：最近面试都被问到了这个问题，所以在这里整理一波。</p></blockquote><h1 id="懒加载的意义"><a href="#懒加载的意义" class="headerlink" title="懒加载的意义"></a>懒加载的意义</h1><blockquote><p>懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数，对服务器缓压。</p></blockquote><p><strong>预加载:</strong>提前加载好，缓存到本地，当需要的时候直接读取缓存，对服务器增压</p><h1 id="懒加载实现方式"><a href="#懒加载实现方式" class="headerlink" title="懒加载实现方式"></a>懒加载实现方式</h1><ul><li><p>第一种是纯粹的延迟加载，使用setTimeOut或setInterval进行加载延迟</p></li><li><p>第二种是条件加载，符合某些条件，或触发了某些事件才开始异步下载</p></li><li><p>第三种是可视区加载，即仅加载用户可以看到的区域，这个主要由监控滚动条来实现，一般会在距用户看到某图片前一定距离遍开始加载，这样能保证用户拉下时正好能看到图片</p></li></ul><p>Web 图片的懒加载就是通过读取img元素，然后获得img元素的data-src（也可以约定为其他属性名）属性的值，并赋予img的src，从而实现动态加载图片的机制</p><h2 id="1、懒加载HTML约定"><a href="#1、懒加载HTML约定" class="headerlink" title="1、懒加载HTML约定"></a>1、懒加载HTML约定</h2><p>我们首先需要给准备实施懒加载的img元素添加指定的class 这里为m-lazyload ,同时将img src赋值给 data-src属性。<br>具体示例为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"m-lazyload"</span> <span class="attr">data-src</span>=<span class="string">"imgUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="2、懒加载JavaScript实现"><a href="#2、懒加载JavaScript实现" class="headerlink" title="2、懒加载JavaScript实现"></a>2、懒加载JavaScript实现</h2><p>动态加载总共分为以下几个步骤:<br>1、添加页面滚动监听事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, _delay, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_delay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">clearTimeout(delay);</span><br><span class="line">delay = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">_loadImage();</span><br><span class="line">&#125;, time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、当触发监听事件时会执行 _loadImage 函数，该函数负责加载图片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_loadImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = imgList.length; i--;) &#123;</span><br><span class="line"><span class="keyword">var</span> el = imgList[i];</span><br><span class="line"><span class="keyword">if</span> (_isShow(el)) &#123;</span><br><span class="line">el.src = el.getAttribute(<span class="string">'data-src'</span>);</span><br><span class="line">el.className = el.className.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(\\s|^)"</span> + _selector.substring(<span class="number">1</span>, _selector.length) + <span class="string">"(\\s|$)"</span>), <span class="string">" "</span>);</span><br><span class="line">imgList.splice(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、判断该图片是否在当前窗口的可视区域内<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isShow</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> coords = el.getBoundingClientRect();</span><br><span class="line"><span class="keyword">return</span> ( (coords.top &gt;= <span class="number">0</span> &amp;&amp; coords.left &gt;= <span class="number">0</span> &amp;&amp; coords.top) &lt;= (<span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight) + <span class="built_in">parseInt</span>(offset));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这一个简单的图片懒加载就写成了</p><blockquote><p>当网页滚动的事件被触发 -&gt; 执行加载图片操作 -&gt; 判断图片是否在可视区域内 -&gt; 在，则动态将data-src的值赋予该图片。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：最近面试都被问到了这个问题，所以在这里整理一波。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;懒加载的意义&quot;&gt;&lt;a href=&quot;#懒加载的意义&quot; class=&quot;headerlink&quot; title=&quot;懒加载的意义&quot;&gt;&lt;/a&gt;懒加载的意义
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DIY一个自己的音乐播放器2.0来袭</title>
    <link href="http://yoursite.com/2017/06/05/DIY%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A82-0%E6%9D%A5%E8%A2%AD/"/>
    <id>http://yoursite.com/2017/06/05/DIY一个自己的音乐播放器2-0来袭/</id>
    <published>2017-06-05T13:32:59.000Z</published>
    <updated>2017-06-06T02:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：之前做的第一版播放器功能做出来了，但发现结构不是很优雅以及后端api很不稳定，所以进行了一次小升级。此次升级 <strong>功能更全，体验更好，api更稳定，技术栈更多，收获也更多</strong>👍。</p></blockquote><p>[温馨提示：pc浏览f12手机模式最佳,手机建议wifi下访问,低版本浏览器可能有兼容性问题]</p><h2 id="预览地址：-http-hzzly-net-magic-music"><a href="#预览地址：-http-hzzly-net-magic-music" class="headerlink" title="预览地址： http://hzzly.net/magic-music"></a>预览地址： <a href="http://hzzly.net/magic-music" target="_blank" rel="noopener">http://hzzly.net/magic-music</a></h2><h2 id="Github地址：-https-github-com-hzzly-MagicMusic"><a href="#Github地址：-https-github-com-hzzly-MagicMusic" class="headerlink" title="Github地址： https://github.com/hzzly/MagicMusic"></a>Github地址： <a href="https://github.com/hzzly/MagicMusic" target="_blank" rel="noopener">https://github.com/hzzly/MagicMusic</a></h2><p>欢迎大家的star和fork😄~</p><h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><ul><li><strong>首页</strong><ul><li>轮播</li><li>个性推荐[流行、古典、轻音乐、流行]</li><li>歌曲操作（动画）</li></ul></li><li><strong>底部播放控件</strong><ul><li>播放、暂停、下一曲</li><li>实时播放进度条</li></ul></li><li><strong>播放页</strong><ul><li>上一曲、播放、暂停、下一曲</li><li>播放进度条（弧形进度条）</li><li>歌词滚动、歌词高亮</li></ul></li><li><strong>播放列表</strong><ul><li>播放歌曲高亮</li><li>切歌(单击切歌)</li><li>删歌(点击右侧小X)</li><li>清空播放列表</li><li>本地缓存播放列表</li></ul></li><li><strong>排行榜</strong><ul><li>排行榜列表</li><li>排行榜里的歌曲(单击播放)、全部播放</li></ul></li><li><strong>音乐搜索</strong><ul><li>搜索单曲、歌手</li><li>搜索历史记录</li></ul></li><li><strong>侧边栏</strong></li></ul><h2 id="未实现的功能"><a href="#未实现的功能" class="headerlink" title="未实现的功能"></a>未实现的功能</h2><ul><li>喜欢、分享、下载、切换播放模式</li></ul><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="http://hzzly.net/magic-music/screenshots/music.gif" alt="http://hzzly.net/magic-music/screenshots/music.gif"></p><p><strong>更多预览👉</strong><a href="http://hzzly.net/magic-music/screenshots/" target="_blank" rel="noopener">更多</a></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>1、<code>Vue全家桶(vue2、vue-router、vuex)</code> 快速开发SPA神器<br>2、<code>Axios</code> vue作者推荐的数据请求方案<br>3、<code>ES6</code> 全面过度es6的写法 趋势<br>4、<code>Webpack2</code> 脚手架已经配置好了，超贴心<br>5、<code>Promise</code> 把请求封装在promise中，方便的可以使用.then回调<br>6、<code>flex布局</code> 对于移动端可以放心大胆的使用<br>7、<code>移动端屏幕适配</code> 采用手淘的flexible+rem方案<br>8、<code>本地存储(sessionStorage、localStorage)</code> 避免重复资源请求，快速读取<br>9、<code>图片懒加载</code> vue-lazyload 提升用户体验</p><h2 id="本次更新日志"><a href="#本次更新日志" class="headerlink" title="本次更新日志"></a>本次更新日志</h2><ul><li>后端api采用pm2来部署，防止断开后数据无法请求的尴尬。</li><li>把监听audio加载完数据事件统一管理起来，避免重复监听，优化代码结构。</li><li>更新axios请求，让请求更加优美。</li><li>修改播放页面，优化用户体验。</li><li>添加加载音乐loading等待，提升用户体验。</li><li>添加播放全部，避免一个一个添加。</li><li>本地缓存播放列表与清空。</li><li>修改首页tab切换动效</li></ul><p><a href="http://hjingren.cn/2017/04/27/%E2%80%99DIY%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/" target="_blank" rel="noopener">DIY一个自己的音乐播放器1.0</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>MagicMusic还在不断努力的改进，觉得还行的可以点个star，<strong>你的star是我继续开源创作的动力</strong>，谢谢！！！当然有建议可以在issues里提。<br><strong>项目地址：</strong> <a href="https://github.com/hzzly/MagicMusic" target="_blank" rel="noopener">https://github.com/hzzly/MagicMusic</a><br>欢迎大家的star啦~</p><h2 id="求实习"><a href="#求实习" class="headerlink" title="求实习"></a>求实习</h2><p>本人大三，求一个前端实习：<a href="http://hzzly.net/resume/" target="_blank" rel="noopener">简历</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：之前做的第一版播放器功能做出来了，但发现结构不是很优雅以及后端api很不稳定，所以进行了一次小升级。此次升级 &lt;strong&gt;功能更全，体验更好，api更稳定，技术栈更多，收获也更多&lt;/strong&gt;👍。&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 Nginx的折腾</title>
    <link href="http://yoursite.com/2017/06/05/CentOS-7-Nginx%E7%9A%84%E6%8A%98%E8%85%BE/"/>
    <id>http://yoursite.com/2017/06/05/CentOS-7-Nginx的折腾/</id>
    <published>2017-06-05T05:52:23.000Z</published>
    <updated>2017-06-05T05:52:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS-7-下安装-Nginx"><a href="#CentOS-7-下安装-Nginx" class="headerlink" title="CentOS 7 下安装 Nginx"></a><strong>CentOS 7 下安装 Nginx</strong></h2><h3 id="查看centos版本"><a href="#查看centos版本" class="headerlink" title="查看centos版本"></a>查看centos版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/redhat-release</span><br></pre></td></tr></table></figure><h3 id="一-gcc-安装"><a href="#一-gcc-安装" class="headerlink" title="一. gcc 安装"></a>一. gcc 安装</h3><blockquote><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc-c++</span><br></pre></td></tr></table></figure><h3 id="二-pcre-pcre-devel-安装"><a href="#二-pcre-pcre-devel-安装" class="headerlink" title="二. pcre pcre-devel 安装"></a>二. pcre pcre-devel 安装</h3><blockquote><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><h3 id="三-zlib-安装"><a href="#三-zlib-安装" class="headerlink" title="三. zlib 安装"></a>三. zlib 安装</h3><blockquote><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><h3 id="四-OpenSSL-安装"><a href="#四-OpenSSL-安装" class="headerlink" title="四. OpenSSL 安装"></a>四. OpenSSL 安装</h3><blockquote><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="五、官网下载"><a href="#五、官网下载" class="headerlink" title="五、官网下载"></a>五、官网下载</h3><blockquote><ul><li>打开<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></li><li>找到Stable version下的 <a href="http://nginx.org/download/nginx-1.12.0.tar.gz" target="_blank" rel="noopener">nginx-1.12.0</a></li><li>右键 复制链接</li><li>使用wget命令下载</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">$ wget -c http://nginx.org/download/nginx-1.12.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf nginx-1.12.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.12.0</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>使用默认配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>查找安装路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whereis nginx</span><br></pre></td></tr></table></figure></p><h3 id="启动、停止nginx"><a href="#启动、停止nginx" class="headerlink" title="启动、停止nginx"></a>启动、停止nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line">$ ./nginx </span><br><span class="line">$ ./nginx -s stop      //此方式相当于先查出nginx进程id再使用<span class="built_in">kill</span>命令强制杀掉进程。</span><br><span class="line">$ ./nginx -s quit      //此方式停止步骤是待nginx进程处理任务完毕进行停止。</span><br><span class="line">$ ./nginx -s reload    //重启，当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 ngin x再启动 nginx 即可将配置信息在 nginx 中生效</span><br></pre></td></tr></table></figure><h3 id="检验是否安装成功"><a href="#检验是否安装成功" class="headerlink" title="检验是否安装成功"></a>检验是否安装成功</h3><p>打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。</p><h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><p>即在rc.local增加启动代码就可以了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/rc.local</span><br></pre></td></tr></table></figure></p><p>增加一行 /usr/local/nginx/sbin/nginx</p><p>设置执行权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 /etc/rc.local</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CentOS-7-下安装-Nginx&quot;&gt;&lt;a href=&quot;#CentOS-7-下安装-Nginx&quot; class=&quot;headerlink&quot; title=&quot;CentOS 7 下安装 Nginx&quot;&gt;&lt;/a&gt;&lt;strong&gt;CentOS 7 下安装 Nginx&lt;/stro
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>征服前端面试</title>
    <link href="http://yoursite.com/2017/05/31/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/05/31/前端面试整理/</id>
    <published>2017-05-31T08:52:12.000Z</published>
    <updated>2017-06-11T08:36:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：以下是整理一些面试中经常会遇到的经典面试题以及自己面试过程中有一些未解决的问题，通过对知识的整理以及经验的总结，重新巩固自身的前端基础知识，如有错误或更好的答案，欢迎指正，水平有限，望各位不吝指教。:）</p></blockquote><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote><p>我们创建的每一个函数，都可以有一个prototype属性，该属性指向一个对象。这个对象，就是原型。</p></blockquote><p>当我们在创建对象时，可以根据自己的需求，选择性的将一些属性和方法通过prototype属性，挂载在原型对象上。而每一个new出来的实例，都有一个<strong>proto</strong>属性，该属性指向构造函数的原型对象，通过这个属性，让实例对象也能够访问原型对象上的方法。因此，当所有的实例都能够通过<strong>proto</strong>访问到原型对象时，原型对象的方法与属性就变成了共有方法与属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 通过prototye属性，将方法挂载到原型对象上</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'tim'</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'jak'</span>, <span class="number">22</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.getName === p2.getName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="http://omt3u4bph.bkt.clouddn.com/599584-2fc7dad23d112791.png" alt="http://omt3u4bph.bkt.clouddn.com/599584-2fc7dad23d112791.png"><br>通过图示我们可以看出，构造函数的prototype与所有实例对象的<strong>proto</strong>都指向原型对象。而原型对象的constructor指向构造函数。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><blockquote><p>我们知道所有的函数都有一个叫做toString的方法。那么这个方法到底是在哪里的呢？</p></blockquote><p>先随意声明一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omt3u4bph.bkt.clouddn.com/599584-da97dde356289ade.png" alt="http://omt3u4bph.bkt.clouddn.com/599584-da97dde356289ade.png"><br>其中foo是Function对象的实例。而Function的原型对象同时又是Object的实例。这样就构成了一条原型链。原型链的访问，其实跟作用域链有很大的相似之处，他们都是一次单向的查找过程。因此实例对象能够通过原型链，访问到处于原型链上对象的所有属性与方法。这也是foo最终能够访问到处于Object原型对象上的toString方法的原因。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><ul><li>第一种理解（红宝书）：是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量</li><li>第二种理解（你不知道的javascript）：当函数可以记住并访问所在的词法作用域时，就产生了闭包，这个函数持有对该词法作用域的引用，这个引用就叫做闭包</li><li>闭包本质还是函数，只不过这个函数绑定了上下文环境（函数内部引用的所有变量）</li></ul></blockquote><p><strong>缺点：</strong>常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。<br><strong>作用(使用场景)：</strong>可以用来管理私有变量和私有方法，将对变量（状态）的变化封装在安全的环境中，使得这些变量不能被外部随意修改，同时又可以通过指定的函数接口来操作。<br><strong>闭包有三个特性：</strong><br>1.函数嵌套函数<br>2.函数内部可以引用外部的参数和变量<br>3.参数和变量不会被垃圾回收机制回收</p><p>题外话：</p><blockquote><ul><li>JavaScript的作用域就是词法作用域而不是动态作用域,</li><li>词法作用域最重要的特征是它的定义过程发生在代码的书写阶段</li><li>动态作用域的作用域链是基于调用栈的 词法作用域的作用域链是基于代码中的作用域嵌套</li></ul></blockquote><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote><p>JavaScript的this总是指向一个对象，而具体指向哪个对象是在运行时基于函数的执行环境动态绑定的，而非函数被声明时的环境。</p></blockquote><p><strong>this的指向：</strong></p><p>1、作为普通函数调用（this指向全局对象window对象）<br>2、作为对象的方法调用（this指向该对象）<br>3、构造器调用（this指向用new返回的这个对象）<br>4、call、apply、bind的调用（this指向第一个参数对象）</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>1、函数作为参数传递<br>2、函数作为返回值输出</p><h2 id="new操作符具体干了什么呢"><a href="#new操作符具体干了什么呢" class="headerlink" title="new操作符具体干了什么呢?"></a>new操作符具体干了什么呢?</h2><p>1、创建一个新对象<br>2、将构造函数的作用域赋给新对象（因此this就指向了这个新对象）<br>3、执行构造函数中的代码（为这个新对象添加属性）<br>4、返回新对象</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1、简单原型链继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'hzzly'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super();    <span class="comment">// 核心</span></span><br></pre></td></tr></table></figure></p><p>缺点：<br>修改sub1.name后sub2.name也变了，因为来自原型对象的引用属性是所有实例共享的。</p><p>2、构造函数式继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line"><span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 实例函数</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">Super.call(<span class="keyword">this</span>, val);   <span class="comment">// 核心</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>缺点：<br>无法实现函数复用，每个子类实例都持有一个新的fun函数，太多了就会影响性能，内存爆炸。。</p><p>3、组合式继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'hzzly'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型函数</span></span><br><span class="line">Super.prototype.fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Super.prototype.fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//Super.prototype.fun3...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">Super.call(<span class="keyword">this</span>);   <span class="comment">// 核心</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super();    <span class="comment">// 核心</span></span><br></pre></td></tr></table></figure></p><p>缺点：<br>子类原型上有一份多余的父类实例属性，因为父类构造函数被调用了两次，生成了两份，而子类实例上的那一份屏蔽了子类原型上父类的。。。又是内存浪费。</p><p>4、寄生组合式继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'hzzly'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Super.prototype.fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//Super.prototype.fun3...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">Super.call(<span class="keyword">this</span>);   <span class="comment">// 核心</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype=<span class="built_in">Object</span>.create(Super.prototype)   <span class="comment">// 核心</span></span><br><span class="line">Sub.prototype.constructor=Sub   <span class="comment">// 核心</span></span><br></pre></td></tr></table></figure></p><p>5、es6的class继承方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">B.__proto__ === A   <span class="comment">// true</span></span><br><span class="line">B.prototype.__proto__ === A.prototype   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>es6引入了class、extends、super、static(部分为ES2016标准)</p><h2 id="null和undefined的区别？"><a href="#null和undefined的区别？" class="headerlink" title="null和undefined的区别？"></a>null和undefined的区别？</h2><p>1、null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。<br>2、undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。<br>3、null表示”没有对象”，即该处不应该有值。</p><h2 id="call、apply、bind的区别"><a href="#call、apply、bind的区别" class="headerlink" title="call、apply、bind的区别"></a>call、apply、bind的区别</h2><ul><li>三者都是用来改变函数的this对象的指向的。</li><li>三者第一个参数都是this要指向的对象，也就是想指定的上下文。</li><li>call 传入的参数数量不固定，第二部分参数要一个一个传，用<code>，</code>隔开。</li><li>apply 接受两个参数，第二个参数为一个带下标的集合，可以为数组，也可以为类数组。</li><li>bind 是返回一个改变了上下文的函数副本，便于稍后调用；apply 、call 则是立即调用 。</li></ul><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><blockquote><ul><li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</li><li>localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li></ul></blockquote><p>具体参见：<a href="http://hjingren.cn/2017/04/26/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8sessionStorage%E4%B8%8ElocalStorage/" target="_blank" rel="noopener">本地存储sessionStorage与localStorage</a></p><h2 id="cookie-和session"><a href="#cookie-和session" class="headerlink" title="cookie 和session"></a>cookie 和session</h2><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。每次请求一个新的页面的时候Cookie都会被发送过去，与服务器进行交互。</p><h2 id="XML和JSON的区别？"><a href="#XML和JSON的区别？" class="headerlink" title="XML和JSON的区别？"></a>XML和JSON的区别？</h2><p>1、数据体积方面。<br>JSON相对于XML来讲，数据的体积小，传递的速度更快些。<br>2、数据交互方面。<br>JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。<br>3、数据描述方面。<br>JSON对数据的描述性比XML较差。<br>4、传输速度方面。<br>JSON的速度要远远快于XML。</p><h2 id="如何实现浏览器内多个标签页之间的通信"><a href="#如何实现浏览器内多个标签页之间的通信" class="headerlink" title="如何实现浏览器内多个标签页之间的通信?"></a>如何实现浏览器内多个标签页之间的通信?</h2><p>调用localstorge、cookies等本地存储方式</p><h2 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h2><p>1、一个程序至少有一个进程,一个进程至少有一个线程.<br>2、线程的划分尺度小于进程，使得多线程程序的并发性高。<br>3、进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>4、线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>5、从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p><h2 id="渐进增强和优雅降级"><a href="#渐进增强和优雅降级" class="headerlink" title="渐进增强和优雅降级"></a>渐进增强和优雅降级</h2><ul><li><p>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p></li><li><p>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p></li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>网页内容<ul><li>减少 http请求次数</li><li>减少 DNS查询次数</li><li>避免页面跳转</li><li>缓存 Ajax</li><li>延迟加载</li><li>提前加载</li><li>减少 DOM元素数量</li><li>避免 404</li></ul></li><li>服务器<ul><li>使用CDN(内容分发网络)</li><li>添加Expires或Cache-Control报文头</li><li>Gzip压缩传输文件</li></ul></li><li>CSS<ul><li>将样式表置顶</li><li>用<link>代替@import</li></ul></li><li>JavaScript<ul><li>把脚本置于页面底部</li><li>使用外部JavaScript和CSS</li><li>精简JavaScript和CSS</li><li>去除重复脚本</li><li>减少DOM访问</li></ul></li><li>图片<ul><li>优化图像</li><li>优化CSS Spirite</li><li>不要在HTML中缩放图片</li><li>favicon.ico要小而且可缓存</li></ul></li></ul><h2 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题?"></a>如何解决跨域问题?</h2><p>jsonp、CORS、document.domain+iframe、window.name、window.postMessage</p><p>jsonp的原理是动态插入script标签</p><h2 id="请解释一下-JavaScript-的同源策略。"><a href="#请解释一下-JavaScript-的同源策略。" class="headerlink" title="请解释一下 JavaScript 的同源策略。"></a>请解释一下 JavaScript 的同源策略。</h2><p>这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。</p><p>指一段脚本只能读取来自同一来源的窗口和文档的属性。</p><h2 id="哪些操作会造成内存泄漏？"><a href="#哪些操作会造成内存泄漏？" class="headerlink" title="哪些操作会造成内存泄漏？"></a>哪些操作会造成内存泄漏？</h2><p>1、内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>2、垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。<br>3、setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p><h2 id="Javascript垃圾回收方法"><a href="#Javascript垃圾回收方法" class="headerlink" title="Javascript垃圾回收方法"></a>Javascript垃圾回收方法</h2><p>1、标记清除：这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</p><p>2、引用计数：引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p><h2 id="事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？"><a href="#事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？" class="headerlink" title="事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？"></a>事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2><p>事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件。</p><p>阻止冒泡：ev.stopPropagation()</p><h2 id="说说严格模式的限制"><a href="#说说严格模式的限制" class="headerlink" title="说说严格模式的限制"></a>说说严格模式的限制</h2><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>禁止this指向全局对象</li><li>不能使用with语句</li><li>增加了保留字</li><li>arguments不会自动反映函数参数的变化</li></ul><p><strong>设立”严格模式”的目的：</strong></p><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p><p>消除代码运行的一些不安全之处，保证代码运行的安全；</p><p>提高编译器效率，增加运行速度；</p><p>为未来新版本的Javascript做好铺垫。</p><h2 id="请解释什么是事件代理"><a href="#请解释什么是事件代理" class="headerlink" title="请解释什么是事件代理"></a>请解释什么是事件代理</h2><p>事件代理（Event Delegation），又称之为事件委托。即是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。使用事件代理的好处是可以提高性能。</p><h2 id="Event-Loop、消息队列、事件轮询"><a href="#Event-Loop、消息队列、事件轮询" class="headerlink" title="Event Loop、消息队列、事件轮询"></a>Event Loop、消息队列、事件轮询</h2><p>异步函数在执行结束后，会在事件队列中添加一个事件（回调函数）(遵循先进先出原则)，主线程中的代码执行完毕后（即一次循环结束），下一次循环开始就在事件队列中“读取”事件，然后调用它所对应的回调函数。这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）</p><p>主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码（同步任务）调用各种外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。</p><p>执行栈中的代码（同步任务），总是在读取”任务队列”（异步任务）之前执行。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><blockquote><p>浏览器缓存（Browser Caching）是浏览器端保存数据用于快速读取或避免重复资源请求的优化机制，有效的缓存使用可以避免重复的网络请求和浏览器快速地读取本地数据，</p></blockquote><ul><li><p>http缓存</p><blockquote><p>http缓存是基于HTTP协议的浏览器文件级缓存机制。即针对文件的重复请求情况下，浏览器可以根据协议头判断从服务器端请求文件还是从本地读取文件<br>判断expires，如果未过期，直接读取http缓存文件</p></blockquote></li><li><p>indexDB</p><blockquote><p>是一个在客户端存储可观数量的结构化数据,并且为这些数据添加索引进行高性能检索。</p></blockquote></li><li><p>cookie</p><blockquote><p>指一般网站为了辨别用户身份、储存在用户本地终端上的数据（通常经过加密）。cookie一般通过http请求中在头部一起发送到服务器端。一条cookie记录主要由键、值、域、过期时间、大小组成，一般用户保存用户的认证信息。</p></blockquote></li><li><p>localstorage</p><blockquote><p>localStorage是h5的一种新的本地缓存方案,加快下次页面打开时的渲染速度,除非主动删除数据，否则数据是永远不会过期的。</p></blockquote></li><li><p>sessionstorage</p><blockquote><p>也是h5的一种本地缓存方案，数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时， 之前的存储已经被清除。</p></blockquote></li></ul><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="ES6的了解"><a href="#ES6的了解" class="headerlink" title="ES6的了解"></a>ES6的了解</h2><p>es6是一个新的标准，它包含了许多新的语言特性和库，是JS最实质性的一次升级。比如’箭头函数’、’字符串模板’、’generators(生成器)’、’async/await’、’解构赋值’、’class’等等，还有就是引入module模块的概念。</p><p><code>箭头函数</code>可以让this指向固定化，这种特性很有利于封装回调函数<br>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。<br>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。<br>（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。</p><p><code>async/await</code>是写异步代码的新方式，以前的方法有回调函数和Promise。<br>async/await是基于Promise实现的，它不能用于普通的回调函数。<br>async/await与Promise一样，是非阻塞的。<br>async/await使得异步代码看起来像同步代码，这正是它的魔力所在。</p><h2 id="说说你对Promise的理解"><a href="#说说你对Promise的理解" class="headerlink" title="说说你对Promise的理解"></a>说说你对Promise的理解</h2><blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件监听——更合理和更强大。</p></blockquote><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p>Promise对象有以下两个特点:</p><blockquote><ul><li>对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</li></ul></blockquote><h2 id="说说你对AMD和Commonjs的理解"><a href="#说说你对AMD和Commonjs的理解" class="headerlink" title="说说你对AMD和Commonjs的理解"></a>说说你对AMD和Commonjs的理解</h2><p>CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。</p><p>AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。</p><h2 id="Gulp、Webpack比较"><a href="#Gulp、Webpack比较" class="headerlink" title="Gulp、Webpack比较"></a>Gulp、Webpack比较</h2><ul><li>Gulp</li></ul><p>1、Gulp就是为了规范前端开发流程，实现前后端分离、模块化开发、版本控制、文件合并与压缩、mock数据等功能的一个前端自动化构建工具。<br>2、Gulp就像是一个产品的流水线，整个产品从无到有，都要受流水线的控制，在流水线上我们可以对产品进行管理。<br>3、Gulp是通过task对整个开发过程进行构建。</p><ul><li>Webpack</li></ul><p>1、当下最热门的前端资源模块化管理和打包工具<br>2、可以很好的管理模块以及各个模块之间的依赖<br>3、对js、css、图片等资源文件都支持打包<br>4、有独立的配置文件webpack.config.js<br>5、可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间<br>6、可以生成优化且合并后的静态资源</p><p>两大特色：1、代码可以自动完成编译。2、loader 可以处理各种类型的静态文件，并且支持串联操作</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="display-none和visibility-hidden的区别？"><a href="#display-none和visibility-hidden的区别？" class="headerlink" title="display:none和visibility:hidden的区别？"></a>display:none和visibility:hidden的区别？</h2><p>display:none  隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。</p><p>visibility:hidden  隐藏对应的元素，但是在文档布局中仍保留原来的空间。</p><h2 id="position-absolute和float属性的异同"><a href="#position-absolute和float属性的异同" class="headerlink" title="position:absolute和float属性的异同"></a>position:absolute和float属性的异同</h2><p>A：共同点：<br>对内联元素设置<code>float</code>和<code>absolute</code>属性，可以让元素脱离文档流，并且可以设置其宽高。</p><p>B：不同点：<br>float仍会占据位置，position会覆盖文档流中的其他元素。</p><h2 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h2><ul><li><p>content-box：让元素维持W3C的标准盒模型。元素的宽度/高度由border + padding + content的宽度/高度决定，设置width/height属性指的是content部分的宽/高，一旦修改了元素的边框或内距，就会影响元素的盒子尺寸，就不得不重新计算元素的盒子尺寸，从而影响整个页面的布局。</p></li><li><p>border-box：让元素维持IE传统盒模型（IE6以下版本和IE6~7的怪异模式）。设置width/height属性指的是border + padding + content</p></li></ul><h2 id="position的值"><a href="#position的值" class="headerlink" title="position的值"></a>position的值</h2><ul><li>static  默认值。没有定位，元素出现在正常的流中</li><li>relative 生成相对定位的元素，相对于其在普通流中的位置进行定位。 </li><li>absolute 生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。</li><li>fixed （老IE不支持）生成绝对定位的元素，相对于浏览器窗口进行定位。 </li></ul><h2 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h2><p>CSS3实现圆角（border-radius），阴影（box-shadow），<br>对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）<br>transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);//旋转,缩放,定位,倾斜<br>增加了更多的CSS选择器  多背景 rgba<br>在CSS3中唯一引入的伪元素是::selection.<br>媒体查询，多栏布局<br>border-image</p><h2 id="CSS-sprites"><a href="#CSS-sprites" class="headerlink" title="CSS sprites"></a>CSS sprites</h2><ul><li>CSS Sprites 其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字能精确的定位出背景图片的位置。这样可以减少很多图片请求的开销，因为请求耗时比较长；请求虽然可以并发，但是也有限制，一般浏览器都是6个。对于未来而言，就不需要这样做了，因为有了<code>http2</code>。</li></ul><h2 id="解释下浮动和它的工作原理？清除浮动的技巧"><a href="#解释下浮动和它的工作原理？清除浮动的技巧" class="headerlink" title="解释下浮动和它的工作原理？清除浮动的技巧"></a>解释下浮动和它的工作原理？清除浮动的技巧</h2><p>浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留。<br>1.使用空标签清除浮动。<br>   这种方法是在所有浮动标签后面添加一个空标签 定义css clear:both. 弊端就是增加了无意义标签。<br>2.使用overflow。<br>   设置overflow为hidden或者auto，给包含浮动元素的父标签添加css属性 overflow:auto; zoom:1; zoom:1用于兼容IE6。<br>3.使用after伪对象清除浮动。<br>   该方法只适用于非IE浏览器。该方法中必须为需要清除浮动元素的伪对象中设置 height:0，否则该元素会比实际高出若干像素；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">"."</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">visibility</span>:hidden;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浮动元素引起的问题"><a href="#浮动元素引起的问题" class="headerlink" title="浮动元素引起的问题"></a>浮动元素引起的问题</h2><p>1、父元素的高度无法被撑开，影响与父元素同级的元素<br>2、与浮动元素同级的非浮动元素（内联元素）会跟随其后<br>3、若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="说说你对语义化的理解"><a href="#说说你对语义化的理解" class="headerlink" title="说说你对语义化的理解"></a>说说你对语义化的理解</h2><p>1、去掉或者丢失样式的时候能够让页面呈现出清晰的结构<br>2、有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；<br>3、方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；<br>4、便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</p><h2 id="Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h2><p>1、<code>&lt;!DOCTYPE&gt;</code> 告知浏览器的解析器用什么文档标准解析这个文档。<br>2、严格模式的排版和 JS 运作模式是以该浏览器支持的最高标准运行。<br>3、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。<br>4、<code>&lt;!DOCTYPE&gt;</code> 不存在或格式不正确会导致文档以混杂模式呈现。 </p><h2 id="你知道多少种Doctype文档类型？"><a href="#你知道多少种Doctype文档类型？" class="headerlink" title="你知道多少种Doctype文档类型？"></a>你知道多少种Doctype文档类型？</h2><p>该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 HTML 文档。<br>HTML 4.01 规定了三种文档类型：Strict、Transitional 以及 Frameset。<br>XHTML 1.0 规定了三种 XML 文档类型：Strict、Transitional 以及 Frameset。<br>Standards （标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而 Quirks（包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。</p><h2 id="HTML与XHTML——二者有什么区别"><a href="#HTML与XHTML——二者有什么区别" class="headerlink" title="HTML与XHTML——二者有什么区别"></a>HTML与XHTML——二者有什么区别</h2><p>1、所有的标记都必须要有一个相应的结束标记<br>2、所有标签的元素和属性的名字都必须使用小写<br>3、所有的XML标记都必须合理嵌套<br>4、所有的属性必须用引号””括起来<br>5、把所有&lt;和&amp;特殊符号用编码表示<br>6、给所有属性赋一个值<br>7、不要在注释内容中使“–”<br>8、图片必须有说明文字</p><h2 id="html5有哪些新特性"><a href="#html5有哪些新特性" class="headerlink" title="html5有哪些新特性"></a>html5有哪些新特性</h2><p>语义化更好的内容标签（header,nav,footer,aside,article,section）<br>音频、视频API(audio,video)<br>画布(Canvas) API<br>地理(Geolocation) API<br>拖拽释放(Drag and drop) API<br>本地离线存储<br>表单控件，calendar、date、time、email、url、search  </p><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="HTTP请求类型"><a href="#HTTP请求类型" class="headerlink" title="HTTP请求类型"></a>HTTP请求类型</h2><p>GET：向特定的资源发出请求<br>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改<br>PUT：向指定资源位置上传其最新内容<br>DELETE：请求服务器删除Request-URI所标识的资源<br>OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的性能。</p><h2 id="HTTP请求四部分"><a href="#HTTP请求四部分" class="headerlink" title="HTTP请求四部分"></a>HTTP请求四部分</h2><p>1、HTTP请求的方法或动作，比如是get还是post请求；<br>2、正在请求的URL（请求的地址）；<br>3、请求头，包含一些客户端环境信息、身份验证信息等；<br>4、请求体（请求正文），可以包含客户提交的查询字符串信息、表单信息等。</p><p><strong>请求头字段：</strong></p><ul><li>Accept:text/html,image/*(告诉服务器，浏览器可以接受文本，网页图片)</li><li>Accept-Charaset:ISO-8859-1 [接受字符编码：iso-8859-1]</li><li>Accept-Encoding:gzip,compress[可以接受  gzip,compress压缩后数据]</li><li>Accept-Language:zh-cn[浏览器支持的语言]   </li><li>Host:localhost:8080[浏览器要找的主机]</li><li>If-Modified-Since:Tue, 09 May 2017 01:34:02 GMT[告诉服务器我这缓存中有这个文件,该文件的时间是…]</li><li>User-Agent:Nozilla/4.0(Com…)[告诉服务器我的浏览器内核，客户端环境信]</li><li>Cookie：[身份验证信息]</li><li>Connection:close/Keep-Alive [保持链接，发完数据后，我不关闭链接]</li></ul><h2 id="HTTP响应三部分"><a href="#HTTP响应三部分" class="headerlink" title="HTTP响应三部分"></a>HTTP响应三部分</h2><p>1、一个数字和文字组成的状态码，用来显示请求是成功还是失败；<br>2、响应头，响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等；<br>3、响应体（响应正文）。</p><p><strong>响应头字段：</strong></p><ul><li>Cache-Control:[告诉浏览器如何缓存页面(因为浏览器的兼容性最好设置两个)]</li><li>Connection:close/Keep-Alive [保持链接，发完数据后，我不关闭链接]</li><li>Content-Type:text/html;charset=gb2312[内容格式和编码]</li><li>Last-Modified:Tue,11 Juj,2017 18 18:29:20[告诉浏览器该资源上次更新时间是多少]</li><li>ETag:”540-54f0d59b8b680”</li><li>Expires:Fri, 26 May 2017 13:28:33 GMT [失效日期]</li><li>server:apache tomcat nginx [哪种服务器]</li></ul><h2 id="说说TCP传输的三次握手"><a href="#说说TCP传输的三次握手" class="headerlink" title="说说TCP传输的三次握手"></a>说说TCP传输的三次握手</h2><p>第一次握手，客户端给服务器发送数据包（<code>带SYN标志的数据包</code>）。此时服务器确认自己可以接收客户端的包，而客户端不确认服务器是否接收到了自己发的数据包。</p><p>第二次握手，服务器端回复（<code>回传一个带有SYN/ACK标志的数据包以示传达确认信息</code>）客户端。此时客户端确认自己发的包被服务器收到，也确认自己可以正常接收服务器包，客户端对此次通信没有疑问了。服务器也可以确认自己能接收到客户端的包，但不能确认客户端能否接收自己发的包。</p><p>第三次握手，客户端回复（<code>发送端再回传一个带ACK标志的数据包，代表“握手”结束</code>）服务器。  客户端已经没有疑问了，服务器也确认刚刚客户端收到了自己的数据包。两边都没有问题，开始通信。</p><p><strong>为什么要三次握手：</strong><br>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。也防止了服务器端的一直等待而浪费资源<br>TCP作为一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率，而用三次恰恰可以满足以上两方面的需求！</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>1、主机向服务器发送一个断开连接的请求（ 不早了，我该走了 ）,<code>发送一个FIN报文段</code>；<br>2、服务器接到请求后发送确认收到请求的信号（ 知道了 ）<code>回一个ACK报文段</code>；<br>3、服务器向主机发送断开通知（ 我也该走了 ）<code>发送FIN报文段，请求关闭连接</code>；<br>4、主机接到断开通知后断开连接并反馈一个确认信号（ 嗯，好的 ），服务器收到确认信号后也断开连接；</p><h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><p>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来</p><p>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</p><h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><p>1、HTTP协议通常承载于TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS<br>2、默认HTTP的端口号为80，HTTPS的端口号为443</p><p>HTTPS 相对于 HTTP 性能上差点，因为多了 SSL/TLS 的几次握手和加密解密的运算处理，但是加密解密的运算处理已经可以通过特有的硬件来加速处理。</p><h2 id="什么是Etag？"><a href="#什么是Etag？" class="headerlink" title="什么是Etag？"></a>什么是Etag？</h2><p>把Last-Modified和ETag请求的http报头一起使用，可利用客户端（例如浏览器）的缓存。ETag用于标识资源的状态，当资源发生变更时，如果其头信息中一个或者多个发生变化，或者消息实体发生变化，那么ETag也随之发生变化。浏览器下载组件的时候，会将它们存储到浏览器缓存中。如果需要再次获取相同的组件，浏览器将检查组件的缓存时间，<br>假如已经过期，那么浏览器将发送一个条件GET请求到服务器，服务器判断缓存还有效，则发送一个304响应，告诉浏览器可以重用缓存组件。</p><h2 id="Expires和Cache-Control"><a href="#Expires和Cache-Control" class="headerlink" title="Expires和Cache-Control"></a>Expires和Cache-Control</h2><p>Expires 用来控制缓存的失效日期<br>Cache-Control 用来控制网页的缓存 常见的取值有private、no-cache、max-age、must-revalidate等，默认为private。</p><h2 id="关于Http-2-0-你知道多少？"><a href="#关于Http-2-0-你知道多少？" class="headerlink" title="关于Http 2.0 你知道多少？"></a>关于Http 2.0 你知道多少？</h2><p>HTTP/2引入了“服务端推（server push）”的概念，它允许服务端在客户端需要数据之前就主动地将数据发送到客户端缓存中，从而提高性能。<br>HTTP/2提供更多的加密支持<br>HTTP/2使用多路技术，允许多个消息在一个连接上同时交差。<br>它增加了头压缩（header compression），因此即使非常小的请求，其请求和响应的header都只会占用很小比例的带宽。</p><h2 id="一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h2><p>1、浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求（TCP三次握手）；<br>2、服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；<br>3、浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；<br>4、载入解析到的资源文件，渲染页面，完成。</p><h2 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h2><p>1、浏览器请求到HTML代码后，在生成DOM的最开始阶段，并行发起css、图片、js的请求，无论他们是否在HEAD里。浏览器会将HTML解析成一个DOM树，DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。<br>2、CSS文件下载完成，开始构建CSSOM<br>3、所有CSS文件下载完成，CSSOM构建结束后，和 DOM 一起生成 Render Tree。<br>4、有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作就是计算出每个节点在屏幕中的位置。<br>5、最后一步，按照算出来的规则，把内容渲染到屏幕上。</p><p>以上五个步骤前3个步骤因为DOM、CSSOM、Render Tree都可能在第一次Painting后又被更新多次，比如JS修改了DOM或者CSS属性。Layout 和 Painting 也会被重复执行，除了DOM、CSSOM更新的原因外，图片下载完成后也需要调用Layout 和 Painting来更新网页。</p><blockquote><p>display:none 的节点不会被加入 Render Tree，而 visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为 display:none 是更优的。</p></blockquote><h2 id="一个完整的URL包括以下几部分"><a href="#一个完整的URL包括以下几部分" class="headerlink" title="一个完整的URL包括以下几部分"></a>一个完整的URL包括以下几部分</h2><blockquote><p><a href="http://www.hzzly.net:8080/news/index.php?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noopener">http://www.hzzly.net:8080/news/index.php?boardID=5&amp;ID=24618&amp;page=1#name</a></p></blockquote><p>1、协议部分<br>2、域名部分<br>3、端口部分<br>4、虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止<br>5、文件名部分：从域名后的最后一个“/”开始到“？”为止<br>6、参数部分：从“？”开始到“#”为止之间的部分<br>7、锚部分：从“#”开始到最后</p><h2 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h2><p>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在1024字节，Get是通过地址栏来传值。</p><p>POST：一般用于修改服务器上的资源，对所发送的信息没有限制。（常用于发送表单数据，新建、修改等），Post是通过提交表单来传值。</p><h2 id="常见HTTP状态码"><a href="#常见HTTP状态码" class="headerlink" title="常见HTTP状态码"></a>常见HTTP状态码</h2><p>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码。<br>2xx（成功）表示成功处理了请求的状态码。<br><code>200</code>（成功）：服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。<br>3xx（重定向）要完成请求，需要进一步操作。<br><code>301</code>（永久移动）：请求的网页已永久移动到新位置。<br><code>302</code>（临时移动）：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。<br><code>304</code>（未修改）：自从上次请求后，请求的网页未修改过。<br>4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理。<br><code>400</code>（错误请求）：服务器不理解请求的语法。<br><code>404</code>（未找到）：服务器找不到请求的网页。<br>5xx（服务器错误）这些状态码表示服务器在处理请求时发生内部错误。<br><code>500</code>（服务器内部错误）：服务器遇到错误，无法完成请求。<br><code>503</code>（服务不可用）：服务器目前无法使用（由于超载或停机维护）。</p><h2 id="说说网络分层里七层模型是哪七层"><a href="#说说网络分层里七层模型是哪七层" class="headerlink" title="说说网络分层里七层模型是哪七层"></a>说说网络分层里七层模型是哪七层</h2><p>应用层、表示层、会话层（从上往下）（HTTP、FTP、SMTP、DNS）</p><p>传输层（TCP和UDP）</p><p>网络层（IP）</p><p>物理和数据链路层（以太网）</p><h2 id="讲讲304缓存的原理"><a href="#讲讲304缓存的原理" class="headerlink" title="讲讲304缓存的原理"></a>讲讲304缓存的原理</h2><p>服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。</p><p>304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件</p><h2 id="http-keep-alive与tcp-keep-alive"><a href="#http-keep-alive与tcp-keep-alive" class="headerlink" title="http keep-alive与tcp keep-alive"></a>http keep-alive与tcp keep-alive</h2><p>http keep-alive是为了让tcp活得更久一点，以便在同一个连接上传送多个http，提高socket的效率。而tcp keep-alive是TCP的一种检测TCP连接状况的保鲜机制。</p><h2 id="常见web安全及防护原理"><a href="#常见web安全及防护原理" class="headerlink" title="常见web安全及防护原理"></a>常见web安全及防护原理</h2><ul><li>sql注入原理<br>  就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</li><li>XSS<br>  指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。</li><li>CSRF<br>  CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次CSRF攻击，受害者必须依次完成两个步骤：1、登录受信任网站A，并在本地生成Cookie。2、在不登出A的情况下，访问危险网站B。</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><blockquote><p>建一个空对象和空数组，循环遍历需要去重的数组，判断对象有没有此属性，没有的话就给对象添加此属性，并向空数组中push这个值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line"><span class="keyword">if</span>(!obj[arr[i]])&#123;</span><br><span class="line">obj[arr[i]] = <span class="literal">true</span>;</span><br><span class="line">result.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line">[...new <span class="built_in">Set</span>(arr)]</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>相邻两个对比，最后把最大的排到了最后，重复此过程。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        <span class="comment">//相邻元素两两对比</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[j+<span class="number">1</span>];        <span class="comment">//元素交换</span></span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote><p>寻找最小的数，保存索引，然后与第一层循环其下标对于的值进行交换</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">var</span> minIndex, temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">minIndex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class="comment">//寻找最小的数</span></span><br><span class="line">minIndex = j;                 <span class="comment">//将最小数的索引保存</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[minIndex];</span><br><span class="line">arr[minIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>选取一个记录作为中间轴，然后将比‘这个记录值’小的移到‘记录值’之前，大的移到之后，然后递归</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arr.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> [];    <span class="comment">// 返回空数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> c = arr.splice(cIndex, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> l = [];</span><br><span class="line"><span class="keyword">var</span> r = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; c) &#123;</span><br><span class="line">l.push(arr[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> quickSort(l).concat(c, quickSort(r));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="对前端界面工程师这个职位是怎么样理解的"><a href="#对前端界面工程师这个职位是怎么样理解的" class="headerlink" title="对前端界面工程师这个职位是怎么样理解的"></a>对前端界面工程师这个职位是怎么样理解的</h2><p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好<br>1、实现界面交互<br>2、提升用户体验</p><h2 id="谈谈你对重构的理解"><a href="#谈谈你对重构的理解" class="headerlink" title="谈谈你对重构的理解"></a>谈谈你对重构的理解</h2><p>在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。</p><p>减少代码间的耦合<br>让代码保持弹性<br>严格按规范编写代码<br>设计可扩展的API<br>代替旧有的框架、语言(如VB)<br>增强用户体验<br>通常来说对于速度的优化也包含在重构中</p><h2 id="你遇到过比较难的技术问题是？你是如何解决的？"><a href="#你遇到过比较难的技术问题是？你是如何解决的？" class="headerlink" title="你遇到过比较难的技术问题是？你是如何解决的？"></a>你遇到过比较难的技术问题是？你是如何解决的？</h2><h2 id="平时是如何学习前端开发的？"><a href="#平时是如何学习前端开发的？" class="headerlink" title="平时是如何学习前端开发的？"></a>平时是如何学习前端开发的？</h2><h2 id="平时如何管理你的项目？"><a href="#平时如何管理你的项目？" class="headerlink" title="平时如何管理你的项目？"></a>平时如何管理你的项目？</h2><p>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；</p><p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p><p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p><p>页面进行标注（例如 页面 模块 开始和结束）；</p><p>CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；</p><p>JS 分文件夹存放 命名以该JS功能为准的英文翻译。</p><p>图片采用整合的 images.png png8 格式文件使用尽量整合在一起使用方便将来的管理 </p><h2 id="说说最近最流行的一些东西吧？常去哪些网站？"><a href="#说说最近最流行的一些东西吧？常去哪些网站？" class="headerlink" title="说说最近最流行的一些东西吧？常去哪些网站？"></a>说说最近最流行的一些东西吧？常去哪些网站？</h2><p>Node.js、Mongodb、npm、MVVM、MEAN、three.js、React、Vue、WebGL<br>网站：掘金、segmentfault、Github、w3cplus、前端圈、知乎等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：以下是整理一些面试中经常会遇到的经典面试题以及自己面试过程中有一些未解决的问题，通过对知识的整理以及经验的总结，重新巩固自身的前端基础知识，如有错误或更好的答案，欢迎指正，水平有限，望各位不吝指教。:）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Fetch学习笔记</title>
    <link href="http://yoursite.com/2017/05/20/Fetch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/20/Fetch学习笔记/</id>
    <published>2017-05-20T15:52:22.000Z</published>
    <updated>2017-05-21T11:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言: 前几天面试问到 Ajax和Fetch的区别，因为以前也用过这两个东西，所以也没难倒我，现在回头整理一遍。</p></blockquote><h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><blockquote><p>与XMLHttpRequest(XHR)类似，fetch()方法允许你发出AJAX请求。区别在于Fetch API使用Promise，因此是一种简洁明了的API，比XMLHttpRequest更加简单易用。</p></blockquote><p>如果还不了解<code>Promise</code>，可以移步👉<a href="https://hzzly.github.io/2017/03/25/%E6%B5%85%E8%B0%88Promise/" target="_blank" rel="noopener">浅谈Promise</a>这篇博客</p><h2 id="比较XMLHttpRequest（传统Ajax）"><a href="#比较XMLHttpRequest（传统Ajax）" class="headerlink" title="比较XMLHttpRequest（传统Ajax）"></a>比较XMLHttpRequest（传统Ajax）</h2><p>创建步骤：</p><blockquote><ul><li>创建<code>XMLHttpRequest</code>对象，也就是创建一个异步调用对象</li><li>创建一个新的<code>HTTP</code>请求，并指定该<code>HTTP</code>请求的方法、<code>URL</code>及验证信息</li><li>发送<code>HTTP</code>请求</li><li>处理响应，获取异步调用返回的数据</li></ul></blockquote><p>可以发现，主要的不同点在于：传统Ajax使用事件处理器，而不是Promise对象，并且请求的发起完全依赖于xhr对象所提供的方法。</p><p>想详细了解 Ajax的封装可以查看我上一篇博客，一步步教你 Ajax的封装👉<a href="https://hzzly.github.io/2017/05/17/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">Ajax学习笔记</a></p><h2 id="fetch语法"><a href="#fetch语法" class="headerlink" title="fetch语法"></a>fetch语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(url)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> response.json();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 ES6 的 <code>箭头函数</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(url)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e))</span><br></pre></td></tr></table></figure></p><p>使用 <code>async/await</code> 来做最终优化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line"><span class="keyword">let</span> data = response.json();</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>使用 await 后，<strong>写异步代码就像写同步代码一样爽</strong>。await 后面可以跟 Promise 对象，表示等待 Promise resolve() 才会继续向下执行，如果 Promise 被 reject() 或抛出异常则会被外面的 try…catch 捕获。</p><p>如果还不了解<code>async/await</code>，可以移步👉<a href="https://hzzly.github.io/2017/05/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Async%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">es6Async</a>这篇博客</p><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">"GET"</span>, <span class="comment">//默认</span></span><br><span class="line">    headers:&#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"application/json, text/plain, */*"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e))</span><br></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">"POST"</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"application/json, text/plain, */*"</span>,</span><br><span class="line">        <span class="string">"Content-type"</span>:<span class="string">"application:/x-www-form-urlencoded; charset=UTF-8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="string">"name=hzzly&amp;age=22"</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e))</span><br></pre></td></tr></table></figure><h2 id="使用Fetch请求发送凭证"><a href="#使用Fetch请求发送凭证" class="headerlink" title="使用Fetch请求发送凭证"></a>使用Fetch请求发送凭证</h2><blockquote><p>要使用Fetch发送带有诸如cookie之类的凭证的请求。你可以在选项对象中将credentials属性值设置为“include”：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(url,&#123;</span><br><span class="line">credentials: <span class="string">"include"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="封装POST请求"><a href="#封装POST请求" class="headerlink" title="封装POST请求"></a>封装POST请求</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将对象拼接成 name=hzzly&amp;age=22 的字符串形式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">params</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">result += <span class="string">`&amp;<span class="subst">$&#123;item&#125;</span>=<span class="subst">$&#123;obj[item]&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line">result = result.slice(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, paramsObj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = fetch(url, &#123;</span><br><span class="line">methods: <span class="string">'POST'</span>,</span><br><span class="line">credentials: <span class="string">"include"</span></span><br><span class="line">headers: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"application/json, text/plain, */*"</span>,</span><br><span class="line">        <span class="string">"Content-type"</span>:<span class="string">"application:/x-www-form-urlencoded; charset=UTF-8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: params(paramsObj)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">name: <span class="string">'hzzly'</span>,</span><br><span class="line">age: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">post(url, obj)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言: 前几天面试问到 Ajax和Fetch的区别，因为以前也用过这两个东西，所以也没难倒我，现在回头整理一遍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;fetch&quot;&gt;&lt;a href=&quot;#fetch&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Fetch" scheme="http://yoursite.com/tags/Fetch/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习笔记</title>
    <link href="http://yoursite.com/2017/05/17/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/17/Ajax学习笔记/</id>
    <published>2017-05-17T14:53:25.000Z</published>
    <updated>2017-05-17T14:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上一个外包项目中，因为用到了前后端分离的思路，所以都要通过Ajax来请求数据然后把数据渲染到页面上，一开始想过直接引用Jquery，但感觉就使用Jquery的Ajax函数，有点太浪费，所以就自己撸了一个Ajax函数。本文由浅入深，一步一步带你封装属于自己的Ajax库。</p></blockquote><h2 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h2><blockquote><ul><li>Asynchronous Javascript And XML （异步的JavaScript和XML）</li><li>它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</li><li>Ajax是一种用于创建快速动态网页的技术。在前台与后台进行数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，实现局部更新。</li></ul></blockquote><h3 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h3><blockquote><ul><li>页面无刷新，用户体验好。</li><li>异步通信，更加快的响应能力。</li><li>减少冗余请求，减轻了服务器负担。</li><li>基于标准化的并被广泛支持的技术</li></ul></blockquote><h3 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h3><blockquote><ul><li>场景 1. 数据验证</li><li>场景 2. 按需取数据</li><li>场景 3. 自动更新页面</li><li>…</li></ul></blockquote><p>说了这么多，接下来来点干货。</p><h2 id="创建ajax的步骤"><a href="#创建ajax的步骤" class="headerlink" title="创建ajax的步骤"></a>创建ajax的步骤</h2><blockquote><p>Ajax的原理简单来说通过<code>XMLHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。原生创建ajax可分为以下四步</p></blockquote><h3 id="1、创建XMLHttpRequest对象"><a href="#1、创建XMLHttpRequest对象" class="headerlink" title="1、创建XMLHttpRequest对象"></a>1、创建XMLHttpRequest对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRequest</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">//IE6以上</span></span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、准备请求"><a href="#2、准备请求" class="headerlink" title="2、准备请求"></a>2、准备请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(method,url,<span class="keyword">async</span>);</span><br></pre></td></tr></table></figure><ul><li><p>第一个参数表示请求类型的字符串，其值可以是<code>GET</code>或者<code>POST</code><br><code>GET</code>请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"GET"</span>,demo.php?name=hzzly&amp;age=<span class="number">21</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><code>POST</code>请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"POST"</span>,demo.php,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>第二个参数是要作为请求发送目标的URL。</p></li><li>第三个参数是true或false，表示请求是以异步还是同步的模式发出。（默认为true，一般不建议为false）</li></ul><h3 id="3、发送请求"><a href="#3、发送请求" class="headerlink" title="3、发送请求"></a>3、发送请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><ul><li><p><code>GET</code>请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"GET"</span>,demo.php?name=hzzly&amp;age=<span class="number">21</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></li><li><p><code>POST</code>请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"POST"</span>,demo.php,<span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeder(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>);</span><br><span class="line">xhr.send(param)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、处理响应"><a href="#4、处理响应" class="headerlink" title="4、处理响应"></a>4、处理响应</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>onreadystatechange</code>：当处理过程发生变化的时候执行下面的函数</li><li><code>readyState</code>：ajax处理过程<ul><li>0：请求未初始化（还没有调用 <code>open()</code>）</li><li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）</li><li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）</li><li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成</li><li>4：响应已完成；您可以获取并使用服务器的响应了</li></ul></li><li><code>status</code>属性:<ul><li>200: “OK”</li><li>404: 未找到页面</li></ul></li><li><code>responseText</code>：获得字符串形式的响应数据，可以用<code>JSON.parse(xhr.responseText)</code>转化为<code>JSON</code>对象</li></ul></blockquote><h2 id="封装例子"><a href="#封装例子" class="headerlink" title="封装例子"></a>封装例子</h2><blockquote><p>1.get请求函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个简单的get请求</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125;   url     请求地址,文件名</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fnSucc  请求成功时执行的函数</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fnFaild 请求失败执行的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span>(<span class="params">url, fnSucc, fnFaild</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined.</span></span><br><span class="line"><span class="comment">         * 进入else若直接使用XMLHttpRequest在不支持的情况下会报错</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">//IE6以上</span></span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.连接服务器</span></span><br><span class="line">    <span class="comment">//open(方法,url,是否异步)</span></span><br><span class="line">    xhr.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//3.发送请求</span></span><br><span class="line">    xhr.send();</span><br><span class="line">    <span class="comment">//4.接收返回</span></span><br><span class="line">    <span class="comment">//OnRedayStateChange事件</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//alert("成功" + xhr.responseText);</span></span><br><span class="line">                fnSucc(xhr.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//alert("服务器响应失败!");</span></span><br><span class="line">                <span class="keyword">if</span> (fnFaild) &#123;</span><br><span class="line">                    fnFaild();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.get与post结合的请求函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AJAX函数封装</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; url     请求地址（必须）</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; options 发送请求的选项参数</span></span><br><span class="line"><span class="comment"> *   @config &#123;string&#125; [options.type] 请求发送的类型。默认为GET。</span></span><br><span class="line"><span class="comment"> *   @config &#123;Object&#125; [options.data] 需要发送的数据。</span></span><br><span class="line"><span class="comment"> *   @config &#123;Function&#125; [options.onsuccess] 请求成功时触发。（必须）</span></span><br><span class="line"><span class="comment"> *   @config &#123;Function&#125; [options.onfail] 请求失败时触发。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AJAX</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此处必须需要使用window.的方式,表示为window对象的一个属性.不存在时值为undefined,进入else</span></span><br><span class="line"><span class="comment">         * 若直接使用XMLHttpRequest,在不支持的情况下会报错</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">//IE6以上</span></span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.连接服务器</span></span><br><span class="line">    <span class="comment">//open(方法,url,是否异步)</span></span><br><span class="line">    <span class="keyword">var</span> param = <span class="string">""</span>; <span class="comment">//请求参数。</span></span><br><span class="line">    <span class="comment">//只有data存在，且为对象使才执行</span></span><br><span class="line">    <span class="keyword">var</span> data = options.data ? options.data : <span class="number">-1</span>; <span class="comment">//缓存data</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (data) === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123; <span class="comment">//请求参数拼接</span></span><br><span class="line">            <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">                param += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;data[key]&#125;</span>&amp;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        param.replace(<span class="regexp">/&amp;$/</span>, <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        param = <span class="string">"timestamp="</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.发送请求</span></span><br><span class="line">    <span class="keyword">var</span> type = options.type ? options.type.toUpperCase() : <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">"GET"</span>) &#123;</span><br><span class="line">        xhr.open(<span class="string">"GET"</span>, <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;param&#125;</span>`</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeder(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>);</span><br><span class="line">        xhr.send(param);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.接收返回</span></span><br><span class="line">    <span class="comment">//OnRedayStateChange事件</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//请求成功。形参为获取到的字符串形式的响应数据</span></span><br><span class="line">                options.onsuccess(xhr.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先判断是否存在请求失败函数</span></span><br><span class="line">                <span class="comment">//存在时，形参为XMLHttpRequest对象，便于进行错误进行处理</span></span><br><span class="line">                <span class="keyword">if</span> (options.onfail) &#123;</span><br><span class="line">                    options.onfail(xhr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在上一个外包项目中，因为用到了前后端分离的思路，所以都要通过Ajax来请求数据然后把数据渲染到页面上，一开始想过直接引用Jquery，但感觉就使用Jquery的Ajax函数，有点太浪费，所以就自己撸了一个Ajax函数。本文由浅入深，一步一步带你封装
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-es6编程风格</title>
    <link href="http://yoursite.com/2017/05/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/"/>
    <id>http://yoursite.com/2017/05/15/读书笔记-es6编程风格/</id>
    <published>2017-05-15T12:48:47.000Z</published>
    <updated>2017-05-21T13:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a><strong>编程风格</strong></h1><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><blockquote><ul><li>let 取代 var</li></ul></blockquote><p>ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。</p><blockquote><ul><li>全局常量和线程安全</li></ul></blockquote><p>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></p><p>了解更多👉：<a href="https://hzzly.github.io/2017/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6let%E4%B8%8Econst/" target="_blank" rel="noopener">let与const</a></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote><ul><li>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">"foobar"</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">'foo'</span> + a + <span class="string">'bar'</span>;</span><br><span class="line"><span class="comment">// acceptable</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">`foobar`</span>;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">`foo<span class="subst">$&#123;a&#125;</span>bar`</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="string">'foobar'</span>;</span><br></pre></td></tr></table></figure><p>了解更多👉：<a href="https://hzzly.github.io/2017/04/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/" target="_blank" rel="noopener">字符串的扩展</a></p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><blockquote><ul><li>使用数组成员对变量赋值时，优先使用解构赋值。</li><li>函数的参数如果是对象的成员，优先使用解构赋值。</li><li>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123; &#125;</span><br><span class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure><p>了解更多👉：<a href="https://hzzly.github.io/2017/04/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/" target="_blank" rel="noopener">解构赋值</a></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote><ul><li>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2 &#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1: v1,</span><br><span class="line">  k2: v2,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ul><li>对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写</li></ul></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="string">'some value'</span>;</span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref,</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>了解更多👉：<a href="https://hzzly.github.io/2017/05/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/" target="_blank" rel="noopener">对象的扩展</a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><ul><li>使用扩展运算符（…）拷贝数组。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure><blockquote><ul><li>使用Array.from方法，将类似数组的对象转为数组。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br><span class="line"><span class="comment">//或者扩展运算符(...)</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure><p>了解更多👉：<a href="https://hzzly.github.io/2017/05/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/" target="_blank" rel="noopener">数组的扩展</a></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><ul><li>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。</li><li>使用rest运算符（…）代替参数</li><li>使用默认值语法设置函数参数的默认值。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解更多👉：<a href="https://hzzly.github.io/2017/05/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/" target="_blank" rel="noopener">函数的扩展</a></p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><blockquote><ul><li>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。</li><li>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  getA() &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  getB() &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解更多👉：<a href="https://hzzly.github.io/2017/05/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Class/" target="_blank" rel="noopener">Class</a></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><blockquote><ul><li>使用import取代require。</li><li>使用export取代module.exports。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">'moduleA'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解更多👉：<a href="https://hzzly.github.io/2017/05/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Module/" target="_blank" rel="noopener">Module</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编程风格&quot;&gt;&lt;a href=&quot;#编程风格&quot; class=&quot;headerlink&quot; title=&quot;编程风格&quot;&gt;&lt;/a&gt;&lt;strong&gt;编程风格&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;块级作用域&quot;&gt;&lt;a href=&quot;#块级作用域&quot; class=&quot;headerlink&quot; title=&quot;块级作用域&quot;&gt;&lt;/a&gt;块级作用域&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;let 取代 var&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;全局常量和线程安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// best&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [a, b, c] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;了解更多👉：&lt;a href=&quot;https://hzzly.github.io/2017/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6let%E4%B8%8Econst/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;let与const&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; b = &lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt; + a + &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// acceptable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; c = &lt;span class=&quot;string&quot;&gt;`foobar`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;foobar&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; b = &lt;span class=&quot;string&quot;&gt;`foo&lt;span class=&quot;subst&quot;&gt;$&amp;#123;a&amp;#125;&lt;/span&gt;bar`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; c = &lt;span class=&quot;string&quot;&gt;&#39;foobar&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;了解更多👉：&lt;a href=&quot;https://hzzly.github.io/2017/04/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;字符串的扩展&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解构赋值&quot;&gt;&lt;a href=&quot;#解构赋值&quot; class=&quot;headerlink&quot; title=&quot;解构赋值&quot;&gt;&lt;/a&gt;解构赋值&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用数组成员对变量赋值时，优先使用解构赋值。&lt;/li&gt;
&lt;li&gt;函数的参数如果是对象的成员，优先使用解构赋值。&lt;/li&gt;
&lt;li&gt;如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [first, second] = arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getFullName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&amp;#123; firstName, lastName &amp;#125;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; left, right &amp;#125; = processInput(input);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;了解更多👉：&lt;a href=&quot;https://hzzly.github.io/2017/04/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;解构赋值&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a = &amp;#123; &lt;span class=&quot;attr&quot;&gt;k1&lt;/span&gt;: v1, &lt;span class=&quot;attr&quot;&gt;k2&lt;/span&gt;: v2 &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; b = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  k1: v1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  k2: v2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-es6Module</title>
    <link href="http://yoursite.com/2017/05/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-es6Module/"/>
    <id>http://yoursite.com/2017/05/14/读书笔记-es6Module/</id>
    <published>2017-05-14T11:13:48.000Z</published>
    <updated>2017-05-21T13:51:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a><strong>Module</strong></h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS模块</span></span><br><span class="line"><span class="keyword">let</span> &#123; stat, exists, readFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> stat = _fs.stat;</span><br><span class="line"><span class="keyword">let</span> exists = _fs.exists;</span><br><span class="line"><span class="keyword">let</span> readfile = _fs.readfile;</span><br></pre></td></tr></table></figure><p>上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p><blockquote><p>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br></pre></td></tr></table></figure><p>上面代码的实质是从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><blockquote><p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。</p></blockquote><p>严格模式主要有以下限制:</p><blockquote><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用with语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀0表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量delete prop，会报错，只能删除属性delete global[prop]</li><li>eval不会在它的外层作用域引入变量</li><li>eval和arguments不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用arguments.callee</li><li>不能使用arguments.caller</li><li>禁止this指向全局对象</li><li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li><li>增加了保留字（比如protected、static和interface）</li></ul></blockquote><h2 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h2><blockquote><p>export命令用于规定模块的对外接口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="comment">//或者简写</span></span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">let</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</span><br><span class="line"><span class="comment">//输出函数或类（class）</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h2><blockquote><p>import命令用于输入其他模块提供的功能，import命令具有提升效果，会提升到整个模块的头部，首先执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./index'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.textContent = firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>as关键字</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为输入的变量重新取一个名字</span></span><br><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./index'</span>;</span><br><span class="line"><span class="comment">//模块整体加载</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span></span><br></pre></td></tr></table></figure></p><h2 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h2><blockquote><p>为模块指定默认输出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>一个 vuex 模块（module）实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'../types'</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    showLoading: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    setShowLoading(&#123; commit &#125;, status) &#123;</span><br><span class="line">        commit(types.COM_SHOW_LOADING, status)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    showLoading: <span class="function"><span class="params">state</span> =&gt;</span> state.showLoading,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    [types.COM_SHOW_LOADING](state, status) &#123;</span><br><span class="line">        state.showLoading = status</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    actions,</span><br><span class="line">    getters,</span><br><span class="line">    mutations</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//serach.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123;</span><br><span class="line"><span class="comment">//mapGetters(map: Array&lt;string&gt; | Object): Object,创建组件的计算属性返回 getter 的返回值</span></span><br><span class="line"><span class="comment">//使用对象展开运算符将 getters 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">        <span class="string">'showLoading'</span></span><br><span class="line">])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;&lt;strong&gt;Module&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
</feed>
